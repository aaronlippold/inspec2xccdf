{
  "version": "1.29.0",
  "controls": [
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should eq \"< %m %a %u %d %c %s %r >\"",
      "run_time": 0.001696439,
      "start_time": "2017-06-30 21:54:50 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_hostname; output should match /(on|true)/i",
      "run_time": 0.002159659,
      "start_time": "2017-06-30 21:54:50 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%m\"",
      "run_time": 0.003035655,
      "start_time": "2017-06-30 21:54:50 +0000"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL query: SELECT current_setting('client_min_messages'); output should eq \"error\"",
      "run_time": 0.067657703,
      "start_time": "2017-06-30 21:54:50 +0000",
      "message": "\nexpected: \"error\"\n     got: \"notice\"\n\n(compared using ==)\n"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL Configuration client_min_messages should eq \"error\"",
      "run_time": 0.006806554,
      "start_time": "2017-06-30 21:54:51 +0000",
      "message": "\nexpected: \"error\"\n     got: nil\n\n(compared using ==)\n"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 3.1755e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "failed",
      "code_desc": "File  should be file",
      "run_time": 0.010241187,
      "start_time": "2017-06-30 21:54:51 +0000",
      "message": "expected `File .file?` to return true, got false"
    },
    {
      "status": "passed",
      "code_desc": "File . owner should match /root|vcap/",
      "run_time": 0.099627632,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File . mode should cmp == \"0700\"",
      "run_time": 0.000496929,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "failed",
      "code_desc": "File /etc/ssl/private/ssl-cert-snakeoil.key should be file",
      "run_time": 0.000377596,
      "start_time": "2017-06-30 21:54:51 +0000",
      "message": "expected `File /etc/ssl/private/ssl-cert-snakeoil.key.file?` to return true, got false"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data owner should match /root|vcap/",
      "run_time": 0.032201318,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data mode should cmp == \"0700\"",
      "run_time": 0.000478954,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "failed",
      "code_desc": "File  should be file",
      "run_time": 0.00043973,
      "start_time": "2017-06-30 21:54:51 +0000",
      "message": "expected `File .file?` to return true, got false"
    },
    {
      "status": "passed",
      "code_desc": "File . owner should match /root|vcap/",
      "run_time": 0.000280444,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File . mode should cmp == \"0700\"",
      "run_time": 0.000316462,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "failed",
      "code_desc": "File /etc/ssl/certs/ssl-cert-snakeoil.pem should be file",
      "run_time": 0.001672448,
      "start_time": "2017-06-30 21:54:51 +0000",
      "message": "expected `File /etc/ssl/certs/ssl-cert-snakeoil.pem.file?` to return true, got false"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data owner should match /root|vcap/",
      "run_time": 0.000206681,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data mode should cmp == \"0700\"",
      "run_time": 0.000318797,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 2.471e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: CREATE TABLE stig_test(id INT); output should eq \"CREATE TABLE\"",
      "run_time": 0.000303143,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: INSERT INTO stig_test(id) VALUES (0); output should eq \"INSERT 0 1\"",
      "run_time": 0.000270685,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: ALTER TABLE stig_test ADD COLUMN name text; output should eq \"ALTER TABLE\"",
      "run_time": 0.000299647,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: UPDATE stig_test SET id = 1 WHERE id = 0; output should eq \"UPDATE 1\"",
      "run_time": 0.000311255,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Can't read run query \"SET ROLE joe; INSERT INTO stig_test(id) VALUES (1);\" on postgres_session: \nERROR:  permission denied for relation stig_test\n should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ stig_test/",
      "run_time": 0.000211178,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Can't read run query \"SET ROLE joe; ALTER TABLE stig_test DROP COLUMN name;\" on postgres_session: \nERROR:  must be owner of relation stig_test\n should match /ERROR:\\s*must\\ be\\ owner\\ of\\ relation\\ stig_test/",
      "run_time": 0.001238163,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Can't read run query \"SET ROLE joe;UPDATE stig_test SET id = 0 WHERE id = 1;\" on postgres_session: \nERROR:  permission denied for relation stig_test\n should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ stig_test/",
      "run_time": 0.000337833,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: DROP TABLE stig_test; output should eq \"DROP TABLE\"",
      "run_time": 0.000220809,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,CREATE TABLE(,.*){2},CREATE\\ TABLE\\ stig_test\\(id\\ INT\\);/",
      "run_time": 0.21240991,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,WRITE,INSERT(,.*){2},INSERT\\ INTO\\ stig_test\\(id\\)\\ VALUES\\ \\(0\\);/",
      "run_time": 0.008304251,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,ALTER TABLE(,.*){2},ALTER\\ TABLE\\ stig_test\\ ADD\\ COLUMN\\ name\\ text;/",
      "run_time": 0.01101778,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,WRITE,UPDATE(,.*){2},UPDATE\\ stig_test\\ SET\\ id\\ =\\ 1\\ WHERE\\ id\\ =\\ 0;/",
      "run_time": 0.009910171,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ joe;\\ INSERT\\ INTO\\ stig_test\\(id\\)\\ VALUES\\ \\(1\\);/",
      "run_time": 0.009760999,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ stig_test/",
      "run_time": 0.011085946,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ joe;\\ ALTER\\ TABLE\\ stig_test\\ DROP\\ COLUMN\\ name;/",
      "run_time": 0.015901325,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*must\\ be\\ owner\\ of\\ relation\\ stig_test/",
      "run_time": 0.007686105,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ joe;UPDATE\\ stig_test\\ SET\\ id\\ =\\ 0\\ WHERE\\ id\\ =\\ 1;/",
      "run_time": 0.005475543,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ stig_test/",
      "run_time": 0.007841148,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,DROP TABLE(,.*){2},DROP\\ TABLE\\ stig_test;/",
      "run_time": 0.006628141,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 7.598e-06,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find /var/vcap/store/postgresql/data -type f ! -perm 600 -or ! -user vcap -or ! -group vcap stdout should eq \"\"",
      "run_time": 0.022036638,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find /var/vcap/store/postgresql/data -type f ! -perm 600 -or ! -user vcap -or ! -group vcap stderr should eq \"\"",
      "run_time": 0.000463008,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find /var/vcap/store/postgresql/data -type d ! -perm 700 -or ! -user vcap -or ! -group vcap stdout should eq \"\"",
      "run_time": 0.023090066,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find /var/vcap/store/postgresql/data -type d ! -perm 700 -or ! -user vcap -or ! -group vcap stderr should eq \"\"",
      "run_time": 0.001101761,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 1.9044e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 1.3128e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL query: SHOW ssl; output should match /(on|true)/i",
      "run_time": 0.000526733,
      "start_time": "2017-06-30 21:54:51 +0000",
      "message": "expected \"off\" to match /(on|true)/i\nDiff:\n@@ -1,2 +1,2 @@\n-/(on|true)/i\n+\"off\"\n"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000369592,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_destination; output should match /(stderr|syslog)/i",
      "run_time": 0.000144229,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000132618,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
      "run_time": 0.001255272,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
      "run_time": 0.000115145,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 0.000102664,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 0.000101673,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log_catalog; output should eq \"on\"",
      "run_time": 0.000427154,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|_pg_foreign_data_wrappers|view||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000413982,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|_pg_foreign_servers|view||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000189736,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|_pg_foreign_table_columns|view||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00021312,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|_pg_foreign_tables|view||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000110679,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|_pg_user_mappings|view||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.8313e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|administrable_role_authorizations|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.7771e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 9.7119e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000133931,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00012437,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|applicable_roles|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 3.0102e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000410037,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000142349,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000149502,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|attributes|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 2.4145e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000153413,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.9718e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000133255,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|character_sets|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.3099e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000154758,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00011311,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000136126,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|check_constraint_routine_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.0762e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000314043,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000116398,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000246241,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|check_constraints|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000106554,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 9.61e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000109183,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000475597,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|collation_character_set_applicability|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000340061,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000466479,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000239513,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000652784,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|collations|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.001486441,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000360557,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000202888,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000195578,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|column_domain_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00011385,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000205568,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 4.304e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000148712,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|column_options|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.001106284,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000448764,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000227007,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000202879,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|column_privileges|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000104644,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00013752,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000149693,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 8.0725e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|column_udt_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000266182,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000251088,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000696932,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000673396,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000278339,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000164801,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.8865e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000131796,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|constraint_column_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.7799e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000127256,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.1235e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000140883,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|constraint_table_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.2213e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000124322,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.0803e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00012374,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|data_type_privileges|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000100069,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000145465,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.5984e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000128541,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|domain_constraints|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000106534,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000229977,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000357975,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000167084,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|domain_udt_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000368107,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000193348,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000102135,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000140851,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|domains|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.6324e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000153555,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.5218e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000126238,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|element_types|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.778e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000122925,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.1186e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000323268,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|enabled_roles|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.2715e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000133982,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.7587e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00021621,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|foreign_data_wrapper_options|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000139121,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000140167,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00013915,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00150832,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|foreign_data_wrappers|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000300384,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000221986,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.001038146,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000318931,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|foreign_server_options|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00041423,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000434782,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000128041,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000345475,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|foreign_servers|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00013054,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000277295,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000158685,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000224434,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|foreign_table_options|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000143145,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000153048,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.0117e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000124061,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|foreign_tables|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000114855,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000101266,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000216641,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000110781,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|information_schema_catalog_name|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000270924,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000296758,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 2.1e-08,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000333812,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|key_column_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000215895,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000406881,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000488182,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000527672,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|parameters|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000234589,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000593003,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000251486,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000452801,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|referential_constraints|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000457828,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000388848,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000141646,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000193994,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|role_column_grants|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000126188,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000164202,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000333927,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.002458706,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|role_routine_grants|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000258402,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 7.6185e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000170951,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000113056,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|role_table_grants|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000640991,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000722128,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000303712,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000526228,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|role_udt_grants|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000153831,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000419705,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.001168419,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000125253,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|role_usage_grants|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000167788,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000285218,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000281485,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000630123,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|routine_privileges|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000266225,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000404972,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000222622,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000349957,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|routines|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000202133,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000234918,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000251625,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000303751,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|schemata|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00068714,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.001116557,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000808193,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.001394176,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|sequences|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000699565,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000232355,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000224718,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000401708,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|sql_features|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000237119,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000846146,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.7161e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000176089,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|sql_implementation_info|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000159208,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000276171,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000225766,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000398723,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|sql_languages|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000341444,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000929355,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000306036,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000351818,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|sql_packages|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000207055,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00026712,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000150173,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.001116014,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|sql_parts|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000560313,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|sql_sizing|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000269509,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000246289,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00143134,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000439378,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|sql_sizing_profiles|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000184859,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000235365,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000157643,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000228792,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|table_constraints|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000145803,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000263405,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000128137,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000260546,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|table_privileges|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000317063,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000527062,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00018683,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00024928,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|tables|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000161514,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000295507,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000673689,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000225725,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|transforms|view||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000125557,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|triggered_update_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000130574,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.001438699,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000969106,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000230082,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|triggers|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000232516,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000268869,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.1681e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000122296,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|udt_privileges|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.8026e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000110582,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.2146e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000103397,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|usage_privileges|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.668e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000107812,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000205651,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000171501,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|user_defined_types|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.9111e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000293488,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.5303e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000204449,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|user_mapping_options|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.6646e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00015767,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.5437e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000441493,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|user_mappings|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000151778,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000166621,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000107687,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000204936,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|view_column_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00026159,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000229609,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000226916,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000504098,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|view_routine_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.003000454,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000620394,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000168095,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000280507,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|view_table_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000163088,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000300026,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000165931,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000250665,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "information_schema|views|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000117285,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000118434,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.5884e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000106706,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_aggregate|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.981e-06,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000126116,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_am|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000103015,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000128297,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_amop|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000183326,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000395398,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_amproc|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000266989,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000104603,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_attrdef|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000104423,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 1.1608e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_attribute|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000124413,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000160299,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_auth_members|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.0554e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000117835,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_authid|table|vcap=arwdDxt/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 3.0422e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 7.7329e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_available_extension_versions|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.8601e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000297663,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_available_extensions|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 1.442e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000527474,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_cast|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000403044,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000203077,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_class|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.5483e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 5.1444e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_collation|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.1206e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000125966,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_constraint|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.5548e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000107959,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_conversion|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.1275e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000102083,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_cursors|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.3034e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000111533,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_database|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6919e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00011114,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_db_role_setting|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.3915e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000123839,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_default_acl|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000141551,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000110778,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_depend|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000137322,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000280506,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_description|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00013103,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000305589,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_enum|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000114038,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000124166,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_event_trigger|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6326e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000110119,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_extension|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.4811e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000105465,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_file_settings|view|vcap=arwdDxt/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000160035,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000150066,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_foreign_data_wrapper|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.8958e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000111892,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_foreign_server|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.3374e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000504737,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_foreign_table|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000304574,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000283079,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_group|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000154198,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000223392,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_index|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00034495,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000150735,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000174887,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00093482,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_inherits|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000448302,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000656939,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_language|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000665733,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.001096436,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_largeobject|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000369468,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_largeobject_metadata|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000191773,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000195009,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_locks|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.5835e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 9.9708e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_matviews|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 2.149e-06,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000207225,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_namespace|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000153133,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000243075,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_opclass|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000130051,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 9.2927e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_operator|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00016616,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00028193,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_opfamily|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000115752,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000313176,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_pltemplate|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 4.2915e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000110429,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_policies|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.108e-06,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 1.6504e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_policy|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 1.7704e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 2.1346e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_prepared_statements|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000101543,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000678742,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_prepared_xacts|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000104245,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00025858,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_proc|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000100742,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 6.6301e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_range|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.7563e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000133551,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_replication_origin|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000174173,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00012084,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_replication_origin_status|view|vcap=arwdDxt/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.7563e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000129432,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_replication_slots|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.9646e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000106104,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_rewrite|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.3352e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000146572,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_roles|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.414e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000101177,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_rules|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000301838,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00090537,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_seclabel|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00012334,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000132187,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_seclabels|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000101375,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000194887,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_settings|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000100113,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00011119,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "failed",
      "code_desc": "=rw/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000332863,
      "start_time": "2017-06-30 21:54:51 +0000",
      "message": "expected \"=rw/vcap||\" not to match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/\n+\"=rw/vcap||\"\n"
    },
    {
      "status": "failed",
      "code_desc": "=rw/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000257546,
      "start_time": "2017-06-30 21:54:51 +0000",
      "message": "expected \"=rw/vcap\" to match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/\n+\"=rw/vcap\"\n"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_shadow|view|vcap=arwdDxt/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.9919e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 7.6361e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_shdepend|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000136997,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000190131,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_shdescription|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000134478,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 8.7022e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_shseclabel|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000105059,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00011293,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_activity|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.0939e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000104047,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_all_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.0974e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.001073254,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_all_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000169464,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000469262,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_archiver|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000173936,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.001622787,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_bgwriter|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000416092,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000145982,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_database|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000110729,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000191538,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_database_conflicts|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000252588,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000149458,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_replication|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 3e-09,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000162879,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_ssl|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000270574,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000416856,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_sys_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000141262,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000617609,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_sys_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000119715,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000133904,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_user_functions|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.9582e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000113224,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_user_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.488e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000122859,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_user_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.5312e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000103781,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_xact_all_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000143669,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000128273,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_xact_sys_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 5.9425e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000207736,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_xact_user_functions|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.5969e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000111081,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stat_xact_user_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6947e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000113124,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_statio_all_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.7647e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000119505,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_statio_all_sequences|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.836e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000109322,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_statio_all_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.1363e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00010675,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_statio_sys_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.1005e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000129017,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_statio_sys_sequences|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.235e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00029202,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_statio_sys_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.707e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000145662,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_statio_user_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.7569e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00010589,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_statio_user_sequences|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.9615e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000100659,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_statio_user_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.1271e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000101451,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_statistic|table|vcap=arwdDxt/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.9005e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000252047,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_stats|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000107802,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000120475,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6344e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000114582,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_tablespace|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.8113e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000368398,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_timezone_abbrevs|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 4.2571e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000127327,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_timezone_names|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.1171e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000278538,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_transform|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.6685e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00011078,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_trigger|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.8311e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000301001,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_ts_config|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.9858e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000114143,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_ts_config_map|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.5375e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000104087,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_ts_dict|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6767e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000104681,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_ts_parser|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.0714e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000145437,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_ts_template|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.487e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000105041,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_type|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.725e-06,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000402068,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_user|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000187745,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000420209,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_user_mapping|table|vcap=arwdDxt/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000155809,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000136143,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_user_mappings|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.0403e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000111012,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pg_catalog|pg_views|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6928e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 7.1068e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data should be owned by \"vcap\"",
      "run_time": 0.00023332,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data mode should cmp == \"0700\"",
      "run_time": 0.000196898,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied/",
      "run_time": 0.006126816,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ ALTER\\ ROLE\\ joe\\ NOLOGIN;/",
      "run_time": 0.004299885,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Cannot login should not match /Superuser/",
      "run_time": 0.000188973,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Create role, Create DB, Cannot login should not match /Superuser/",
      "run_time": 0.000134999,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Replication should not match /Superuser/",
      "run_time": 0.000374722,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|pg_stat_repl_json|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000183091,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000128681,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "replication=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.996e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "replication=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000114195,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|geography_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000166385,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000110498,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 3.6054e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000151775,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|geometry_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.0254e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000108505,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.9858e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000106278,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|raster_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.6419e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000117079,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.5156e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000114258,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|raster_overviews|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.5638e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.0001015,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.8935e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000121138,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|spatial_ref_sys|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.1758e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000160451,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.1471e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000114731,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|addr|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000226181,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|addr_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000204804,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|addrfeat|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000103498,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|addrfeat_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6956e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|bg|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6254e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|bg_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.9971e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|county|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.8497e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|county_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.6812e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|county_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.7231e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|countysub_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.004e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|cousub|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.7084e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|cousub_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.9965e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|direction_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000252383,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|edges|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.0001399,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|edges_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.2279e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|faces|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6544e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|faces_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.1807e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|featnames|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6309e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|featnames_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.6259e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|geocode_settings|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.4421e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000385173,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000265311,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000187761,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|geocode_settings_default|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.1923e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000119796,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.6728e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000121325,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|loader_lookuptables|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000258678,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000300805,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000137257,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000159664,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|loader_platform|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.014298174,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000173646,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.0952e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000126826,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|loader_variables|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.1466e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000118991,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00021468,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000164418,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|pagc_gaz|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000210389,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00040076,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000354646,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000138572,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|pagc_gaz_id_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.1107e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|pagc_lex|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.2984e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000161039,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000106121,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000105912,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|pagc_lex_id_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.7395e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|pagc_rules|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.0147e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000103269,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6948e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 4.9607e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|pagc_rules_id_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.7769e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|place|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.5749e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|place_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000122682,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|place_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000181401,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|secondary_unit_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00012018,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|state|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.2229e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|state_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.155e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|state_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6991e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|street_type_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000116458,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|tabblock|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.3512e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|tabblock_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.2062e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|tract|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.1982e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|tract_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.0652e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zcta5|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.0824e-05,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zcta5_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000482367,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zip_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000114867,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zip_lookup_all|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000913948,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zip_lookup_base|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000212197,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zip_state|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.002457321,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zip_state_loc|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000362815,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW max_connections; output.strip should be <= 100",
      "run_time": 0.000328597,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL query: SELECT rolname, rolconnlimit from pg_authid; output should not contain \"-1\"",
      "run_time": 0.001242759,
      "start_time": "2017-06-30 21:54:51 +0000",
      "message": "expected \"vcap|-1\\nhaproxy|-1\\nreplication|-1\\ncrunchy|-1\\njesse|-1\" not to contain \"-1\""
    },
    {
      "status": "failed",
      "code_desc": "Command /usr/bin/openssl version stdout.strip should include \"fips\"",
      "run_time": 0.093445598,
      "start_time": "2017-06-30 21:54:51 +0000",
      "message": "expected \"OpenSSL 1.0.1f 6 Jan 2014\" to include \"fips\""
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.002565997,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
      "run_time": 0.001270009,
      "start_time": "2017-06-30 21:54:51 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 0.000420641,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 1.7683e-05,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data should be owned by \"vcap\"",
      "run_time": 0.00031566,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data mode should cmp == \"0700\"",
      "run_time": 0.003721548,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /var/vcap/store/postgresql/data -type f ! -user vcap -or -perm -g=w -or -perm -o=w stdout should eq \"\"",
      "run_time": 0.043754813,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /var/vcap/store/postgresql/data -type f ! -user vcap -or -perm -g=w -or -perm -o=w stderr should eq \"\"",
      "run_time": 0.000346012,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/bin should be owned by \"root\"",
      "run_time": 0.035164297,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/bin mode should cmp == \"0755\"",
      "run_time": 0.000740978,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /usr/lib/postgresql/9.5/bin -type f ! -user root -or -perm -g=w -or -perm -o=w stdout should eq \"\"",
      "run_time": 0.051862572,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /usr/lib/postgresql/9.5/bin -type f ! -user root -or -perm -g=w -or -perm -o=w stderr should eq \"\"",
      "run_time": 0.000308799,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/lib should be owned by \"root\"",
      "run_time": 0.042230553,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/lib mode should cmp == \"0755\"",
      "run_time": 0.001868291,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /usr/lib/postgresql/9.5/lib -type f ! -user root -or -perm -g=w -or -perm -o=w stdout should eq \"\"",
      "run_time": 0.029079014,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /usr/lib/postgresql/9.5/lib -type f ! -user root -or -perm -g=w -or -perm -o=w stderr should eq \"\"",
      "run_time": 0.000357009,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/include/postgresql/9.5 should be owned by \"root\"",
      "run_time": 0.043295308,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/include/postgresql/9.5 mode should cmp == \"0755\"",
      "run_time": 0.000554887,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /usr/include/postgresql/9.5 -type f ! -user root -or -perm -g=w -or -perm -o=w stdout should eq \"\"",
      "run_time": 0.02480315,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /usr/include/postgresql/9.5 -type f ! -user root -or -perm -g=w -or -perm -o=w stderr should eq \"\"",
      "run_time": 0.000612031,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/share/postgresql/9.5 should be owned by \"root\"",
      "run_time": 0.04002891,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/share/postgresql/9.5 mode should cmp == \"0755\"",
      "run_time": 0.001621969,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /usr/share/postgresql/9.5 -type f ! -user root -or -perm -g=w -or -perm -o=w stdout should eq \"\"",
      "run_time": 0.035847287,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /usr/share/postgresql/9.5 -type f ! -user root -or -perm -g=w -or -perm -o=w stderr should eq \"\"",
      "run_time": 0.000410513,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%m\"",
      "run_time": 0.000847135,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%u\"",
      "run_time": 0.000344721,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%d\"",
      "run_time": 0.000382609,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%p\"",
      "run_time": 0.004496158,
      "start_time": "2017-06-30 21:54:52 +0000",
      "message": "expected \"< %m %a %u %d %c %s %r >\" to include \"%p\""
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%r\"",
      "run_time": 9.9646e-05,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%a\"",
      "run_time": 0.000134738,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
      "run_time": 0.002084305,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 0.000160124,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 0.000189373,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL query: SHOW log_destination; output should match /syslog/i",
      "run_time": 0.000670296,
      "start_time": "2017-06-30 21:54:52 +0000",
      "message": "expected \"stderr\" to match /syslog/i\nDiff:\n@@ -1,2 +1,2 @@\n-/syslog/i\n+\"stderr\"\n"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW syslog_facility; output should match /local[0-7]/i",
      "run_time": 0.000292907,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "failed",
      "code_desc": "File /proc/sys/crypto/fips_enabled content.strip ",
      "run_time": 0.000297855,
      "start_time": "2017-06-30 21:54:52 +0000",
      "message": "undefined method `strip' for nil:NilClass",
      "exception": "NoMethodError",
      "backtrace": [
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:115:in `block (3 levels) in its'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:114:in `each'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:114:in `inject'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:114:in `block (2 levels) in its'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:298:in `block (2 levels) in let'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:157:in `block (3 levels) in fetch_or_store'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:157:in `fetch'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:157:in `block (2 levels) in fetch_or_store'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-support-3.6.0/lib/rspec/support/reentrant_mutex.rb:23:in `synchronize'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:156:in `block in fetch_or_store'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:155:in `fetch'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:155:in `fetch_or_store'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:298:in `block in let'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:126:in `should'",
        "/var/vcap/packages/postgresql-baseline/controls/V-72989.rb:61:in `block (3 levels) in load_with_context'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:254:in `instance_exec'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:254:in `block in run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:500:in `block in with_around_and_singleton_context_hooks'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:457:in `block in with_around_example_hooks'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/hooks.rb:464:in `block in run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/hooks.rb:602:in `run_around_example_hooks_for'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/hooks.rb:464:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:457:in `with_around_example_hooks'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:500:in `with_around_and_singleton_context_hooks'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:251:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:627:in `block in run_examples'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:623:in `map'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:623:in `run_examples'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:589:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:590:in `block in run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:590:in `map'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:590:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:118:in `block (3 levels) in run_specs'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:118:in `map'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:118:in `block (2 levels) in run_specs'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/configuration.rb:1894:in `with_suite_hooks'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:113:in `block in run_specs'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/reporter.rb:79:in `report'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:112:in `run_specs'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/runner_rspec.rb:77:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/runner.rb:117:in `run_tests'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/runner.rb:101:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/base_cli.rb:83:in `run_tests'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/cli.rb:159:in `exec'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/command.rb:27:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/invocation.rb:126:in `invoke_command'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor.rb:359:in `dispatch'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/base.rb:440:in `start'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/bin/inspec:12:in `<top (required)>'",
        "/opt/inspec/bin/inspec:59:in `load'",
        "/opt/inspec/bin/inspec:59:in `<main>'"
      ]
    },
    {
      "status": "passed",
      "code_desc": "[\"jesse\", \"vcap\", \"crunchy\", \"replication\"] should include \"vcap\"",
      "run_time": 0.001846445,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "failed",
      "code_desc": "File /proc/sys/crypto/fips_enabled content.strip ",
      "run_time": 0.000457882,
      "start_time": "2017-06-30 21:54:52 +0000",
      "message": "undefined method `strip' for nil:NilClass",
      "exception": "NoMethodError",
      "backtrace": [
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:115:in `block (3 levels) in its'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:114:in `each'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:114:in `inject'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:114:in `block (2 levels) in its'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:298:in `block (2 levels) in let'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:157:in `block (3 levels) in fetch_or_store'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:157:in `fetch'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:157:in `block (2 levels) in fetch_or_store'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-support-3.6.0/lib/rspec/support/reentrant_mutex.rb:23:in `synchronize'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:156:in `block in fetch_or_store'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:155:in `fetch'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:155:in `fetch_or_store'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:298:in `block in let'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:126:in `should'",
        "/var/vcap/packages/postgresql-baseline/controls/V-72993.rb:72:in `block (3 levels) in load_with_context'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:254:in `instance_exec'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:254:in `block in run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:500:in `block in with_around_and_singleton_context_hooks'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:457:in `block in with_around_example_hooks'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/hooks.rb:464:in `block in run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/hooks.rb:602:in `run_around_example_hooks_for'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/hooks.rb:464:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:457:in `with_around_example_hooks'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:500:in `with_around_and_singleton_context_hooks'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:251:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:627:in `block in run_examples'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:623:in `map'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:623:in `run_examples'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:589:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:590:in `block in run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:590:in `map'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:590:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:118:in `block (3 levels) in run_specs'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:118:in `map'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:118:in `block (2 levels) in run_specs'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/configuration.rb:1894:in `with_suite_hooks'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:113:in `block in run_specs'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/reporter.rb:79:in `report'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:112:in `run_specs'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/runner_rspec.rb:77:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/runner.rb:117:in `run_tests'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/runner.rb:101:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/base_cli.rb:83:in `run_tests'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/cli.rb:159:in `exec'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/command.rb:27:in `run'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/invocation.rb:126:in `invoke_command'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor.rb:359:in `dispatch'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/base.rb:440:in `start'",
        "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/bin/inspec:12:in `<top (required)>'",
        "/opt/inspec/bin/inspec:59:in `load'",
        "/opt/inspec/bin/inspec:59:in `<main>'"
      ]
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SELECT name FROM pg_available_extensions where name='pgcrypto'; output should eq \"pgcrypto\"",
      "run_time": 0.000407628,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000439245,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
      "run_time": 0.00011812,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
      "run_time": 9.2322e-05,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 9.0281e-05,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 8.9362e-05,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ test/",
      "run_time": 0.004526974,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ GRANT\\ ALL\\ PRIVILEGES\\ ON\\ test\\ TO\\ bob;/",
      "run_time": 0.005719873,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/bin should be owned by \"root\"",
      "run_time": 0.000294481,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/bin should be grouped into \"root\"",
      "run_time": 0.000410406,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/bin mode should cmp == \"0755\"",
      "run_time": 0.000580975,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command lsof | awk '$9 ~ \"/usr/lib/postgresql/9.5/bin\" {print $1}' stdout should match /(^$|postgres|postmaster)/",
      "run_time": 0.177334028,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command lsof | awk '$9 ~ \"/usr/lib/postgresql/9.5/bin\" {print $1}' stderr should eq \"\"",
      "run_time": 0.000697236,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/lib should be owned by \"root\"",
      "run_time": 0.002449442,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/lib should be grouped into \"root\"",
      "run_time": 0.000638098,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/lib mode should cmp == \"0755\"",
      "run_time": 0.000530441,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command lsof | awk '$9 ~ \"/usr/lib/postgresql/9.5/lib\" {print $1}' stdout should match /(^$|postgres|postmaster)/",
      "run_time": 0.231351452,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command lsof | awk '$9 ~ \"/usr/lib/postgresql/9.5/lib\" {print $1}' stderr should eq \"\"",
      "run_time": 0.000398788,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/include/postgresql/9.5 should be owned by \"root\"",
      "run_time": 0.00031903,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/include/postgresql/9.5 should be grouped into \"root\"",
      "run_time": 0.000230892,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/include/postgresql/9.5 mode should cmp == \"0755\"",
      "run_time": 0.000188221,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command lsof | awk '$9 ~ \"/usr/include/postgresql/9.5\" {print $1}' stdout should match /(^$|postgres|postmaster)/",
      "run_time": 0.408688821,
      "start_time": "2017-06-30 21:54:52 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command lsof | awk '$9 ~ \"/usr/include/postgresql/9.5\" {print $1}' stderr should eq \"\"",
      "run_time": 0.000176479,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/share/postgresql/9.5 should be owned by \"root\"",
      "run_time": 0.000107204,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/share/postgresql/9.5 should be grouped into \"root\"",
      "run_time": 0.000661824,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/share/postgresql/9.5 mode should cmp == \"0755\"",
      "run_time": 0.005049475,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command lsof | awk '$9 ~ \"/usr/share/postgresql/9.5\" {print $1}' stdout should match /(^$|postgres|postmaster)/",
      "run_time": 0.431437553,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command lsof | awk '$9 ~ \"/usr/share/postgresql/9.5\" {print $1}' stderr should eq \"\"",
      "run_time": 0.000420968,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ schema\\ test_schema/",
      "run_time": 0.006950553,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*must\\ be\\ owner\\ of\\ schema\\ test_schema/",
      "run_time": 0.006689262,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ SELECT\\ \\*\\ FROM\\ test_schema\\.test_table;/",
      "run_time": 0.006359062,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ INSERT\\ INTO\\ test_schema\\.test_table\\ VALUES\\ \\(0\\);/",
      "run_time": 0.011102447,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ UPDATE\\ test_schema\\.test_table\\ SET\\ id\\ =\\ 1\\ WHERE\\ id\\ =\\ 0/",
      "run_time": 0.016785455,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ DROP\\ TABLE\\ test_schema\\.test_table;/",
      "run_time": 0.021501939,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ DROP\\ SCHEMA\\ test_schema;/",
      "run_time": 0.012782568,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Cannot login should not match /Superuser/",
      "run_time": 0.000320476,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Create role, Create DB, Cannot login should not match /Superuser/",
      "run_time": 0.001021165,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Replication should not match /Superuser/",
      "run_time": 0.001063878,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "{=c/vcap,vcap=CTc/vcap} should not match /\\{=[CTc]{2,}\\/\\w+/",
      "run_time": 0.000447459,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "{=c/vcap should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
      "run_time": 0.00110505,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=CTc/vcap} should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
      "run_time": 0.000359659,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.00026512,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.00045523,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "crunchy=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000422857,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000290145,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.00030307,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "failed",
      "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.001279723,
      "start_time": "2017-06-30 21:54:53 +0000",
      "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
    },
    {
      "status": "passed",
      "code_desc": "broker|crunchy|crunchy=UC/crunchy| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.00014068,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "crunchy=UC/crunchy should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 6.3152e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000253779,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.000365571,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "failed",
      "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 5.2e-08,
      "start_time": "2017-06-30 21:54:53 +0000",
      "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
    },
    {
      "status": "passed",
      "code_desc": "{vcap=CTc/vcap,crunchy=CTc/vcap} should not match /\\{=[CTc]{2,}\\/\\w+/",
      "run_time": 0.000177728,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "{vcap=CTc/vcap should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
      "run_time": 0.00053036,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "crunchy=CTc/vcap} should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
      "run_time": 0.000534664,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.00024879,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.000245116,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "failed",
      "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000636442,
      "start_time": "2017-06-30 21:54:53 +0000",
      "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
    },
    {
      "status": "passed",
      "code_desc": "{vcap=CTc/vcap,crunchy=c/vcap} should not match /\\{=[CTc]{2,}\\/\\w+/",
      "run_time": 0.000262846,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "{vcap=CTc/vcap should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
      "run_time": 0.000165154,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "crunchy=c/vcap} should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
      "run_time": 0.000146064,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000211691,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.000357021,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "failed",
      "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.001167641,
      "start_time": "2017-06-30 21:54:53 +0000",
      "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
    },
    {
      "status": "passed",
      "code_desc": "{jesse=CTc/jesse} should not match /\\{=[CTc]{2,}\\/\\w+/",
      "run_time": 0.000217811,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "{jesse=CTc/jesse} should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
      "run_time": 0.000616585,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000214692,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.000335556,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "failed",
      "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.001072563,
      "start_time": "2017-06-30 21:54:53 +0000",
      "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
    },
    {
      "status": "passed",
      "code_desc": "tiger|vcap|| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000219604,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger_data|vcap|| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000225012,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "topology|vcap|| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000193307,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%m\"",
      "run_time": 0.000286584,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%u\"",
      "run_time": 0.000491295,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%d\"",
      "run_time": 0.000191639,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%s\"",
      "run_time": 0.00033653,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000293619,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
      "run_time": 0.000186894,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
      "run_time": 0.000123691,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 0.000101538,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 9.1844e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ pg_authid/",
      "run_time": 0.007569484,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ SELECT\\ \\*\\ FROM\\ pg_authid;/",
      "run_time": 0.010122206,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 1.7346e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 1.0715e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000348784,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000258202,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000318032,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000203227,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.1838e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.001099629,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 3.8007e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000301884,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000227145,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000343983,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000203946,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000126429,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.1366e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 7.9558e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000276257,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000230502,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.6986e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000145236,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.3282e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.1963e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.0471e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000432851,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000119603,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000107846,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.7943e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000496215,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000352881,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000138013,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.0289e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000124006,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000100948,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 8.4824e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.5993e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 8.4682e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.8108e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000539662,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00025588,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000114243,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000168293,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000184937,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000875467,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000168081,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000189488,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000210198,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 1.9325e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000601946,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000182308,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000107287,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 4.2395e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000158578,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000907466,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000247668,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000143768,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000207954,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00017786,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000170541,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000131632,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000191828,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000179856,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.001100817,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000134407,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000101661,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.001218268,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.002083652,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00023632,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000173379,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000164795,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000247009,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000165002,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000160224,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000122277,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.001475011,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000237163,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000206506,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000208252,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000256265,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000234862,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000272476,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000197238,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000423027,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000400128,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000278577,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000211825,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000169648,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000213048,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000470241,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000204157,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.00067361,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00020482,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000325146,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000217574,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000122231,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6721e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.3024e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000111052,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.7676e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000202025,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000175199,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000322987,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000419598,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000174439,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000424992,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000209311,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000534743,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000233348,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000153523,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000147234,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000196559,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000494655,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000632902,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000167322,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000292511,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000137618,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000102798,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6824e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.1397e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000111086,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.00011363,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.132e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000134349,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.5401e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000100534,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.6907e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.0614e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000114909,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.5961e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.7677e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000106776,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000344051,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000169769,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.1312e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000270033,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000137716,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000133083,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000304653,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000416118,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000142513,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000107269,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00010603,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.3421e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.1709e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000120507,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.2395e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 8.984e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.2132e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000117899,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.5652e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.3695e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000194434,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000258625,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000114735,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000125114,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000227847,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000196211,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000136513,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000101123,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.3296e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000110131,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.9396e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000147248,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000123597,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000114045,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.4808e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.5065e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.8935e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.0094e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.7642e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000159676,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000154098,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 1.4472e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000306748,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000121231,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.2832e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 8.6108e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.6951e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 8.6405e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.8928e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000107986,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000659352,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000140852,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000105664,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 1.5762e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000157061,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000103631,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000174116,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000176927,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.1874e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.3938e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.0562e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000107505,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.5044e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 8.7004e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000100104,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000207409,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.9611e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.0804e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.5494e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000296288,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000133497,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000108403,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.2724e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000235497,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6977e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 8.8369e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000180896,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000117087,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.536e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000113534,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.8159e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000115434,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.4062e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.076e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.9588e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 4.0256e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000307852,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000288606,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000176505,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000106603,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 4e-09,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 4e-09,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 3e-09,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.00075642,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000306588,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000136237,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.1638e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.4967e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.9583e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 8.3925e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.6372e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000112209,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00034625,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000226758,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.2648e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000104853,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.3543e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 8.5394e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000189444,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000230223,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.5928e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000135996,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.8897e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 8.8512e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000107756,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000100166,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.1683e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 8.6082e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000182339,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000120879,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.5128e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000100056,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.6606e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.9064e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.7352e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000375082,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000207636,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000594255,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000256383,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000258345,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000266663,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000277572,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 1.3294e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000211433,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.7669e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.6958e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.5015e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000191549,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00059923,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000332984,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.001518576,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000297954,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000157859,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.001111855,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000157482,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000111493,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.001102552,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000365539,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.002055121,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000408879,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000155862,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000606417,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000746927,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.00157232,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000339991,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000231117,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.001187417,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000451036,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000732762,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.001226028,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.001006851,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000355642,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000634979,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000393804,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000309253,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000324141,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000225512,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000284847,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.5359e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.001217456,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000377215,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000178496,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.334e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 9.9201e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000132455,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000252876,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000360118,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000475148,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000258234,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000400605,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000178557,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000446258,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000363953,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000375521,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 2e-09,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000216574,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000552863,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000293591,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000369023,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000381798,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000559965,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000738031,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000299508,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000352745,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000244692,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000747443,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000272787,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.001123166,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000268805,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000694565,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00019467,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
      "run_time": 0.000174899,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should match /vcap|crunchy/",
      "run_time": 0.000924512,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "failed",
      "code_desc": "debian should eq \"redhat\"",
      "run_time": 0.00045543,
      "start_time": "2017-06-30 21:54:53 +0000",
      "message": "\nexpected: \"redhat\"\n     got: \"debian\"\n\n(compared using ==)\n"
    },
    {
      "status": "failed",
      "code_desc": "Kernel Parameter fips value should eq \"1\"",
      "run_time": 0.026712928,
      "start_time": "2017-06-30 21:54:53 +0000",
      "message": "\nexpected: \"1\"\n     got: nil\n\n(compared using ==)\n"
    },
    {
      "status": "skipped",
      "code_desc": "Parse Config File /etc/sysconfig/prelink",
      "skip_message": "Can't find file \"/etc/sysconfig/prelink\"",
      "resource": "Parse Config File /etc/sysconfig/prelink",
      "run_time": 5.2702e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "[\"jesse\", \"vcap\", \"crunchy\", \"replication\"] should include \"vcap\"",
      "run_time": 0.000217165,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 2.5013e-05,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "failed",
      "code_desc": "public|pg_stat_repl_json||t|vcap| should not match /\\|t\\|/",
      "run_time": 0.000830432,
      "start_time": "2017-06-30 21:54:53 +0000",
      "message": "expected \"public|pg_stat_repl_json||t|vcap|\" not to match /\\|t\\|/\nDiff:\n@@ -1,2 +1,2 @@\n-/\\|t\\|/\n+\"public|pg_stat_repl_json||t|vcap|\"\n"
    },
    {
      "status": "failed",
      "code_desc": "public|st_estimatedextent|25 25 25 16|t|vcap| should not match /\\|t\\|/",
      "run_time": 0.000548174,
      "start_time": "2017-06-30 21:54:53 +0000",
      "message": "expected \"public|st_estimatedextent|25 25 25 16|t|vcap|\" not to match /\\|t\\|/\nDiff:\n@@ -1,2 +1,2 @@\n-/\\|t\\|/\n+\"public|st_estimatedextent|25 25 25 16|t|vcap|\"\n"
    },
    {
      "status": "failed",
      "code_desc": "public|st_estimatedextent|25 25 25|t|vcap| should not match /\\|t\\|/",
      "run_time": 0.000389779,
      "start_time": "2017-06-30 21:54:53 +0000",
      "message": "expected \"public|st_estimatedextent|25 25 25|t|vcap|\" not to match /\\|t\\|/\nDiff:\n@@ -1,2 +1,2 @@\n-/\\|t\\|/\n+\"public|st_estimatedextent|25 25 25|t|vcap|\"\n"
    },
    {
      "status": "failed",
      "code_desc": "public|st_estimatedextent|25 25|t|vcap| should not match /\\|t\\|/",
      "run_time": 0.000466276,
      "start_time": "2017-06-30 21:54:53 +0000",
      "message": "expected \"public|st_estimatedextent|25 25|t|vcap|\" not to match /\\|t\\|/\nDiff:\n@@ -1,2 +1,2 @@\n-/\\|t\\|/\n+\"public|st_estimatedextent|25 25|t|vcap|\"\n"
    },
    {
      "status": "passed",
      "code_desc": "tiger|interpolate_from_address|23 1043 1043 16619 1043 701|f|vcap|{client_min_messages=ERROR} should not match /\\|t\\|/",
      "run_time": 0.000189229,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|geocode_address|18243 23 16619|f|vcap|{join_collapse_limit=2} should not match /\\|t\\|/",
      "run_time": 0.000226116,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|geocode_intersection|25 25 25 25 25 23|f|vcap|{join_collapse_limit=2} should not match /\\|t\\|/",
      "run_time": 0.000128392,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SELECT name FROM pg_available_extensions where name='pgcrypto' output should eq \"pgcrypto\"",
      "run_time": 0.000152612,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 8.327e-06,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.0001321,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,READ,SELECT(,.*){2},\"?SELECT\\ r\\.rolname,\\ r\\.rolsuper,\\ r\\.rolinherit,/",
      "run_time": 0.017967697,
      "start_time": "2017-06-30 21:54:53 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Can't read run query \"CREAT TABLEincorrect_syntax(id INT);\" on postgres_session: \nERROR:  syntax error at or near \"CREAT\"\nLINE 1: CREAT TABLEincorrect_syntax(id INT);\n        ^\n should match /ERROR:\\s*syntax\\ error\\ at\\ or\\ near\\ \"CREAT\"/",
      "run_time": 0.000172368,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*syntax\\ error\\ at\\ or\\ near\\ \"CREAT\"/",
      "run_time": 0.007679526,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*CREAT\\ TABLEincorrect_syntax\\(id\\ INT\\);/",
      "run_time": 0.006279527,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 9.513e-06,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000202818,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
      "run_time": 0.000124105,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
      "run_time": 2.3428e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 0.000175701,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 0.000117583,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%m\"",
      "run_time": 0.00013174,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%u\"",
      "run_time": 0.000117461,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%d\"",
      "run_time": 0.00010839,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%p\"",
      "run_time": 0.000224111,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "expected \"< %m %a %u %d %c %s %r >\" to include \"%p\""
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%r\"",
      "run_time": 0.000123878,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%a\"",
      "run_time": 9.9947e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000152128,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql should be owned by \"vcap\"",
      "run_time": 0.011149582,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql should be grouped into \"vcap\"",
      "run_time": 0.000227752,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data should be owned by \"vcap\"",
      "run_time": 0.000361635,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data should be grouped into \"vcap\"",
      "run_time": 0.000178473,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find /usr/lib/postgresql/9.5/bin /usr/lib/postgresql/9.5/lib /usr/include/postgresql/9.5 /usr/share/postgresql/9.5 -type f -iname '*pgaudit*' ! -user root stdout should eq \"\"",
      "run_time": 0.025337273,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find /usr/lib/postgresql/9.5/bin /usr/lib/postgresql/9.5/lib /usr/include/postgresql/9.5 /usr/share/postgresql/9.5 -type f -iname '*pgaudit*' ! -user root stderr should eq \"\"",
      "run_time": 0.000241666,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Cannot login should not match /Superuser/",
      "run_time": 0.000170783,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Create role, Create DB, Cannot login should not match /Superuser/",
      "run_time": 0.000104877,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Replication should not match /Superuser/",
      "run_time": 9.5948e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL query: SHOW ssl_crl_file; output should match /\\w*\\.crl/",
      "run_time": 0.000754905,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "expected \"\" to match /\\w*\\.crl/\nDiff:\n@@ -1,2 +1,2 @@\n-/\\w*\\.crl/\n+\"\"\n"
    },
    {
      "status": "failed",
      "code_desc": "File  should be file",
      "run_time": 0.00065765,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "expected `File .file?` to return true, got false"
    },
    {
      "status": "passed",
      "code_desc": "Command awk '$1 == \"hostssl\" {print}' /var/vcap/store/postgresql/data/pg_hba.conf stdout should match /(cert[\\s\\w]+clientcert=1|^$)/",
      "run_time": 0.02175633,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command awk '$1 == \"hostssl\" {print}' /var/vcap/store/postgresql/data/pg_hba.conf stderr should eq \"\"",
      "run_time": 0.000227952,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000339732,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
      "run_time": 0.000584442,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
      "run_time": 0.000362717,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 0.001964363,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 0.001341668,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "0600 should eq \"0600\"",
      "run_time": 0.000608286,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql should be owned by \"vcap\"",
      "run_time": 0.002616256,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "File /var/vcap/sys/log/postgresql mode should cmp == \"0700\"",
      "run_time": 0.002217199,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "\nexpected: \"0700\"\n     got: \"0750\"\n\n(compared using `cmp` matcher)\n"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user vcap stdout should eq \"\"",
      "run_time": 0.067889455,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user vcap stderr should eq \"\"",
      "run_time": 0.00019236,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL query: SHOW ssl; output should not match /(off|false)/i",
      "run_time": 0.000347897,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "expected \"off\" not to match /(off|false)/i\nDiff:\n@@ -1,2 +1,2 @@\n-/(off|false)/i\n+\"off\"\n"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should eq \"< %m %a %u %d %c %s %r >\"",
      "run_time": 0.00170503,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_connections; output should not eq \"off\"",
      "run_time": 0.000564228,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_disconnections; output should not eq \"off\"",
      "run_time": 0.000834864,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_connections; output should eq \"on\"",
      "run_time": 0.00114578,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /2017\\-06\\-30\\ 21:54.*LOG:\\s*connection authorized:\\s*user=crunchy\\s*database=stig_test_db/",
      "run_time": 0.027183221,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Can't read run query \"CREATE ROLE bob; SET ROLE bob; CREATE TABLE stig_test_schema.test_table(id INT);\" on postgres_session: \nERROR:  permission denied for schema stig_test_schema\nLINE 1: CREATE ROLE bob; SET ROLE bob; CREATE TABLE stig_test_schema...\n                                                    ^\n should match /ERROR:\\s*permission\\ denied\\ for\\ schema\\ stig_test_schema/",
      "run_time": 0.000594728,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ schema\\ stig_test_schema/",
      "run_time": 0.009844468,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*CREATE\\ ROLE\\ bob;\\ SET\\ ROLE\\ bob;\\ CREATE\\ TABLE\\ stig_test_schema\\.test_table\\(id\\ INT\\);/",
      "run_time": 0.006944362,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL Configuration log_file_mode should eq \"0600\"",
      "run_time": 0.00073568,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql should be owned by \"vcap\"",
      "run_time": 0.000191484,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "File /var/vcap/sys/log/postgresql mode should cmp == \"0700\"",
      "run_time": 0.000874748,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "\nexpected: \"0700\"\n     got: \"0750\"\n\n(compared using `cmp` matcher)\n"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user vcap stdout should eq \"\"",
      "run_time": 0.027761169,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user vcap stderr should eq \"\"",
      "run_time": 0.00040226,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SELECT name FROM pg_available_extensions where name='pgcrypto'; output should eq \"pgcrypto\"",
      "run_time": 0.000417187,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "0600 should eq \"0600\"",
      "run_time": 0.000120503,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 stdout should eq \"\"",
      "run_time": 0.019576467,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 stderr should eq \"\"",
      "run_time": 0.000283611,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /FATAL:.*(user|role).*joe/",
      "run_time": 0.011956886,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Cannot login should not match /Superuser/",
      "run_time": 0.000310425,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Create role, Create DB, Cannot login should not match /Superuser/",
      "run_time": 0.001310808,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Replication should not match /Superuser/",
      "run_time": 0.001099229,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pgcrypto should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000132993,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "plpgsql should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000370619,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "plpgsql should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000554677,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "plpgsql should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000373867,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "plpgsql should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000409285,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "plpgsql should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.001274723,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "fuzzystrmatch should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000281378,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "postgis_tiger_geocoder should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000163351,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pgcrypto should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000153571,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "plpgsql should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.00031725,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pgaudit should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000522713,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "hstore should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000279788,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "postgis_topology should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.00043026,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "postgis should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.003124739,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 1.949e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 1.5568e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command sed -e '/^#/d' -e '/^$/d' /var/vcap/store/postgresql/data/pg_hba.conf | awk '$NF == \"password\" {print $NF}' stdout should eq \"\"",
      "run_time": 0.044473037,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command sed -e '/^#/d' -e '/^$/d' /var/vcap/store/postgresql/data/pg_hba.conf | awk '$NF == \"password\" {print $NF}' stderr should eq \"\"",
      "run_time": 0.000320182,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_connections; output should not eq \"off\"",
      "run_time": 0.000281432,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_disconnections; output should not eq \"off\"",
      "run_time": 0.000640405,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%m\"",
      "run_time": 0.000583116,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%u\"",
      "run_time": 0.000991011,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%d\"",
      "run_time": 0.00037957,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%c\"",
      "run_time": 0.00019002,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000137757,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_connections; output should eq \"on\"",
      "run_time": 0.000208066,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_disconnections; output should eq \"on\"",
      "run_time": 0.000165819,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL query: SHOW ssl_ca_file; output should not eq \"\"",
      "run_time": 0.000345851,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "\nexpected: value != \"\"\n     got: \"\"\n\n(compared using ==)\n"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW ssl_cert_file; output should not eq \"\"",
      "run_time": 0.000219424,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 8.916e-06,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Can't read run query \"SET ROLE bob; UPDATE pg_authid SET rolsuper = 't' WHERE rolname = 'bob';\" on postgres_session: \nERROR:  permission denied for relation pg_authid\n should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ pg_authid/",
      "run_time": 0.000381296,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ pg_authid/",
      "run_time": 0.006077359,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ UPDATE\\ pg_authid\\ SET\\ rolsuper\\ =\\ 't'\\ WHERE\\ rolname\\ =\\ 'bob';/",
      "run_time": 0.00903818,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pgcrypto should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000356682,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "hstore should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.00017686,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pgcrypto should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000338299,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "postgis should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000724431,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "postgis_topology should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.001020429,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "fuzzystrmatch should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000468996,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "postgis_tiger_geocoder should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.001114225,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "pgaudit should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
      "run_time": 0.000735887,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 2.3663e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.00035649,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000209311,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000456729,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000142422,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000122195,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000106215,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 9.3195e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000286524,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000129178,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000115116,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000230168,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000131841,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 7.3239e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000104511,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.00032504,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000154587,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000212966,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000272845,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000132271,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000946292,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000141566,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 8.1236e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 7.364e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 6.947e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000294886,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000200347,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000186385,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 9.5917e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000144193,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 7.0673e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000146219,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 6.9087e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.000229268,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 0.00017801,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 8.2989e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should eq \"vcap\"",
      "run_time": 8.4417e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data should be owned by \"vcap\"",
      "run_time": 0.000138143,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data mode should cmp == \"0700\"",
      "run_time": 0.000475116,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /var/vcap/store/postgresql/data -type f ! -user vcap -or -perm -g=w -or -perm -o=w stdout should eq \"\"",
      "run_time": 0.025726387,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /var/vcap/store/postgresql/data -type f ! -user vcap -or -perm -g=w -or -perm -o=w stderr should eq \"\"",
      "run_time": 0.00023663,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "[\"plpgsql\"] should include \"plpgsql\"",
      "run_time": 0.000371709,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "[\"plpgsql\"] should include \"plpgsql\"",
      "run_time": 0.00013661,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "[\"plpgsql\"] should include \"plpgsql\"",
      "run_time": 0.000107317,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "[\"plpgsql\"] should include \"plpgsql\"",
      "run_time": 0.000188174,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "[\"plpgsql\"] should include \"plpgsql\"",
      "run_time": 0.000864921,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "[\"plpgsql\"] should include \"plpgsql\"",
      "run_time": 0.000161483,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000157368,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
      "run_time": 0.000130873,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
      "run_time": 0.000264091,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 0.001469916,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 0.000294808,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000289341,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_connections; output should not eq \"off\"",
      "run_time": 0.000302357,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_disconnections; output should not eq \"off\"",
      "run_time": 0.000263835,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
      "run_time": 0.000149985,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
      "run_time": 0.000110614,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 0.000111274,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 8.841e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|pg_stat_repl_json|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00018401,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000140832,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "replication=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000393069,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "replication=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000319095,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|geography_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000786669,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00034614,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.9583e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000420146,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|geometry_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000162172,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000192667,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 2e-09,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000627612,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|raster_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00028682,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000772926,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000273603,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000325988,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|raster_overviews|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000794189,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000640179,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000294965,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000163478,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|spatial_ref_sys|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6.8275e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000189907,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.1488e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.0002259,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|addr|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000392453,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|addr_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000111829,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|addrfeat|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000120501,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|addrfeat_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000161889,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|bg|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000793462,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|bg_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000136233,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|county|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000134519,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|county_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000137346,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|county_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000132171,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|countysub_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 5.7887e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|cousub|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000843064,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|cousub_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000119216,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|direction_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000126031,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|edges|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000126746,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|edges_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.2766e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|faces|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000124826,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|faces_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00011278,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|featnames|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.7981e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|featnames_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 7.0099e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|geocode_settings|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000444529,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000177851,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.3838e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000249643,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|geocode_settings_default|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.5079e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 6.8155e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 8.3743e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 1e-09,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|loader_lookuptables|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 6e-09,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000144502,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000237327,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000480073,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|loader_platform|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000199247,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000182111,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.001174531,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000263706,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|loader_variables|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000382146,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000254275,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000174253,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.001484188,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|pagc_gaz|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 9.9326e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000790227,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00013838,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00134346,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|pagc_gaz_id_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000480905,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|pagc_lex|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000319735,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.00050972,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000391668,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000347645,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|pagc_lex_id_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00022264,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|pagc_rules|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 5.7611e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000118989,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000153774,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
      "run_time": 0.000240588,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|pagc_rules_id_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.001113077,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|place|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00091484,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|place_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000384416,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|place_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000423594,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|secondary_unit_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000580158,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|state|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000429654,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|state_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000414307,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|state_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000395707,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|street_type_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000262772,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|tabblock|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00036675,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|tabblock_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.001497301,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|tract|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000315227,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|tract_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000283814,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zcta5|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000299286,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zcta5_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000369741,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zip_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.00044292,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zip_lookup_all|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000185994,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zip_lookup_base|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 3.0567e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zip_state|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000350454,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger|zip_state_loc|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
      "run_time": 0.000218513,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000551261,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.000304016,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "crunchy=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000157382,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 3e-09,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.002006817,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.001216577,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
    },
    {
      "status": "passed",
      "code_desc": "broker|crunchy|crunchy=UC/crunchy| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000598197,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "crunchy=UC/crunchy should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.000218016,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000115974,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.000769917,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.001684661,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
    },
    {
      "status": "passed",
      "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.00054714,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.001466223,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.002384073,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
    },
    {
      "status": "passed",
      "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000298077,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.000343269,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.001296528,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
    },
    {
      "status": "passed",
      "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000172785,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
      "run_time": 0.000121048,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000509975,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
    },
    {
      "status": "passed",
      "code_desc": "tiger|vcap|| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000177218,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "tiger_data|vcap|| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 2.4858e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "topology|vcap|| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
      "run_time": 0.000191034,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL query: SHOW ssl; output should match /(on|true)/i",
      "run_time": 0.000193299,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "expected \"off\" to match /(on|true)/i\nDiff:\n@@ -1,2 +1,2 @@\n-/(on|true)/i\n+\"off\"\n"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SELECT current_setting('client_min_messages'); output should not match /(log|debug)/i",
      "run_time": 0.000962596,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL Configuration client_min_messages should not match /(log|debug)/i",
      "run_time": 0.000224776,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "0600 should eq \"0600\"",
      "run_time": 2e-09,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql should be owned by \"vcap\"",
      "run_time": 0.0012554,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "File /var/vcap/sys/log/postgresql mode should cmp == \"0700\"",
      "run_time": 0.001843378,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "\nexpected: \"0700\"\n     got: \"0750\"\n\n(compared using `cmp` matcher)\n"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user vcap stdout should eq \"\"",
      "run_time": 0.027452698,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user vcap stderr should eq \"\"",
      "run_time": 0.000174489,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000152279,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
      "run_time": 2.1795e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
      "run_time": 0.000184996,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 0.000289612,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 0.000265892,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Cannot login should not match /(Superuser|Create DB|Create Role)/",
      "run_time": 0.001252014,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "Create role, Create DB, Cannot login should not match /(Superuser|Create DB|Create Role)/",
      "run_time": 0.000672013,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "expected \"Create role, Create DB, Cannot login\" not to match /(Superuser|Create DB|Create Role)/\nDiff:\n@@ -1,2 +1,2 @@\n-/(Superuser|Create DB|Create Role)/\n+\"Create role, Create DB, Cannot login\"\n"
    },
    {
      "status": "passed",
      "code_desc": "Replication should not match /(Superuser|Create DB|Create Role)/",
      "run_time": 0.001558727,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW port; output should eq \"5432\"",
      "run_time": 0.00073282,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ test/",
      "run_time": 0.009374719,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ GRANT\\ ALL\\ PRIVILEGES\\ ON\\ test\\ TO\\ bob;/",
      "run_time": 0.006119986,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ REVOKE\\ ALL\\ PRIVILEGES\\ ON\\ test\\ FROM\\ bob;/",
      "run_time": 0.007901306,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: GRANT CONNECT ON DATABASE stig_test_db TO bob; output should eq \"GRANT\"",
      "run_time": 0.000354408,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: REVOKE CONNECT ON DATABASE stig_test_db FROM bob; output should eq \"REVOKE\"",
      "run_time": 0.000314824,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,ROLE,GRANT(,.*){2},GRANT\\ CONNECT\\ ON\\ DATABASE\\ stig_test_db\\ TO\\ bob;/",
      "run_time": 0.011720777,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,ROLE,REVOKE(,.*){2},REVOKE\\ CONNECT\\ ON\\ DATABASE\\ stig_test_db\\ FROM\\ bob;/",
      "run_time": 0.012229833,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*must\\ be\\ superuser\\ to\\ create\\ superusers/",
      "run_time": 0.010685342,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ to\\ create\\ role/",
      "run_time": 0.009220162,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ CREATE\\ ROLE\\ stig_test\\ SUPERUSER;/",
      "run_time": 0.011013113,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ CREATE\\ ROLE\\ stig_test\\ CREATEDB;/",
      "run_time": 0.008510265,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ CREATE\\ ROLE\\ stig_test\\ CREATEROLE;/",
      "run_time": 0.011000749,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ CREATE\\ ROLE\\ stig_test\\ CREATEUSER;/",
      "run_time": 0.017187974,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data should be owned by \"vcap\"",
      "run_time": 0.000380804,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data mode should cmp == \"0700\"",
      "run_time": 0.001422331,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Cannot login should not match /Superuser/",
      "run_time": 0.001043965,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Create role, Create DB, Cannot login should not match /Superuser/",
      "run_time": 0.005996353,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Replication should not match /Superuser/",
      "run_time": 0.002697921,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.005860004,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
      "run_time": 0.000523723,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
      "run_time": 0.00033817,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 0.001102695,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 0.000461001,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 2.4001e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 1.0005e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 1.0532e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 1.1928e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_timezone; output should eq \"UTC\"",
      "run_time": 0.00047154,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data/postgresql.conf mode should cmp == \"0600\"",
      "run_time": 0.029095291,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_file_mode; output should cmp == \"0600\"",
      "run_time": 0.000726705,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 1.3568e-05,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "crunchy should match /jesse|vcap|crunchy|haproxy|replication/",
      "run_time": 0.000207745,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "haproxy should match /jesse|vcap|crunchy|haproxy|replication/",
      "run_time": 0.001784671,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "jesse should match /jesse|vcap|crunchy|haproxy|replication/",
      "run_time": 0.000267994,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "replication should match /jesse|vcap|crunchy|haproxy|replication/",
      "run_time": 0.000268947,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "vcap should match /jesse|vcap|crunchy|haproxy|replication/",
      "run_time": 0.000224711,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW password_encryption; output should match /(on|true)/i",
      "run_time": 0.000327394,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "md50a147b58cf9757316218b03964d72257 should match /^md5[0-9a-f]*/",
      "run_time": 0.000321547,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "md589ff7210e68d379d5d5e3e03984713df should match /^md5[0-9a-f]*/",
      "run_time": 0.000128472,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL query: SHOW ssl; output should match /(on|true)/i",
      "run_time": 0.000398963,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "expected \"off\" to match /(on|true)/i\nDiff:\n@@ -1,2 +1,2 @@\n-/(on|true)/i\n+\"off\"\n"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000247463,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ to\\ set\\ parameter\\ \"pgaudit\\.role\"/",
      "run_time": 0.007161972,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ SET\\ pgaudit\\.role='test';/",
      "run_time": 0.005237801,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data/postgresql.conf owner should eq \"vcap\"",
      "run_time": 0.000535654,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data/postgresql.conf mode should cmp == \"0600\"",
      "run_time": 0.000586517,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000235867,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 0.000283037,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data should be owned by \"vcap\"",
      "run_time": 0.000376221,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/store/postgresql/data should be grouped into \"vcap\"",
      "run_time": 0.000173953,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find /var/vcap/store/postgresql/data -type f ! -perm 600 -or ! -user vcap -or ! -group vcap stdout should eq \"\"",
      "run_time": 0.032534286,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find /var/vcap/store/postgresql/data -type f ! -perm 600 -or ! -user vcap -or ! -group vcap stderr should eq \"\"",
      "run_time": 0.000298323,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find /var/vcap/store/postgresql/data -type d ! -perm 700 -or ! -user vcap -or ! -group vcap stdout should eq \"\"",
      "run_time": 0.06583293,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "Command find /var/vcap/store/postgresql/data -type d ! -perm 700 -or ! -user vcap -or ! -group vcap stderr should eq \"\"",
      "run_time": 0.000752976,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/bin should be owned by \"root\"",
      "run_time": 0.000428318,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/bin should be grouped into \"root\"",
      "run_time": 0.000531481,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/lib should be owned by \"root\"",
      "run_time": 0.00165403,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/lib/postgresql/9.5/lib should be grouped into \"root\"",
      "run_time": 0.000494194,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/include/postgresql/9.5 should be owned by \"root\"",
      "run_time": 0.000393381,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/include/postgresql/9.5 should be grouped into \"root\"",
      "run_time": 0.000464743,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/share/postgresql/9.5 should be owned by \"root\"",
      "run_time": 0.001591235,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /usr/share/postgresql/9.5 should be grouped into \"root\"",
      "run_time": 0.000674595,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW tcp_keepalives_idle; output should not cmp == 0",
      "run_time": 0.000331112,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW tcp_keepalives_interval; output should not cmp == 0",
      "run_time": 0.001794739,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW tcp_keepalives_count; output should not cmp == 0",
      "run_time": 0.001486094,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "failed",
      "code_desc": "PostgreSQL query: SHOW statement_timeout; output should not cmp == 0",
      "run_time": 0.001130932,
      "start_time": "2017-06-30 21:54:54 +0000",
      "message": "\nexpected it not to be == 0\n     got: 0\n\n(compared using `cmp` matcher)\n"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%m\"",
      "run_time": 0.000353032,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3} [A-Z]{3}/",
      "run_time": 0.01065953,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,DROP POLICY(,.*){2},DROP\\ POLICY\\ lock_table\\ ON\\ stig_test;/",
      "run_time": 0.021814184,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,ALTER TABLE(,.*){2},ALTER\\ TABLE\\ stig_test\\ DISABLE\\ ROW\\ LEVEL\\ SECURITY;/",
      "run_time": 0.029604004,
      "start_time": "2017-06-30 21:54:54 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
      "run_time": 0.000451394,
      "start_time": "2017-06-30 21:54:55 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
      "run_time": 0.000382867,
      "start_time": "2017-06-30 21:54:55 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
      "run_time": 0.003050756,
      "start_time": "2017-06-30 21:54:55 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 0.000359998,
      "start_time": "2017-06-30 21:54:55 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 0.000239293,
      "start_time": "2017-06-30 21:54:55 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /2017\\-06\\-30\\ 21:54.*LOG:\\s*connection authorized:\\s*user=crunchy\\s*database=stig_test_db/",
      "run_time": 0.02616534,
      "start_time": "2017-06-30 21:54:55 +0000"
    },
    {
      "status": "passed",
      "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /2017\\-06\\-30\\ 21:54.*LOG:\\s*disconnection: session time:.*user=crunchy\\s*database=stig_test_db\\s*host=localhost/",
      "run_time": 0.02404966,
      "start_time": "2017-06-30 21:54:55 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
      "run_time": 0.000278152,
      "start_time": "2017-06-30 21:54:55 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
      "run_time": 0.000268981,
      "start_time": "2017-06-30 21:54:55 +0000"
    },
    {
      "status": "passed",
      "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
      "run_time": 0.000281382,
      "start_time": "2017-06-30 21:54:55 +0000"
    },
    {
      "status": "skipped",
      "code_desc": "Operating System Detection",
      "skip_message": "Skipped control due to only_if condition.",
      "resource": "Operating System Detection",
      "run_time": 2.031e-05,
      "start_time": "2017-06-30 21:54:55 +0000"
    }
  ],
  "other_checks": [],
  "profiles": [
    {
      "name": "sponsor-inspec-overlay",
      "title": "InSpec Profile",
      "maintainer": "The Authors",
      "copyright": "The Authors",
      "copyright_email": "you@example.com",
      "license": "Apache-2.0",
      "summary": "An InSpec Compliance Profile",
      "version": "0.1.0",
      "depends": [
        {
          "name": "postgres-baseline",
          "path": "../postgresql-baseline"
        }
      ],
      "supports": [],
      "controls": [
        {
          "title": "PostgreSQL must produce audit records containing sufficient information to\nestablish the sources (origins) of the events.",
          "desc": "Information system auditing capability is critical for accurate forensic\nanalysis. Without establishing the source of the event, it is impossible to\nestablish, correlate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment and provide forensic analysis, it is\nessential for security personnel to know where events occurred, such as application\ncomponents, modules, session identifiers, filenames, host names, and functionality.\n\nIn addition to logging where events occur within the application, the application\nmust also produce audit records that identify the application itself as the source\nof the event.\n\nAssociating information about the source of the event within the application\nprovides a means of investigating an attack; recognizing resource utilization or\ncapacity thresholds; or identifying an improperly configured application.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000098-DB-000042",
            "gid": "V-73005",
            "rid": "SV-87657r1_rule",
            "stig_id": "PGS9-00-008800",
            "cci": "CCI-000133",
            "nist": [
              "AU-3",
              "Rev_4"
            ],
            "check": "Check PostgreSQL settings and existing audit records to verify\ninformation specific to the source (origin) of the event is being captured and\nstored with audit records.\n\nAs the database administrator (usually postgres, check the current log_line_prefix\nand \"log_hostname\" setting by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_line_prefix\"\n$ psql -c \"SHOW log_hostname\"\n\nFor a complete list of extra information that can be added to log_line_prefix, see\nthe official documentation:\nhttps://www.postgresql.org/docs/current/static/runtime-config-logging.html#GUC-LOG-LI\nNE-PREFIX\n\nIf the current settings do not provide enough information regarding the source of\nthe event, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nIf logging is enabled the following configurations can be made to log the source of\nan event.\n\nFirst, as the database administrator, edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\n###### Log Line Prefix\n\nExtra parameters can be added to the setting log_line_prefix to log source of event:\n\n# %a = application name\n# %u = user name\n# %d = database name\n# %r = remote host and port\n# %p = process ID\n# %m = timestamp with milliseconds\n\nFor example:\nlog_line_prefix = '< %m %a %u %d %r %p %m >'\n\n###### Log Hostname\n\nBy default only IP address is logged. To also log the hostname the following\nparameter can also be set in postgresql.conf:\n\nlog_hostname = on\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73005.rb",
            "line": 51
          },
          "id": "V-73005"
        },
        {
          "title": "PostgreSQL must produce audit records containing time stamps to establish\nwhen the events occurred.",
          "desc": "Information system auditing capability is critical for accurate forensic\nanalysis. Without establishing when events occurred, it is impossible to establish,\ncorrelate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment and provide forensic analysis, it is\nessential for security personnel to know the date and time when events occurred.\n\nAssociating the date and time with detected events in the application and audit logs\nprovides a means of investigating an attack; recognizing resource utilization or\ncapacity thresholds; or identifying an improperly configured application.\n\nDatabase software is capable of a range of actions on data stored within the\ndatabase. It is important, for accurate forensic analysis, to know exactly when\nspecific actions were performed. This requires the date and time an audit record is\nreferring to. If date and time information is not recorded and stored with the audit\nrecord, the record itself is of very limited use.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000096-DB-000040",
            "gid": "V-73041",
            "rid": "SV-87693r1_rule",
            "stig_id": "PGS9-00-011100",
            "cci": "CCI-000131",
            "nist": [
              "AU-3",
              "Rev_4"
            ],
            "check": "As the database administrator (usually postgres, run the following\nSQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_line_prefix\"\n\nIf the query result does not contain \"%m\", this is a finding.",
            "fix": "Logging must be enabled in order to capture timestamps. To ensure that\nlogging is enabled, review supplementary content APPENDIX-C for instructions on\nenabling logging.\n\nIf logging is enabled the following configurations must be made to log events with\ntimestamps:\n\nFirst, as the database administrator (shown here as \"postgres\"), edit\npostgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd %m to log_line_prefix to enable timestamps with milliseconds:\n\nlog_line_prefix = '< %m >'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73041.rb",
            "line": 45
          },
          "id": "V-73041"
        },
        {
          "title": "PostgreSQL must provide non-privileged users with error messages that\n        provide information necessary for corrective actions without revealing\n        information that could be exploited by adversaries.",
          "desc": "Any PostgreSQL or associated application providing too much information\n        in error messages on the screen or printout risks compromising the data\n        and security of the system. The structure and content of error messages\n        need to be carefully considered by the organization and development team.\n\n        Databases can inadvertently provide a wealth of information to an\n        attacker through improperly handled error messages. In addition to\n        sensitive business or personal information, database errors can provide\n        host names, IP addresses, user names, and other system information not\n        required for troubleshooting but very useful to someone targeting the\n        system.\n\n        Carefully consider the structure/content of error messages. The extent\n        to which information systems are able to identify and handle error\n        conditions is guided by organizational policy and operational\n        requirements. Information that could be exploited by adversaries\n        includes, for example, logon attempts with passwords entered by mistake\n        as the username, mission/business information that can be derived from\n        (if not stated explicitly by) information recorded, and personal\n        information, such as account numbers, social security numbers, and\n        credit card numbers.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000266-DB-000162",
            "gid": "V-72851",
            "rid": "SV-87503r1_rule",
            "stig_id": "PGS9-00-000600",
            "cci": "CCI-001312",
            "nist": [
              "SI-11 a",
              "Rev_4"
            ],
            "check": "As the database administrator, run the following SQL:\n\n  SELECT current_setting('client_min_messages');\n\n  If client_min_messages is *not* set to error, this is a finding.",
            "fix": "As the database administrator, edit postgresql.conf:\n\n  $ sudo su - postgres\n  $ vi $PGDATA/postgresql.conf\n  Change the client_min_messages parameter to be error:\n  client_min_messages = 'error'\n\n  Now reload the server with the new configuration (this just reloads settings\n  currently in memory, will not cause an interruption):\n\n  $ sudo su - postgres\n  # SYSTEMD SERVER ONLY\n  $ systemctl reload postgresql-9.5\n\n  # INITD SERVER ONLY\n  $ service postgresql-9.5 reload "
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72851.rb",
            "line": 63
          },
          "id": "V-72851"
        },
        {
          "title": "When updates are applied to PostgreSQL software, any software\n  components that have been replaced or made unnecessary must be removed.",
          "desc": "Once released as BOSH package software libraries can not be changed.\n        Any changes to the software libriaries can ONLY be done by creating and\n        deploying a new BOSH release. This is Software-Defined-Infrustructure and\n        any unused versions of the software are automaticaly deleted",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000454-DB-000389",
            "gid": "V-72917",
            "rid": "SV-87569r1_rule",
            "stig_id": "PGS9-00-004300",
            "cci": "CCI-002617",
            "nist": [
              "SI-2 (6)",
              "Rev_4"
            ],
            "check": "To check software installed by packages, as the system\n  administrator, run the following command:\n  # RHEL/CENT Systems\n  $ sudo rpm -qa | grep postgres\n  If multiple versions of postgres are installed but are unused, this is a\n  finding.",
            "fix": "Use package managers (RPM or apt-get) for installing PostgreSQL.\n  Unused software is removed when updated."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72917.rb",
            "line": 23
          },
          "id": "V-72917"
        },
        {
          "title": "PostgreSQL must enforce authorized access to all PKI private keys\nstored/utilized by PostgreSQL.",
          "desc": "The DoD standard for authentication is DoD-approved PKI certificates. PKI\ncertificate-based authentication is performed by requiring the certificate holder to\ncryptographically prove possession of the corresponding private key.\n\nIf the private key is stolen, an attacker can use the private key(s) to impersonate\nthe certificate holder. In cases where PostgreSQL-stored private keys are used to\nauthenticate PostgreSQL to the system’s clients, loss of the corresponding private\nkeys would allow an attacker to successfully perform undetected man-in-the-middle\nattacks against PostgreSQL system and its clients.\n\nBoth the holder of a digital certificate and the issuing authority must take careful\nmeasures to protect the corresponding private key. Private keys should always be\ngenerated and protected in FIPS 140-2 validated cryptographic modules.\n\nAll access to the private key(s) of PostgreSQL must be restricted to authorized and\nauthenticated users. If unauthorized users have access to one or more of\nPostgreSQL's private keys, an attacker could gain access to the key(s) and use them\nto impersonate the database on the network or otherwise perform unauthorized\nactions.",
          "impact": 0.7,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000176-DB-000068",
            "gid": "V-73029",
            "rid": "SV-87681r1_rule",
            "stig_id": "PGS9-00-010200",
            "cci": "CCI-000186",
            "nist": [
              "IA-5 (2) (b)",
              "Rev_4"
            ],
            "check": "First, as the database administrator (shown here as \"postgres\"),\nverify the following settings:\n\nNote: If no specific directory given before the filename, the files are stored in\nPGDATA.\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl_ca_file\"\n$ psql -c \"SHOW ssl_cert_file\"\n$ psql -c \"SHOW ssl_crl_file\"\n$ psql -c \"SHOW ssl_key_file\"\n\nIf the directory these files are stored in is not protected, this is a finding.",
            "fix": "Store all PostgreSQL PKI private keys in a FIPS 140-2 validated\ncryptographic module. Ensure access to PostgreSQL PKI private keys is restricted to\nonly authenticated and authorized users.\n\nPostgreSQL private key(s) can be stored in $PGDATA directory, which is only\naccessible by the database owner (usually postgres, DBA) user. Do not allow access\nto this system account to unauthorized users.\n\nTo put the keys in a different directory, as the database administrator (shown here\nas \"postgres\"), set the following settings to a protected directory:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nssl_ca_file = \"/some/protected/directory/root.crt\"\nssl_crl_file = \"/some/protected/directory/root.crl\"\nssl_cert_file = \"/some/protected/directory/server.crt\"\nssl_key_file = \"/some/protected/directory/server.key\"\n\nNow, as the system administrator, restart the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl restartpostgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 restart\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73029.rb",
            "line": 57
          },
          "id": "V-73029"
        },
        {
          "title": "PostgreSQL must provide an immediate real-time alert to appropriate\n  support staff of all audit failure events requiring real-time alerts.",
          "desc": "Geoint Centralized Enterprize monitoring and alerting solution is not\n        yet implemented by the sponsor. Crunchy services are constantly undergo\n        extensive health checks",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000360-DB-000320",
            "gid": "V-72893",
            "rid": "SV-87545r1_rule",
            "stig_id": "PGS9-00-002700",
            "cci": "CCI-001858",
            "nist": [
              "AU-5 (2)",
              "Rev_4"
            ],
            "check": "Review the system documentation to determine which audit failure\n  events require real-time alerts.\n  Review the system settings and code. If the real-time alerting that is\n  specified in the documentation is not enabled, this is a finding.",
            "fix": "Configure the system to provide an immediate real-time alert to\n  appropriate support staff when a specified audit failure occurs.\n  It is possible to create scripts or implement third-party tools to enable\n  real-time alerting for audit failures in PostgreSQL."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72893.rb",
            "line": 23
          },
          "id": "V-72893"
        },
        {
          "title": "PostgreSQL must produce audit records containing sufficient information\n  to establish the outcome (success or failure) of the events.",
          "desc": "Information system auditing capability is critical for accurate\n  forensic analysis. Without information about the outcome of events, security\n  personnel cannot make an accurate assessment as to whether an attack was\n  successful or if changes were made to the security state of the system.\n  Event outcomes can include indicators of event success or failure and\n  event-specific results (e.g., the security state of the information system\n  after the event occurred). As such, they also provide a means to measure the\n  impact of an event and help authorized personnel to determine the appropriate\n  response.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000099-DB-000043",
            "gid": "V-72843",
            "rid": "SV-87495r1_rule",
            "stig_id": "PGS9-00-000200",
            "cci": "CCI-000134",
            "nist": [
              "AU-3",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n    As a database administrator (shown here as \"postgres\"), create a table,\n    insert a value, alter the table and update the table by running the following\n    SQL:\n\n    CREATE TABLE stig_test_table(id INT);\n    INSERT INTO stig_test_table(id) VALUES (0);\n    ALTER TABLE stig_test_table ADD COLUMN name text;\n    UPDATE stig_test_table SET id = 1 WHERE id = 0;\n\n    Next, as a user without access to the stig_test table, run the following SQL:\n\n    INSERT INTO stig_test_table(id) VALUES (1);\n    ALTER TABLE stig_test_table DROP COLUMN name;\n    UPDATE stig_test_table SET id = 0 WHERE id = 1;\n\n    The prior SQL should generate errors:\n\n    ERROR: permission denied for relation stig_test\n    ERROR: must be owner of relation stig_test\n    ERROR: permission denied for relation stig_test\n\n    Now, as the database administrator, drop the test table by running the\n    following SQL:\n\n    DROP TABLE stig_test_table;\n\n    Now verify the errors were logged:\n\n    $ sudo su - postgres\n    $ cat ${PGDATA?}/pg_log/<latest_logfile>$PGDATA/\n    < 2016-02-23 14:51:31.103 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE\n    stig_test(id INT);,<none> < 2016-02-23 14:51:44.835 EDT psql postgres\n    postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >LOG: AUDIT:\n    SESSION,2,1,WRITE,INSERT,,,INSERT INTO stig_test(id) VALUES (0);,<none>\n    < 2016-02-23 14:53:25.805 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,3,1,DDL,ALTER TABLE,,,ALTER TABLE\n    stig_test ADD COLUMN name text;,<none> < 2016-02-23 14:53:54.381 EDT psql\n    postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >LOG: AUDIT:\n    SESSION,4,1,WRITE,UPDATE,,,UPDATE stig_test SET id = 1 WHERE id = 0;,<none>\n    < 2016-02-23 14:54:20.832 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >ERROR: permission denied for relation stig_test\n    < 2016-02-23 14:54:20.832 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >STATEMENT: INSERT INTO stig_test(id) VALUES (1);\n    < 2016-02-23 14:54:41.032 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >ERROR: must be owner of relation stig_test < 2016-02-23\n    14:54:41.032 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT\n    [local] >STATEMENT: ALTER TABLE stig_test DROP COLUMN name; < 2016-02-23\n    14:54:54.378 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT\n    [local] >ERROR: permission denied for relation stig_test < 2016-02-23\n    14:54:54.378 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT\n    [local] >STATEMENT: UPDATE stig_test SET id = 0 WHERE id = 1; < 2016-02-23\n    14:55:23.723 EDT psql postgres postgres 570bf307.3b0a 2016-04-11 14:55:03 EDT\n    [local] >LOG: AUDIT: SESSION,1,1,DDL,DROP TABLE,,,DROP TABLE stig_test;,<none>\n\n    If audit records exist without the outcome of the event that occurred, this is\n    a finding.",
            "fix": "Using pgaudit PostgreSQL can be configured to audit various facets\n    of PostgreSQL. See supplementary content APPENDIX-B for documentation on\n    installing pgaudit.\n    All errors, denials and unsuccessful requests are logged if logging is enabled.\n    See supplementary content APPENDIX-C for documentation on enabling logging.\n    Note: The following instructions use the PGDATA environment variable. See\n    supplementary content APPENDIX-F for instructions on configuring PGDATA.\n    With pgaudit and logging enabled, set the following configuration settings in\n    postgresql.conf, as the database administrator (shown here as \"postgres\"),\n    to the following:\n\n    $ vi ${PGDATA?}/postgresql.conf\n    pgaudit.log_catalog='on'\n    pgaudit.log_level='log'\n    pgaudit.log_parameter='on'\n    pgaudit.log_statement_once='off'\n    pgaudit.log='all, -misc'\n\n    Next, tune the following logging configurations in postgresql.conf:\n\n    $ sudo vi ${PGDATA?}/postgresql.conf\n    log_line_prefix = '%m %u %d %e : '\n    log_error_verbosity = default\n\n    Last, as the system administrator, restart PostgreSQL:\n\n    # SERVER USING SYSTEMCTL ONLY\n    $ sudo systemctl restart postgresql-9.5\n\n    # SERVER USING INITD ONLY\n    $ sudo service postgresql-9.5 restart"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72843.rb",
            "line": 45
          },
          "id": "V-72843"
        },
        {
          "title": "PostgreSQL must off-load audit data to a separate log management facility;\nthis must be continuous and in near real time for systems with a network connection\nto the storage facility and weekly or more often for stand-alone systems.",
          "desc": "The Crunchy DBaaS inherits this control from the Centralized Log\n        Monitoring Service (i.e., ArcSight) after configuring the systems/VMs to\n        audit all events as required in ICS 500-27 and NCD 8010.17.The Program\n        sends the system logs to the Centralized Log Monitoring Service\n        (i.e., ArcSight) via PaaS BOSH Logs Collector.  It is the responsibility\n        of the ArcSight Service Provider to coordinate security audit function\n        with other organization entities.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000515-DB-000318",
            "gid": "V-73045",
            "rid": "SV-87697r1_rule",
            "stig_id": "PGS9-00-011300",
            "cci": "CCI-001851",
            "nist": [
              "AU-4 (1)",
              "Rev_4"
            ],
            "check": "First, as the database administrator (shown here as \"postgres\"),\nensure PostgreSQL uses syslog by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_destination\"\n\nIf log_destination is not syslog, this is a finding.\n\nNext, as the database administrator, check which log facility is configured by\nrunning the following SQL:\n\n$ psql -c \"SHOW syslog_facility\"\n\nCheck with the organization to see how syslog facilities are defined in their\norganization.\n\nIf the wrong facility is configured, this is a finding.\n\nIf PostgreSQL does not have a continuous network connection to the centralized log\nmanagement system, and PostgreSQL audit records are not transferred to the\ncentralized log management system weekly or more often, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nConfigure PostgreSQL or deploy and configure software tools to transfer audit\nrecords to a centralized log management system, continuously and in near-real time\nwhere a continuous network connection to the log management system exists, or at\nleast weekly in the absence of such a connection.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nWith logging enabled, as the database administrator (shown here as \"postgres\"),\nconfigure the follow parameters in postgresql.conf (the example uses the default\nvalues - tailor for environment):\n\nNote: Consult the organization on how syslog facilities are defined in the syslog\ndaemon configuration.\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nlog_destination = 'syslog'\nsyslog_facility = 'LOCAL0'\nsyslog_ident = 'postgres'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73045.rb",
            "line": 23
          },
          "id": "V-73045"
        },
        {
          "title": "Access to database files must be limited to relevant processes and to\nauthorized, administrative users.",
          "desc": "Applications, including PostgreSQLs, must prevent unauthorized and\nunintended information transfer via shared system resources. Permitting only DBMS\nprocesses and authorized, administrative users to have access to the files where the\ndatabase resides helps ensure that those files are not shared inappropriately and\nare not open to backdoor access and manipulation.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000243-DB-000374",
            "gid": "V-73059",
            "rid": "SV-87711r1_rule",
            "stig_id": "PGS9-00-012000",
            "cci": "CCI-001090",
            "nist": [
              "SC-4",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\nvariable. See supplementary content APPENDIX-F for instructions on configuring\nPGDATA.\n\nReview the permissions granted to users by the operating system/file system on the\ndatabase files, database log files and database backup files.\n\nTo verify that all files are owned by the database administrator and have the\ncorrect permissions, run the following as the database administrator (shown here as\n\"postgres\"):\n\n$ sudo su - postgres\n$ ls -lR ${PGDATA?}\n\nIf any files are not owned by the database administrator or allow anyone but the\ndatabase administrator to read/write/execute, this is a finding.\n\nIf any user/role who is not an authorized system administrator with a need-to-know\nor database administrator with a need-to-know, or a system account for running\nPostgreSQL processes, is permitted to read/view any of these files, this is a\nfinding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nConfigure the permissions granted by the operating system/file system on the\ndatabase files, database log files, and database backup files so that only relevant\nsystem accounts and authorized system administrators and database administrators\nwith a need to know are permitted to read/view these files.\n\nAny files (for example: extra configuration files) created in PGDATA must be owned\nby the database administrator, with only owner permissions to read, write, and\nexecute."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73059.rb",
            "line": 105
          },
          "id": "V-73059"
        },
        {
          "title": "PostgreSQL and associated applications must reserve the use of dynamic\n  code execution for situations that require it.",
          "desc": "Application developers must follow Best Practices when developing Cloud\n        applications. Example: Checking the valid syntax and semantics of\n        information system inputs to ensure that SQL injections are not possible.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000251-DB-000391",
            "gid": "V-72873",
            "rid": "SV-87525r1_rule",
            "stig_id": "PGS9-00-001900",
            "cci": "CCI-001310",
            "nist": [
              "SI-10",
              "Rev_4"
            ],
            "check": "Review PostgreSQL source code (trigger procedures, functions)\n  and application source code, to identify cases of dynamic code execution. Any\n  user input should be handled through prepared statements.\n  If dynamic code execution is employed in circumstances where the objective\n  could practically be satisfied by static execution with strongly typed\n  parameters, this is a finding.",
            "fix": "Where dynamic code execution is employed in circumstances where\n  the objective could practically be satisfied by static execution with strongly\n  typed parameters, modify the code to do so."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72873.rb",
            "line": 23
          },
          "id": "V-72873"
        },
        {
          "title": "PostgreSQL must uniquely identify and authenticate organizational users (or\nprocesses acting on behalf of organizational users).",
          "desc": "To assure accountability and prevent unauthenticated access, organizational\nusers must be identified and authenticated to prevent potential misuse and\ncompromise of the system.\n\nOrganizational users include organizational employees or individuals the\norganization deems to have equivalent status of employees (e.g., contractors).\nOrganizational users (and any processes acting on behalf of users) must be uniquely\nidentified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations\ndocument specific user actions that can be performed on the information system\nwithout identification or authentication; and\n(ii) Accesses that occur through authorized use of group authenticators without\nindividual authentication. Organizations may require unique identification of\nindividuals using shared accounts, for detailed accountability of individual\nactivity.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000148-DB-000103",
            "gid": "V-73049",
            "rid": "SV-87701r1_rule",
            "stig_id": "PGS9-00-011500",
            "cci": "CCI-000764",
            "nist": [
              "IA-2",
              "Rev_4"
            ],
            "check": "Review PostgreSQL settings to determine whether organizational users\nare uniquely identified and authenticated when logging on/connecting to the system.\n\nTo list all roles in the database, as the database administrator (shown here as\n\"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"\\du\"\n\nIf organizational users are not uniquely identified and authenticated, this is a\nfinding.\n\nNext, as the database administrator (shown here as \"postgres\"), verify the current\npg_hba.conf authentication settings:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/pg_hba.conf\n\nIf every role does not have unique authentication requirements, this is a finding.\n\nIf accounts are determined to be shared, determine if individuals are first\nindividually authenticated. If individuals are not individually authenticated before\nusing the shared account, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nConfigure PostgreSQL settings to uniquely identify and authenticate all\norganizational users who log on/connect to the system.\n\nTo create roles, use the following SQL:\n\nCREATE ROLE <role_name> [OPTIONS]\n\nFor more information on CREATE ROLE, see the official documentation:\nhttps://www.postgresql.org/docs/current/static/sql-createrole.html\n\nFor each role created, the database administrator can specify database\nauthentication by editing pg_hba.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/pg_hba.conf\n\nAn example pg_hba entry looks like this:\n\n# TYPE DATABASE USER ADDRESS METHOD\nhost test_db bob 192.168.0.0/16 md5\n\nFor more information on pg_hba.conf, see the official documentation:\nhttps://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73049.rb",
            "line": 23
          },
          "id": "V-73049"
        },
        {
          "title": "PostgreSQL must maintain the authenticity of communications sessions by\nguarding against man-in-the-middle attacks that guess at Session ID values.",
          "desc": "One class of man-in-the-middle, or session hijacking, attack involves the\nadversary guessing at valid session identifiers based on patterns in identifiers\nalready known.\n\nThe preferred technique for thwarting guesses at Session IDs is the generation of\nunique session identifiers using a FIPS 140-2 approved random number generator.\n\nHowever, it is recognized that available PostgreSQL products do not all implement\nthe preferred technique yet may have other protections against session hijacking.\nTherefore, other techniques are acceptable, provided they are demonstrated to be\neffective.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000224-DB-000384",
            "gid": "V-73047",
            "rid": "SV-87699r1_rule",
            "stig_id": "PGS9-00-011400",
            "cci": "CCI-001188",
            "nist": [
              "SC-23 (3)",
              "Rev_4"
            ],
            "check": "To check if PostgreSQL is configured to use ssl, as the database\nadministrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl\"\n\nIf this is not set to `on`, this is a finding.",
            "fix": "To configure PostgreSQL to use SSL, as a database owner (shown here as\n\"postgres\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameter:\n\nssl = on\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G.\n\nFor further SSL configurations, see the official documentation:\nhttps://www.postgresql.org/docs/current/static/ssl-tcp.html"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73047.rb",
            "line": 45
          },
          "id": "V-73047"
        },
        {
          "title": "PostgreSQL must initiate session auditing upon startup.",
          "desc": "Session auditing is for use when a user's activities are under\n  investigation. To be sure of capturing all activity during those periods when\n  session auditing is in use, it needs to be in operation for the whole time\n  PostgreSQL is running.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000092-DB-000208",
            "gid": "V-73001",
            "rid": "SV-87653r1_rule",
            "stig_id": "PGS9-00-008600",
            "cci": "CCI-001464",
            "nist": [
              "AU-14 (1)",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), check\nthe current settings by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf pgaudit is not in the current setting, this is a finding.\n\nAs the database administrator (shown here as \"postgres\"), check the current\nsettings by running the following SQL:\n\n$ psql -c \"SHOW logging_destination\"\n\nIf stderr or syslog are not in the current setting, this is a finding.",
            "fix": "Configure PostgreSQL to enable auditing.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nFor session logging we suggest using pgaudit. For instructions on how to setup\npgaudit, see supplementary content APPENDIX-B."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73001.rb",
            "line": 46
          },
          "id": "V-73001"
        },
        {
          "title": "PostgreSQL must generate audit records when security objects are\n  modified.",
          "desc": "Changes in the database objects (tables, views, procedures, functions)\n  that record and control permissions, privileges, and roles granted to users\n  and roles must be tracked. Without an audit trail, unauthorized changes to the\n  security subsystem could go undetected. The database could be severely\n  compromised or rendered inoperative.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000496-DB-000334",
            "gid": "V-72971",
            "rid": "SV-87623r1_rule",
            "stig_id": "PGS9-00-006600",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the results does not contain `pgaudit`, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain `role`, `read`, `write`, and `ddl`, this is a\n  finding.\n  Next, verify that accessing the catalog is audited by running the following\n  SQL:\n  $ psql -c \"SHOW pgaudit.log_catalog\"\n  If log_catalog is not `on`, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  Using `pgaudit` the DBMS (PostgreSQL) can be configured to audit these\n  requests. See supplementary content `APPENDIX-B` for documentation on\n  installing `pgaudit`.With `pgaudit` installed the following configurat\n  ions can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log_catalog = 'on'\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new\n  configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72971.rb",
            "line": 46
          },
          "id": "V-72971"
        },
        {
          "title": "The role(s)/group(s) used to modify database structure (including but\n          not necessarily limited to tables, indexes, storage, etc.) and logic\n          modules (functions, trigger procedures, links to software external to\n          PostgreSQL, etc.) must be restricted to authorized users.",
          "desc": "If PostgreSQL were to allow any user to make changes to database\n          structure or logic, those changes might be implemented without\n          undergoing the appropriate testing and approvals that are part of a\n          robust change management process.\n\n          Accordingly, only qualified and authorized individuals must be allowed\n          to obtain access to information system components for purposes of\n          initiating changes, including upgrades and modifications.\n\n          Unmanaged changes that occur to the database software libraries or\n          configuration can lead to unauthorized or compromised installations.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000133-DB-000362",
            "gid": "V-72865",
            "rid": "SV-87517r1_rule",
            "stig_id": "PGS9-00-001300",
            "cci": "CCI-001499",
            "nist": [
              "CM-5 (6)",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n                  variable. See supplementary content APPENDIX-F for instructions\n                  on configuring PGDATA.\n\n                  As the database administrator (shown here as \"postgres\"),\n                  list all users and their permissions by running the following\n                  SQL:\n\n                  $ sudo su - postgres\n                  $ psql -c \"\\dp *.*\"\n\n                  Verify that all objects have the correct privileges. If they do\n                  not, this is a finding.\n\n                  Next, as the database administrator (shown here as \"postgres\"),\n                  verify the permissions of the database directory on the\n                  filesystem:\n\n                  $ ls -la ${PGDATA?}\n\n                  If permissions of the database directory are not limited to an\n                  authorized user account, this is a finding.",
            "fix": "As the database administrator, revoke any permissions from a role\n                that are deemed unnecessary by running the following SQL:\n\n                ALTER ROLE bob NOCREATEDB;\n                ALTER ROLE bob NOCREATEROLE;\n                ALTER ROLE bob NOSUPERUSER;\n                ALTER ROLE bob NOINHERIT;\n                REVOKE SELECT ON some_function FROM bob;"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72865.rb",
            "line": 63
          },
          "id": "V-72865"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  delete privileges/permissions occur.",
          "desc": "Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n  In an SQL environment, deleting permissions is typically done via the REVOKE\n  command.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000499-DB-000331",
            "gid": "V-72945",
            "rid": "SV-87597r1_rule",
            "stig_id": "PGS9-00-005400",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), create the\n  roles joe and bob with LOGIN by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE joe LOGIN\"\n  $ psql -c \"CREATE ROLE bob LOGIN\"\n  Next, set current role to bob and attempt to alter the role joe:\n  $ psql -c \"SET ROLE bob; ALTER ROLE joe NOLOGIN\"\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  denials are logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-17 11:28:10.004 EDT bob 56eacd05.cda postgres: >ERROR: permission\n  denied to drop role\n  < 2016-03-17 11:28:10.004 EDT bob 56eacd05.cda postgres:\n  >STATEMENT: DROP ROLE joe;\n  If audit logs are not generated when unsuccessful attempts to delete\n  privileges/permissions occur, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to delete privileges occur.\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72945.rb",
            "line": 46
          },
          "id": "V-72945"
        },
        {
          "title": "PostgreSQL must enforce approved authorizations for logical access to\n        information and system resources in accordance with applicable access\n        control policies.",
          "desc": "Authentication with a DoD-approved PKI certificate does not necessarily\n        imply authorization to access PostgreSQL. To mitigate the risk of\n        unauthorized access to sensitive information by entities that have been\n        issued certificates by DoD-approved PKIs, all DoD systems, including\n        databases, must be properly configured to implement access control\n        policies.\n\n        Successful authentication must not automatically give an entity access\n        to an asset or security boundary. Authorization procedures and controls\n        must be implemented to ensure each authenticated entity also has a\n        validated and current authorization. Authorization is the process of\n        determining whether an entity, once authenticated, is permitted to\n        access a specific asset. Information systems use access control policies\n        and enforcement mechanisms to implement this requirement.\n\n        Access control policies include identity-based policies, role-based\n        policies, and attribute-based policies. Access enforcement mechanisms\n        include access control lists, access control matrices, and cryptography.\n\n        These policies and mechanisms must be employed by the application to\n        control access between users (or processes acting on behalf of users)\n        and objects (e.g., devices, files, records, processes, programs, and domains)\n        in the information system.\n\n        This requirement is applicable to access control enforcement applications,\n        a category that includes database management systems. If PostgreSQL does\n        not follow applicable policy when approving access, it may be in conflict\n        with networks or other applications in the information system. This may\n        result in users either gaining or being denied access inappropriately and\n        in conflict with applicable policy.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000033-DB-000084",
            "gid": "V-72859",
            "rid": "SV-87511r1_rule",
            "stig_id": "PGS9-00-000900",
            "cci": "CCI-000213",
            "nist": [
              "AC-3",
              "Rev_4"
            ],
            "check": "From the system security plan or equivalent documentation,\n  determine the appropriate permissions on database objects for each kind\n  (group role) of user. If this documentation is missing, this is a finding.\n\n  First, as the database administrator (shown here as \"postgres\"),\n  check the privileges of all roles in the database by running the\n  following SQL:\n\n  $ sudo su - postgres\n  $ psql -c '\\du'\n\n  Review all roles and their associated privileges. If any roles'\n  privileges exceed those documented, this is a finding.\n\n  Next, as the database administrator (shown here as \"postgres\"),\n  check the configured privileges for tables and columns by running\n  the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c '\\dp'\n\n  Review all access privileges and column access privileges list.\n  If any roles' privileges exceed those documented, this is a finding.\n\n  Next, as the database administrator (shown here as \"postgres\"),\n  check the configured authentication settings in pg_hba.conf:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n\n  Review all entries and their associated authentication methods.\n\n  If any entries do not have their documented authentication requirements,\n  this is a finding.",
            "fix": "Create and/or maintain documentation of each group role's\n  appropriate permissions on database objects.\n\n  Implement these permissions in the database, and remove any permissions that\n  exceed those documented.\n\n  The following are examples of how to use role privileges in PostgreSQL to\n  enforce access controls. For a complete list of privileges, see the official\n  documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html\n\n  #### Roles Example 1\n  The following example demonstrates how to create an admin role with CREATEDB\n  and CREATEROLE privileges.\n\n  As the database administrator (shown here as \"postgres\"), run the following\n  SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE admin WITH CREATEDB CREATEROLE\"\n\n  #### Roles Example 2\n  The following example demonstrates how to create a role with a password that\n  expires and makes the role a member of the \"admin\" group.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE joe LOGIN ENCRYPTED PASSWORD 'stig2016!' VALID UNTIL\n'2016-09-20' IN ROLE admin\"\n\n  #### Roles Example 3\n  The following demonstrates how to revoke privileges from a role using REVOKE.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n$ psql -c \"REVOKE admin FROM joe\"\n\n  #### Roles Example 4\n  The following demonstrates how to alter privileges in a role using ALTER.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n$ psql -c \"ALTER ROLE joe NOLOGIN\"\n\n  The following are examples of how to use grant privileges in PostgreSQL to\n  enforce access controls on objects. For a complete list of privileges, see the\n  official documentation:\nhttps://www.postgresql.org/docs/current/static/sql-grant.html\n\n  #### Grant Example 1\n  The following example demonstrates how to grant INSERT on a table to a role.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"GRANT SELECT ON stig_test TO joe\"\n\n  #### Grant Example 2\n  The following example demonstrates how to grant ALL PRIVILEGES on a table to a\n  role.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"GRANT ALL PRIVILEGES ON stig_test TO joe\"\n\n  #### Grant Example 3\n  The following example demonstrates how to grant a role to a role.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"GRANT admin TO joe\"\n\n  #### Revoke Example 1\n  The following example demonstrates how to revoke access from a role.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"REVOKE admin FROM joe\"\n\n  To change authentication requirements for the database, as the database\n  administrator (shown here as \"postgres\"), edit pg_hba.conf:\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n\n  Edit authentication requirements to the organizational requirements. See the\n  official documentation for the complete list of options for authentication:\n  http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html\n\n  After changes to pg_hba.conf, reload the server:\n\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72859.rb",
            "line": 69
          },
          "id": "V-72859"
        },
        {
          "title": "PostgreSQL must limit the number of concurrent sessions to an\n  organization-defined number per user for all accounts and/or account types.",
          "desc": "Database management includes the ability to control the number of users\n  and user sessions utilizing PostgreSQL. Unlimited concurrent connections to\n  PostgreSQL could allow a successful Denial of Service (DoS) attack by\n  exhausting connection resources; and a system can also fail or be degraded by\n  an overload of legitimate users. Limiting the number of concurrent sessions\n  per user is helpful in reducing these risks.\n  This requirement addresses concurrent session control for a single account.\n  It does not address concurrent sessions by a single user via multiple system\n  accounts; and it does not deal with the total number of sessions across all\n  accounts.\n  The capability to limit the number of concurrent sessions per user must be\n  configured in or added to PostgreSQL (for example, by use of a logon trigger),\n  when this is technically feasible. Note that it is not sufficient to limit\n  sessions via a web server or application server alone, because legitimate\n  users and adversaries can potentially connect to PostgreSQL by other means.\n  The organization will need to define the maximum number of concurrent sessions\n  by account type, by account, or a combination thereof. In deciding on the\n  appropriate number, it is important to consider the work requirements of the\n  various types of users. For example, 2 might be an acceptable limit for\n  general users accessing the database via an application; but 10 might be too\n  few for a database administrator using a database management GUI tool, where\n  each query tab and navigation pane may count as a separate session.\n  (Sessions may also be referred to as connections or logons, which for the\n  purposes of this requirement are synonyms..",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000001-DB-000031",
            "gid": "V-72863",
            "rid": "SV-87515r1_rule",
            "stig_id": "PGS9-00-001200",
            "cci": "CCI-000054",
            "nist": [
              "AC-10",
              "Rev_4"
            ],
            "check": "To check the total amount of connections allowed by the database,\n                as the database administrator, run the following SQL:\n                $ sudo su - postgres\n                $ psql -c \"SHOW max_connections\"\n                If the total amount of connections is greater than documented by\n                an organization, this is a finding.\n                To check the amount of connections allowed for each role, as the\n                database administrator, run the following SQL:\n                $ sudo su - postgres\n                $ psql -c \"SELECT rolname, rolconnlimit from pg_authid\"\n                If any roles have more connections configured than documented,\n                this is a finding. A value of -1 indicates Unlimited, this is a\n                finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\n      See supplementary content APPENDIX-F for instructions on\n      configuring PGDATA.\n\n      To configure the maximum amount of connections allowed to the\n      database, as the database administrator (shown here as \"postgres\")\n      change the following in postgresql.conf\n\n      (the value 10 is an example; set the value to suit local conditions):\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n      max_connections = 10\n\n      Next, restart the database:\n\n      # SYSTEMD SERVER ONLY\n      $ sudo systemctl restart postgresql-9.5\n\n      # INITD SERVER ONLY\n      $ sudo service postgresql-9.5 restart\n\n      To limit the amount of connections allowed by a specific role,\n      as the database administrator, run the following SQL:\n\n      $ psql -c \"ALTER ROLE <rolname> CONNECTION LIMIT 1\";"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72863.rb",
            "line": 51
          },
          "id": "V-72863"
        },
        {
          "title": "PostgreSQL must use NIST FIPS 140-2 validated cryptographic modules for\n        cryptographic operations.",
          "desc": "Use of weak or not validated cryptographic algorithms undermines the\n        purposes of utilizing encryption and digital signatures to protect data.\n        Weak algorithms can be easily broken and not validated cryptographic\n        modules may not implement algorithms correctly. Unapproved cryptographic\n        modules or algorithms should not be relied on for authentication,\n        confidentiality or integrity. Weak cryptography could allow an attacker\n        to gain access to and modify data stored in the database as well as the\n        administration settings of the DBMS.\n\n        Applications, including DBMSs, utilizing cryptography are required to use\n        approved NIST FIPS 140-2 validated cryptographic modules that meet the\n        requirements of applicable federal laws, Executive Orders, directives,\n        policies, regulations, standards, and guidance.\n\n        The security functions validated as part of FIPS 140-2 for cryptographic\n        modules are described in FIPS 140-2 Annex A.\n\n        NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based\n        encryption modules.",
          "impact": 0.7,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000179-DB-000114",
            "gid": "V-73063",
            "rid": "SV-87715r1_rule",
            "stig_id": "PGS9-00-012300",
            "cci": "CCI-000803",
            "nist": [
              "IA-7",
              "Rev_4"
            ],
            "check": "As the system administrator, run the following:\n\n      $ openssl version\n      If \"fips\" is not included in the openssl version, this is a finding.",
            "fix": "Configure OpenSSL to meet FIPS Compliance using the following\n      documentation in section 9.1:\n\n      http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp1758.pdf\n\n      For more information on configuring PostgreSQL to use SSL, see supplementary\n      content APPENDIX-G."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73063.rb",
            "line": 104
          },
          "id": "V-73063"
        },
        {
          "title": "PostgreSQL must generate audit records when successful accesses to\n        objects occur.",
          "desc": "Without tracking all or selected types of access to all or selected\n        objects (tables, views, procedures, functions, etc.), it would be\n        difficult to establish, correlate, and investigate the events relating\n        to an incident, or identify those responsible for one.\n\n        In an SQL environment, types of access include, but are not necessarily\n        limited to:\n\n        SELECT\n        INSERT\n        UPDATE\n        DELETE\n        EXECUT.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000507-DB-000356",
            "gid": "V-73067",
            "rid": "SV-87719r1_rule",
            "stig_id": "PGS9-00-012600",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "As the database administrator, verify pgaudit is enabled by\n      running the following SQL:\n\n      $ sudo su - postgres\n      $ psql -c \"SHOW shared_preload_libraries\"\n\n      If the output does not contain \"pgaudit\", this is a finding.\n\n      Verify that role, read, write, and ddl auditing are enabled:\n\n      $ psql -c \"SHOW pgaudit.log\"\n\n      If the output does not contain read and write, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\n      See supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\n      To ensure that logging is enabled, review supplementary content APPENDIX-C\n      for instructions on enabling logging.\n\n      If logging is enabled the following configurations must be made to log\n      unsuccessful connections, date/time, username and session identifier.\n\n      As the database administrator (shown here as \"postgres\"),\n      edit postgresql.conf:\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n\n      Edit the following parameters:\n\n      log_connections = on\n      log_line_prefix = '< %m %u %c: >'\n      pgaudit.log = 'read, write'\n\n      Where:\n      * %m is the time and date\n      * %u is the username\n      * %c is the session ID for the connection\n\n      Now, as the system administrator, reload the server with the new\n      configuration:\n\n      # SYSTEMD SERVER ONLY\n      $ sudo systemctl reload postgresql-9.5\n\n      # INITD SERVER ONLY\n      $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73067.rb",
            "line": 104
          },
          "id": "V-73067"
        },
        {
          "title": "PostgreSQL must associate organization-defined types of security labels\n  having organization-defined security label values with information in storage.",
          "desc": "It is ISO responsibility to utilize PostgreSQL RLS capabilities. No\n        security labeling requirements have been specified.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000311-DB-000308",
            "gid": "V-72869",
            "rid": "SV-87521r1_rule",
            "stig_id": "PGS9-00-001700",
            "cci": "CCI-002262",
            "nist": [
              "AC-16 a",
              "Rev_4"
            ],
            "check": "If security labeling is not required, this is not a finding.\n  First, as the database administrator (shown here as \"postgres\"), run the\n  following SQL against each table that requires security labels:\n\n  $ sudo su - postgres\n$ psql -c \"\\d+ <schema_name>.<table_name>\"\n\n  If security labeling is required and the results of the SQL above do not show\n  a policy attached to the table, this is a finding.\n\n  If security labeling is required and not implemented according to the system\n  documentation, such as SSP, this is a finding.\n\n  If security labeling requirements have been specified, but the security\n  labeling is not implemented or does not reliably maintain labels on\n  information in storage, this is a finding.",
            "fix": "In addition to the SQL-standard privilege system available through\n  GRANT, tables can have row security policies that restrict, on a per-user\n  basis, which rows can be returned by normal queries or inserted, updated, or\n  deleted by data modification commands. This feature is also known as Row-Level\n  Security (RLS).\n\n  RLS policies can be very different depending on their use case. For one example\n  of using RLS for Security Labels, see supplementary content APPENDIX-D."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72869.rb",
            "line": 23
          },
          "id": "V-72869"
        },
        {
          "title": "Privileges to change PostgreSQL software modules must be limited.",
          "desc": "If the system were to allow any user to make changes to software\n  libraries, those changes might be implemented without undergoing the\n  appropriate testing and approvals that are part of a robust change management\n  process.  Accordingly, only qualified and authorized individuals must be\n  allowed to obtain access to information system components for purposes of\n  initiating changes, including upgrades and modifications.  Unmanaged changes\n  that occur to the database software libraries or configuration can lead to\n  unauthorized or compromised installations.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000133-DB-000179",
            "gid": "V-72853",
            "rid": "SV-87505r1_rule",
            "stig_id": "PGS9-00-000700",
            "cci": "CCI-001499",
            "nist": [
              "CM-5 (6)",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  As the database administrator (shown here as \"postgres\"), check the\n  permissions of configuration files for the database:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}\n\n  If any files are not owned by the database owner or have permissions allowing\n  others to modify (write) configuration files, this is a finding.\n\n  As the server administrator, check the permissions on the shared libraries for\n  PostgreSQL:\n\n  $ sudo ls -la /usr/pgsql-9.5\n  $ sudo ls -la /usr/pgsql-9.5/bin\n  $ sudo ls -la /usr/pgsql-9.5/include\n  $ sudo ls -la /usr/pgsql-9.5/lib\n  $ sudo ls -la /usr/pgsql-9.5/share\n\n  If any files are not owned by root or have permissions allowing others to\n  modify (write) configuration files, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  As the database administrator (shown here as \"postgres\"), change\n  the ownership and permissions of configuration files in PGDATA:\n\n  $ sudo su - postgres\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\n  $ chmod 0600 ${PGDATA?}/postgresql.conf\n\n  As the server administrator, change the ownership and permissions of shared\n  objects in /usr/pgsql-9.5/*.so\n\n  $ sudo chown root:root /usr/pgsql-9.5/lib/*.so\n  $ sudo chmod 0755 /usr/pgsql-9.5/lib/*.so\n\n  As the service administrator, change the ownership and permissions of\n  executables in /usr/pgsql-9.5/bin:\n\n  $ sudo chown root:root /usr/pgsql-9.5/bin/*\n  $ sudo chmod 0755 /usr/pgsql-9.5/bin/*"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72853.rb",
            "line": 51
          },
          "id": "V-72853"
        },
        {
          "title": "PostgreSQL must produce audit records containing sufficient information\n  to establish the identity of any user/subject or process associated with the\n  event.",
          "desc": "Information system auditing capability is critical for accurate\n  forensic analysis. Without information that establishes the identity of the\n  subjects (i.e., users or processes acting on behalf of users) associated with\n  the events, security personnel cannot determine responsibility for the\n  potentially harmful event.\n  Identifiers (if authenticated or otherwise known) include, but are not limited\n  to, user database tables, primary key values, user names, or process identifiers.\n  1) Linux's sudo and su feature enables a user (with sufficient OS privileges)\n  to emulate another user, and it is the identity of the emulated user that is\n  seen by PostgreSQL and logged in the audit trail. Therefore, care must be\n  taken (outside of Postgresql) to restrict sudo/su to the minimum set of users\n  necessary.\n  2) PostgreSQL's SET ROLE feature enables a user (with sufficient PostgreSQL\n  privileges) to emulate another user running statements under the permission\n  set of the emulated user. In this case, it is the emulating user's identity,\n  and not that of the emulated user, that gets logged in the audit trail.\n  While this is definitely better than the other way around, ideally, both\n  identities would be recorded.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "check": "Check PostgreSQL settings and existing audit records to verify a\n  user name associated with the event is being captured and stored with the\n  audit records. If audit records exist without specific user information, this\n  is a finding.\n  First, as the database administrator (shown here as \"postgres\"), verify the\n  current setting of log_line_prefix by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_line_prefix\"\n  If log_line_prefix does not contain %m, %u, %d, %p, %r, %a, this is a finding.",
            "fix": "Logging must be enabled in order to capture the identity of any\n  user/subject or process associated with an event. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging.\n  To enable username, database name, process ID, remote host/port and\n  application name in logging, as the database administrator (shown here as\n  \"postgres\"), edit the following in postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_line_prefix = '< %m %u %d %p %r %a >'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72987.rb",
            "line": 46
          },
          "id": "V-72987"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  access categorized information (e.g., classification levels/security levels)\n  occur.",
          "desc": "Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000494-DB-000345",
            "gid": "V-72955",
            "rid": "SV-87607r1_rule",
            "stig_id": "PGS9-00-005900",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator (shown here as\n  \"postgres\"), run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW pgaudit.log\"\n  If pgaudit.log does not contain, \"ddl, write, role\", this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access categories of information.\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging.\n  With `pgaudit` installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'ddl, write, role'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-$9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72955.rb",
            "line": 46
          },
          "id": "V-72955"
        },
        {
          "title": "PostgreSQL must utilize centralized management of the content captured\n  in audit records generated by all components of PostgreSQL.",
          "desc": "The Crunchy DBaaS inherits this control from the Centralized Log\n        Monitoring Service (i.e., ArcSight) after configuring the systems/VMs\n        to audit all events as required in ICS 500-27 and NCD 8010.17.The Program\n        sends the system logs to the Centralized Log Monitoring Service (i.e. ArcSight)\n        via PaaS BOSH Logs Collector.  It is the responsibility of the ArcSight\n        Service Provider to coordinate security audit function with other\n        organization entities.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000356-DB-000314",
            "gid": "V-72909",
            "rid": "SV-87561r1_rule",
            "stig_id": "PGS9-00-003800",
            "cci": "CCI-001844",
            "nist": [
              "AU-3 (2)",
              "Rev_4"
            ],
            "check": "On UNIX systems, PostgreSQL can be configured to use stderr,\n  csvlog and syslog. To send logs to a centralized location, syslog should be\n  used.\n  As the database owner (shown here as \"postgres\"), ensure PostgreSQL uses\n  syslog by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_destination\"\n  As the database owner (shown here as \"postgres\"), check which log facility\n  PostgreSQL is configured by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW syslog_facility\"\n  Check with the organization to see how syslog facilities are defined in their\n  organization.\n  If PostgreSQL audit records are not written directly to or systematically\n  transferred to a centralized log management system, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  With logging enabled, as the database owner (shown here as \"postgres\"),\n  configure the follow parameters in postgresql.conf:\n  Note: Consult the organization on how syslog facilities are defined in the\n  syslog daemon configuration.\n  $ sudo su - postgres\n  $ vi 'log_destination' ${PGDATA?}/postgresql.conf\n  log_destination = 'syslog'\n  syslog_facility = 'LOCAL0'\n  syslog_ident = 'postgres'\n  Now, as the system administrator, reload the server with the new\n  configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72909.rb",
            "line": 45
          },
          "id": "V-72909"
        },
        {
          "title": "PostgreSQL must implement NIST FIPS 140-2 validated cryptographic\n  modules to generate and validate cryptographic hashes.",
          "desc": "Use of weak or untested encryption algorithms undermines the purposes\n  of utilizing encryption to protect data. The application must implement\n  cryptographic modules adhering to the higher standards approved by the federal\n  government since this provides assurance they have been tested and validated.\n  For detailed information, refer to NIST FIPS Publication 140-2, Security\n  Requirements For Cryptographic Modules. Note that the product's cryptographic\n  modules must be validated and certified by NIST as FIPS-compliant.",
          "impact": 0.7,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000514-DB-000381",
            "gid": "V-72989",
            "rid": "SV-87641r1_rule",
            "stig_id": "PGS9-00-008000",
            "cci": "CCI-002450",
            "nist": [
              "SC-13",
              "Rev_4"
            ],
            "check": "First, as the system administrator, run the following to see if FIPS\nis enabled:\n\n$ cat /proc/sys/crypto/fips_enabled\n\nIf fips_enabled is not 1, this is a finding.",
            "fix": "Configure OpenSSL to be FIPS compliant.\n\nPostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS\n140-2 compliant, see the official RHEL Documentation:\nhttps://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Securit\ny_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Pro\ncessing_Standard.html\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72989.rb",
            "line": 23
          },
          "id": "V-72989"
        },
        {
          "title": "PostgreSQL must enforce discretionary access control policies, as\n  defined by the data owner, over defined subjects and objects.",
          "desc": "Discretionary Access Control (DAC) is based on the notion that\n  individual users are \"owners\" of objects and therefore have discretion over\n  who should be authorized to access the object and in which mode (e.g., read or\n  write). Ownership is usually acquired as a consequence of creating the object\n  or via specified ownership assignment. DAC allows the owner to determine who\n  will have access to objects they control. An example of DAC includes\n  user-controlled table permissions.\n  When discretionary access control policies are implemented, subjects are not\n  constrained with regard to what actions they can take with information for\n  which they have already been granted access. Thus, subjects that have been\n  granted access to information are not prevented from passing (i.e., the\n  subjects have the discretion to pass) the information to other subjects or\n  objects.\n  A subject that is constrained in its operation by Mandatory Access Control\n  policies is still able to operate under the less rigorous constraints of this\n  requirement. Thus, while Mandatory Access Control imposes constraints\n  preventing a subject from passing information to another subject operating at\n  a different sensitivity level, this requirement permits the subject to pass\n  the information to any subject at the same sensitivity level.\n  The policy is bounded by the information system boundary. Once the information\n  is passed outside of the control of the information system, additional means\n  may be required to ensure the constraints remain in effect. While the older,\n  more traditional definitions of discretionary access control require i\n  dentity-based access control, that limitation is not required for this use of\n  discretionary access control.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000328-DB-000301",
            "gid": "V-72883",
            "rid": "SV-87535r1_rule",
            "stig_id": "PGS9-00-002200",
            "cci": "CCI-002165",
            "nist": [
              "AC-3 (4)",
              "Rev_4"
            ],
            "check": "Review system documentation to identify the required\n  discretionary access control (DAC).\n\n  Review the security configuration of the database and PostgreSQL. If\n  applicable, review the security configuration of the application(s) using the\n  database.\n\n  If the discretionary access control defined in the documentation is not\n  implemented in the security configuration, this is a finding.\n\n  If any database objects are found to be owned by users not authorized to own\n  database objects, this is a finding.\n\n  To check the ownership of objects in the database, as the database\n  administrator, run the following:\n  $ sudo su - postgres\n  $ psql -c \"\\dn *.*\"\n  $ psql -c \"\\dt *.*\"\n  $ psql -c \"\\ds *.*\"\n  $ psql -c \"\\dv *.*\"\n  $ psql -c \"\\df+ *.*\"\n  If any role is given privileges to objects it should not have, this is a\n  finding.",
            "fix": "Implement the organization's DAC policy in the security\n  configuration of the database and PostgreSQL, and, if applicable, the security\n  configuration of the application(s) using the database.\n  To GRANT privileges to roles, as the database administrator (shown here as\n  \"postgres\"), run statements like the following examples:\n  $ sudo su - postgres\n  $ psql -c \"CREATE SCHEMA test\"\n  $ psql -c \"GRANT CREATE ON SCHEMA test TO bob\"\n  $ psql -c \"CREATE TABLE test.test_table(id INT)\"\n  $ psql -c \"GRANT SELECT ON TABLE test.test_table TO bob\"\n  To REVOKE privileges to roles, as the database administrator (shown here as\n  \"postgres\"), run statements like the following examples:\n  $ psql -c \"REVOKE SELECT ON TABLE test.test_table FROM bob\"\n  $ psql -c \"REVOKE CREATE ON SCHEMA test FROM bob\""
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72883.rb",
            "line": 57
          },
          "id": "V-72883"
        },
        {
          "title": "PostgreSQL must implement NIST FIPS 140-2 validated cryptographic modules\nto protect unclassified information requiring confidentiality and cryptographic\nprotection, in accordance with the data owners requirements.",
          "desc": "Use of weak or untested encryption algorithms undermines the purposes of\nutilizing encryption to protect data. The application must implement cryptographic\nmodules adhering to the higher standards approved by the federal government since\nthis provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements\nin light of applicable federal laws, Executive Orders, directives, policies,\nregulations, and standards.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security\nRequirements For Cryptographic Modules. Note that the product's cryptographic\nmodules must be validated and certified by NIST as FIPS-compliant.",
          "impact": 0.7,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000514-DB-000383",
            "gid": "V-72993",
            "rid": "SV-87645r1_rule",
            "stig_id": "PGS9-00-008200",
            "cci": "CCI-002450",
            "nist": [
              "SC-13",
              "Rev_4"
            ],
            "check": "First, as the system administrator, run the following to see if FIPS\nis enabled:\n\n$ cat /proc/sys/crypto/fips_enabled\n\nIf fips_enabled is not 1, this is a finding.",
            "fix": "Configure OpenSSL to be FIPS compliant.\n\nPostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS\n140-2 compliant, see the official RHEL Documentation:\nhttps://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Securit\ny_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Pro\ncessing_Standard.html\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72993.rb",
            "line": 26
          },
          "id": "V-72993"
        },
        {
          "title": "PostgreSQL must implement cryptographic mechanisms to prevent unauthorized\nmodification of organization-defined information at rest (to include, at a minimum,\nPII and classified information) on organization-defined information system\ncomponents.",
          "desc": "PostgreSQLs handling data requiring \"data at rest\" protections must\nemploy cryptographic mechanisms to prevent unauthorized disclosure and modification\nof the information at rest. These cryptographic mechanisms may be native to\nPostgreSQL or implemented via additional software or operating system/file system\nsettings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity\nof organizational information. The strength of the mechanism is commensurate with\nthe security category and/or classification of the information. Organizations have\nthe flexibility to either encrypt all information on storage devices (i.e., full\ndisk encryption) or encrypt specific data structures (e.g., files, records, or\nfields).\n\nThe decision whether and what to encrypt rests with the data owner and is also\ninfluenced by the physical measures taken to secure the equipment and media on which\nthe information resides.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000428-DB-000386",
            "gid": "V-73003",
            "rid": "SV-87655r1_rule",
            "stig_id": "PGS9-00-008700",
            "cci": "CCI-002475",
            "nist": [
              "SC-28 (1)",
              "Rev_4"
            ],
            "check": "Review the system documentation to determine whether the\norganization has defined the information at rest that is to be protected from\nmodification, which must include, at a minimum, PII and classified information.\n\nIf no information is identified as requiring such protection, this is not a finding.\n\nReview the configuration of PostgreSQL, operating system/file system, and additional\nsoftware as relevant.\n\nIf any of the information defined as requiring cryptographic protection from\nmodification is not encrypted in a manner that provides the required level of\nprotection, this is a finding.\n\nOne possible way to encrypt data within PostgreSQL is to use pgcrypto extension.\n\nTo check if pgcrypto is installed on PostgreSQL, as a database administrator (shown\nhere as \"postgres\"), run the following command:\n\n$ sudo su - postgres\n$ psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a\nfinding.\n\nIf disk or filesystem requires encryption, ask the system owner, DBA, and SA to\ndemonstrate filesystem or disk level encryption.\n\nIf this is required and is not found, this is a finding.",
            "fix": "Configure PostgreSQL, operating system/file system, and additional\nsoftware as relevant, to provide the required level of cryptographic protection.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See\nsupplementary content APPENDIX-E for documentation on installing pgcrypto.\n\nWith pgcrypto installed, it's possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('a_secure_password',\ngen_salt('md5')));"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73003.rb",
            "line": 45
          },
          "id": "V-73003"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  delete security objects occur.",
          "desc": "The removal of security objects from the database/PostgreSQL would\n  seriously degrade a system's information assurance posture. If such an action\n  is attempted, it must be logged.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000501-DB-000337",
            "gid": "V-72963",
            "rid": "SV-87615r1_rule",
            "stig_id": "PGS9-00-006300",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator, verify pgaudit is enabled by running the\n  following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Configure PostgreSQL to produce audit records when unsuccessful attempts to\n  delete security objects occur.\n  All errors and denials are logged if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72963.rb",
            "line": 46
          },
          "id": "V-72963"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  add privileges/permissions occur.",
          "desc": "Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n  In an SQL environment, adding permissions is typically done via the GRANT\n  command, or, in the negative, the REVOKE command.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000495-DB-000327",
            "gid": "V-72977",
            "rid": "SV-87629r1_rule",
            "stig_id": "PGS9-00-006900",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator (shown here as\n  \"postgres\"), create a role 'bob' and a test table by running the following\n  SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob; CREATE TABLE test(id INT)\"\n  Next, set current role to bob and attempt to modify privileges:\n  $ psql -c \"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\"\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  unsuccessful attempt was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  2016-07-14 18:12:23.208 EDT postgres postgres ERROR: permission denied for\n  relation test\n  2016-07-14 18:12:23.208 EDT postgres postgres STATEMENT: GRANT ALL PRIVILEGES\n  ON test TO bob;\n  If audit logs are not generated when unsuccessful attempts to add\n  privileges/permissions occur, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to add privileges occur.\n  All denials are logged by default if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72977.rb",
            "line": 46
          },
          "id": "V-72977"
        },
        {
          "title": "Database software, including PostgreSQL configuration files, must be\n  stored in dedicated directories separate from the host OS and other\n  applications.",
          "desc": "Once released as BOSH package software libraries can not be changed.\n        Any changes to the software libriaries can ONLY be done by creating and\n        deploying a new BOSH release. This is Software-Defined-Infrastructure",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000133-DB-000199",
            "gid": "V-72901",
            "rid": "SV-87553r1_rule",
            "stig_id": "PGS9-00-003300",
            "cci": "CCI-001499",
            "nist": [
              "CM-5 (6)",
              "Rev_4"
            ],
            "check": "Review the PostgreSQL software library directory and any\n  subdirectories.\n  If any non-PostgreSQL software directories exist on the disk directory,\n  examine or investigate their use. If any of the directories are used by other\n  applications, including third-party applications that use the PostgreSQL, this\n  is a finding.\n  Only applications that are required for the functioning and administration,\n  not use, of the PostgreSQL should be located in the same disk directory as\n  the PostgreSQL software libraries.\n  If other applications are located in the same directory as PostgreSQL, this\n  is a finding.",
            "fix": "Install all applications on directories separate from the\n  PostgreSQL software library directory. Relocate any directories or reinstall\n  other application software that currently shares the PostgreSQL software\n  library directory."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72901.rb",
            "line": 39
          },
          "id": "V-72901"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful accesses to\n  objects occur.",
          "desc": "Without tracking all or selected types of access to all or selected\n  objects (tables, views, procedures, functions, etc.), it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n  SELECT\n  INSERT\n  UPDATE\n  DROP\n  EXECUTE\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000507-DB-000357",
            "gid": "V-72951",
            "rid": "SV-87603r1_rule",
            "stig_id": "PGS9-00-005700",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), create a\n  schema, test_schema, create a table, test_table, within test_schema, and\n  insert a value:\n  $ sudo su - postgres\n  $ psql -c \"CREATE SCHEMA test_schema\"\n  $ psql -c \"CREATE TABLE test_schema.test_table(id INT)\"\n  $ psql -c \"INSERT INTO test_schema.test_table(id) VALUES (0)\"\n  Next, create a role 'bob' and attempt to SELECT, INSERT, UPDATE, and DROP from\n  the test table:\n  $ psql -c \"CREATE ROLE BOB\"\n  $ psql -c \"SELECT * FROM test_schema.test_table\"\n  $ psql -c \"INSERT INTO test_schema.test_table VALUES (0)\"\n  $ psql -c \"UPDATE test_schema.test_table SET id = 1 WHERE id = 0\"\n  $ psql -c \"DROP TABLE test_schema.test_table\"\n  $ psql -c \"DROP SCHEMA test_schema\"\n  Now, as the database administrator (shown here as \"postgres\"), review\n  PostgreSQL/database security and audit settings to verify that audit records\n  are created for unsuccessful attempts at the specified access to the specified\n  objects:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>2016-03-30 17:23:41.254 EDT postgres\n  postgres ERROR: permission denied for schema test_schema at character 15\n  2016-03-30 17:23:41.254 EDT postgres postgres STATEMENT: SELECT *\n  FROM test_schema.test_table;\n  2016-03-30 17:23:53.973 EDT postgres postgres ERROR: permission denied for\n  schema test_schema at character 13\n  2016-03-30 17:23:53.973 EDT postgres postgres STATEMENT: INSERT INTO\n  test_schema.test_table VALUES (0);\n2016-03-30 17:24:32.647 EDT postgres\n  postgres ERROR: permission denied for schema test_schema at character 8\n  2016-03-30 17:24:32.647 EDT postgres postgres STATEMENT:\n  UPDATE test_schema.test_table SET id = 1 WHERE id = 0;\n  2016-03-30 17:24:46.197 EDT postgres postgres ERROR: permission denied for\n  schema test_schema\n  2016-03-30 17:24:46.197 EDT postgres postgres STATEMENT: DROP\n  TABLE test_schema.test_table;\n  2016-03-30 17:24:51.582 EDT postgres postgres ERROR: must be owner of schema\n  test_schema\n  2016-03-30 17:24:51.582 EDT postgres postgres STATEMENT: DROP SCHEMA\n  test_schema;\n  If any of the above steps did not create audit records for SELECT, INSERT,\n  UPDATE, and DROP, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access objects occur.\n  All errors and denials are logged if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72951.rb",
            "line": 46
          },
          "id": "V-72951"
        },
        {
          "title": "PostgreSQL must enforce access restrictions associated with changes to the\nconfiguration of PostgreSQL or database(s).",
          "desc": "Failure to provide logical access restrictions associated with changes to\nconfiguration may have significant effects on the overall security of the system.\n\nWhen dealing with access restrictions pertaining to change control, it should be\nnoted that any changes to the hardware, software, and/or firmware components of the\ninformation system can potentially have significant effects on the overall security\nof the system.\n\nAccordingly, only qualified and authorized individuals should be allowed to obtain\naccess to system components for the purposes of initiating changes, including\nupgrades and modifications.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000380-DB-000360",
            "gid": "V-73017",
            "rid": "SV-87669r1_rule",
            "stig_id": "PGS9-00-009600",
            "cci": "CCI-001813",
            "nist": [
              "CM-5 (1)",
              "Rev_4"
            ],
            "check": "To list all the permissions of individual roles, as the database\nadministrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"\\du\n\nIf any role has SUPERUSER that should not, this is a finding.\n\nNext, list all the permissions of databases and schemas by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"\\l\"\n$ psql -c \"\\dn+\"\n\nIf any database or schema has update (\"W\") or create (\"C\") privileges and should\nnot, this is a finding.",
            "fix": "Configure PostgreSQL to enforce access restrictions associated with\nchanges to the configuration of PostgreSQL or database(s).\n\nUse ALTER ROLE to remove accesses from roles:\n\n$ psql -c \"ALTER ROLE <role_name> NOSUPERUSER\"\n\nUse REVOKE to remove privileges from databases and schemas:\n\n$ psql -c \"REVOKE ALL PRIVILEGES ON <table> FROM <role_name>;"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73017.rb",
            "line": 63
          },
          "id": "V-73017"
        },
        {
          "title": "PostgreSQL must produce audit records containing sufficient information\n  to establish where the events occurred.",
          "desc": "Information system auditing capability is critical for accurate forensic\n  analysis. Without establishing where events occurred, it is impossible to\n  establish, correlate, and investigate the events relating to an incident.\n  In order to compile an accurate risk assessment and provide forensic analysis,\n  it is essential for security personnel to know where events occurred, such as\n  application components, modules, session identifiers, filenames, host names,\n  and functionality.\n  Associating information about where the event occurred within the application\n  provides a means of investigating an attack; recognizing resource utilization\n  or capacity thresholds; or identifying an improperly configured application.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000097-DB-000041",
            "gid": "V-73123",
            "rid": "SV-87775r1_rule",
            "stig_id": "PGS9-00-007100",
            "cci": "CCI-000132",
            "nist": [
              "AU-3",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment variable.\n  See supplementary content APPENDIX-F for instructions on configuring PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), check the\n  current log_line_prefix setting by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_line_prefix\"\n\n  If log_line_prefix does not contain %m %u %d %s, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\n  See supplementary content APPENDIX-F for instructions on configuring PGDATA.\n  To check that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  First edit the postgresql.conf file as the database administrator (shown here\n  as \"postgres\"):\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n\n  Extra parameters can be added to the setting log_line_prefix to log application\n  related information:\n\n  # %a = application name\n  # %u = user name\n  # %d = database name\n  # %r = remote host and port\n  # %p = process ID\n  # %m = timestamp with milliseconds\n  # %i = command tag\n  # %s = session startup\n  # %e = SQL state\n\n  For example:\n  log_line_prefix = '<%m %a %u %d %r %p %i %e %s>’\n\n  Now, as the system administrator, reload the server with the new configuration:\n\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73123.rb",
            "line": 104
          },
          "id": "V-73123"
        },
        {
          "title": "PostgreSQL must generate audit records when categorized information\n  (e.g., classification levels/security levels) is modified.",
          "desc": "Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000498-DB-000346",
            "gid": "V-72973",
            "rid": "SV-87625r1_rule",
            "stig_id": "PGS9-00-006700",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "If category tracking is not required in the database, this is\n  not applicable.\n  First, as the database administrator, verify pgaudit is enabled by running the\n  following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring P\n  GDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72973.rb",
            "line": 45
          },
          "id": "V-72973"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  retrieve privileges/permissions occur.",
          "desc": "Under some circumstances, it may be useful to monitor who/what is\n  reading privilege/permission/role information. Therefore, it must be possible\n  to configure auditing to do this. PostgreSQLs typically make such information\n  available through views or functions.\n  This requirement addresses explicit requests for privilege/permission/role\n  membership information. It does not refer to the implicit retrieval of\n  privileges/permissions/role memberships that PostgreSQL continually performs\n  to determine if any and every action on the database is permitted.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000091-DB-000325",
            "gid": "V-72941",
            "rid": "SV-87593r1_rule",
            "stig_id": "PGS9-00-005300",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), create a\n  role 'bob' by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob\"\n  Next, attempt to retrieve information from the pg_authid table:\n  $ psql -c \"SET ROLE bob; SELECT * FROM pg_authid\"\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  event was logged in pg_log:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-07-13 16:49:58.864 EDT postgres postgres ERROR: > permission denied for\n  relation pg_authid\n  < 2016-07-13 16:49:58.864 EDT postgres postgres STATEMENT: >\n  SELECT * FROM pg_authid;\n  If the above steps cannot verify that audit records are produced when\n  PostgreSQL denies retrieval of privileges/permissions/role memberships, this\n  is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access privileges occur.\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72941.rb",
            "line": 46
          },
          "id": "V-72941"
        },
        {
          "title": "PostgreSQL must integrate with an organization-level\n  authentication/access mechanism providing account management and automation\n  for all users, groups, roles, and any other principals.",
          "desc": "Crunchy DBaaS exclusively utilizes System Accounts which are negotiated\n        through the Service Broker interactions. Crunchy does not maintain any\n        user accounts.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000023-DB-000001",
            "gid": "V-72849",
            "rid": "SV-87501r1_rule",
            "stig_id": "PGS9-00-000500",
            "cci": "CCI-000015",
            "nist": [
              "AC-2 (1)",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  If all accounts are authenticated by the organization-level\n  authentication/access mechanism, such as LDAP or Kerberos and not by\n  PostgreSQL, this is not a finding.  As the database administrator (shown here\n  as \"postgres\"), review pg_hba.conf authentication file settings:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n\n  All records must use an auth-method of gss, sspi, or ldap. For details on the\n  specifics of these authentication methods see:\n  http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html\n\n  If there are any records with a different auth-method than gss, sspi, or ldap,\n  review the system documentation for justification and approval of these records.\n  If there are any records with a different auth-method than gss, sspi, or ldap,\n  that are not documented and approved, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  Integrate PostgreSQL security with an organization-level\n  authentication/access mechanism providing account management for all users,\n  groups, roles, and any other principals.  As the database administrator (shown\n  here as \"postgres\"), edit pg_hba.conf authentication file:\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n\n  For each PostgreSQL-managed account that is not documented and approved,\n  either transfer it to management by the external mechanism, or document the\n  need for it and obtain approval, as appropriate."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72849.rb",
            "line": 23
          },
          "id": "V-72849"
        },
        {
          "title": "PostgreSQL must check the validity of all data inputs except those\n  specifically identified by the organization.",
          "desc": "Application developers must follow Best Practices when developing Cloud\n        applications. Example: Checking the valid syntax and semantics of\n        information system inputs to ensure that SQL injections are not possible.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000251-DB-000160",
            "gid": "V-72871",
            "rid": "SV-87523r1_rule",
            "stig_id": "PGS9-00-001800",
            "cci": "CCI-001310",
            "nist": [
              "SI-10",
              "Rev_4"
            ],
            "check": "Review PostgreSQL code (trigger procedures, functions),\n  application code, settings, column and field definitions, and constraints to\n  determine whether the database is protected against invalid input.\n  If code exists that allows invalid data to be acted upon or input into the\n  database, this is a finding.\n\n  If column/field definitions do not exist in the database, this is a finding.\n  If columns/fields do not contain constraints and validity checking where\n  required, this is a finding.\n\n  Where a column/field is noted in the system documentation as necessarily\n  free-form, even though its name and context suggest that it should be strongly\n  typed and constrained, the absence of these protections is not a finding.\n  Where a column/field is clearly identified by name, caption or context as\n  Notes, Comments, Description, Text, etc., the absence of these protections is\n  not a finding.\n\n  Check application code that interacts with PostgreSQL for the use of prepared\n  statements. If prepared statements are not used, this is a finding.",
            "fix": "Modify database code to properly validate data before it is put\n  into the database or acted upon by the database.\n\n  Modify the database to contain constraints and validity checking on database\n  columns and tables that require them for data integrity.\n\n  Use prepared statements when taking user input.\n  \n  Do not allow general users direct console access to PostgreSQL."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72871.rb",
            "line": 23
          },
          "id": "V-72871"
        },
        {
          "title": "PostgreSQL must isolate security functions from non-security functions.",
          "desc": "An isolation boundary provides access control and protects the integrity\n  of the hardware, software, and firmware that perform security functions.\n  Security functions are the hardware, software, and/or firmware of the\n  information system responsible for enforcing the system security policy and\n  supporting the isolation of code and data on which the protection is based.\n  Developers and implementers can increase the assurance in security functions\n  by employing well-defined security policy models; structured, disciplined, and\n  rigorous hardware and software development techniques; and sound system/security\n  engineering principles.\n  Database Management Systems typically separate security functionality from\n  non-security functionality via separate databases or schemas. Database objects\n  or code implementing security functionality should not be commingled with\n  objects or code implementing application logic. When security and non-security\n  functionality are commingled, users who have access to non-security\n  functionality may be able to access security functionality.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000233-DB-000124",
            "gid": "V-72911",
            "rid": "SV-87563r1_rule",
            "stig_id": "PGS9-00-004000",
            "cci": "CCI-001084",
            "nist": [
              "SC-3",
              "Rev_4"
            ],
            "check": "Check PostgreSQL settings to determine whether objects or code\n  implementing security functionality are located in a separate security domain,\n  such as a separate database or schema created specifically for security\n  functionality.\n  By default, all objects in pg_catalog and information_schema are owned by the\n  database administrator.\n  To check the access controls for those schemas, as the database administrator\n  (shown here as \"postgres\"), run the following commands to review the access\n  privileges granted on the data dictionary and security tables, views,\n  sequences, functions and trigger procedures:\n  $ sudo su - postgres\n  $ psql -x -c \"\\dp pg_catalog.*\"\n  $ psql -x -c \"\\dp information_schema.*\"\n  Repeat the \\dp statements for any additional schemas that contain locally\n  defined security objects.\n\nRepeat using \\df+*.* to review ownership of\n  PostgreSQL functions:\n  $ sudo su - postgres\n  $ psql -x -c \"\\df+ pg_catalog.*\"\n  $ psql -x -c \"\\df+ information_schema.*\"\n  Refer to the PostgreSQL online documentation for GRANT for help in\n  interpreting the Access Privileges column in the output from \\du. Note that\n  an entry starting with an equals sign indicates privileges granted to Public\n  (all users). By default, most of the tables and views in the pg_catalog and\n  information_schema schemas can be read by Public.\n  If any user besides the database administrator(s) is listed in access\n  privileges and not documented, this is a finding.\n  If security-related database objects or code are not kept separate, this is a\n  finding.",
            "fix": "Do not locate security-related database objects with application\n  tables or schema.\n  Review any site-specific applications security modules built into the\n  database: determine what schema they are located in and take appropriate\n  action.\n  Do not grant access to pg_catalog or information_schema to anyone but the\n  database administrator(s). Access to the database administrator account(s)\n  must not be granted to anyone without official approval."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72911.rb",
            "line": 58
          },
          "id": "V-72911"
        },
        {
          "title": "The DBMS must be configured on a platform that has a NIST certified\n        FIPS 140-2 installation of OpenSSL.",
          "desc": "Postgres uses OpenSSL for the underlying encryption layer. Currently only\n        Red Hat Enterprise Linux is certified as a FIPS 140-2 distribution of\n        OpenSSL. For other operating systems, users must obtain or build their\n        own FIPS 140-2 OpenSSL libraries.",
          "impact": 0.7,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000179-DB-000114",
            "gid": "V-73071",
            "rid": "SV-87723r1_rule",
            "stig_id": "PGS9-00-012800",
            "cci": "CCI-000803",
            "nist": [
              "IA-7",
              "Rev_4"
            ],
            "check": "If the deployment incorporates a custom build of the operating\n      system and Postgres guaranteeing the use of FIPS 140-2 compliant OpenSSL,\n      this is not a finding.\n\n      If PostgreSQL is not installed on Red Hat Enterprise Linux (RHEL),\n      this is a finding.\n\n      If FIPS encryption is not enabled, this is a finding.",
            "fix": "Install Postgres with FIPS-compliant cryptography enabled on RHEL;\n      or by other means ensure that FIPS 140-2 certified OpenSSL libraries are\n      used by the DBMS."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73071.rb",
            "line": 27
          },
          "id": "V-73071"
        },
        {
          "title": "Database objects (including but not limited to tables, indexes,\n  storage, trigger procedures, functions, links to software external to\n  PostgreSQL, etc.) must be owned by database/DBMS principals authorized for\n  ownership.",
          "desc": "Within the database, object ownership implies full privileges to the\n  owned object, including the privilege to assign access to the owned objects\n  to other subjects. Database functions and procedures can be coded using\n  definer's rights. This allows anyone who utilizes the object to perform the\n  actions if they were the owner. If not properly managed, this can lead to\n  privileged actions being taken by unauthorized individuals.\n  Conversely, if critical tables or other objects rely on unauthorized owner\n  accounts, these objects may be lost when an account is removed.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000133-DB-000200",
            "gid": "V-72897",
            "rid": "SV-87549r1_rule",
            "stig_id": "PGS9-00-003100",
            "cci": "CCI-001499",
            "nist": [
              "CM-5 (6)",
              "Rev_4"
            ],
            "check": "Review system documentation to identify accounts authorized to\n  own database objects. Review accounts that own objects in the database(s).\n  If any database objects are found to be owned by users not authorized to own\n  database objects, this is a finding.\n  To check the ownership of objects in the database, as the database\n  administrator, run the following SQL:\n  $ sudo su - postgres\n  $ psql -x -c \"\\dn *.*\"\n  $ psql -x -c \"\\dt *.*\"\n  $ psql -x -c \"\\ds *.*\"\n  $ psql -x -c \"\\dv *.*\"\n  $ psql -x -c \"\\df+ *.*\"\n  If any object is not owned by an authorized role for ownership, this is a\n  finding.",
            "fix": "Assign ownership of authorized objects to authorized object owner\n  accounts.\n  #### Schema Owner\n  To create a schema owned by the user bob, run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE SCHEMA test AUTHORIZATION bob\n  To alter the ownership of an existing object to be owned by the user bob,\n  run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"ALTER SCHEMA test OWNER TO bob\""
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72897.rb",
            "line": 57
          },
          "id": "V-72897"
        },
        {
          "title": "PostgreSQL must associate organization-defined types of security labels\nhaving organization-defined security label values with information in process.",
          "desc": "It is ISO responsibility to utilize PostgreSQL RLS capabilities. No\n        security labeling requirements have been specified.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000313-DB-000309",
            "gid": "V-73013",
            "rid": "SV-87665r1_rule",
            "stig_id": "PGS9-00-009400",
            "cci": "CCI-002263",
            "nist": [
              "AC-16 a",
              "Rev_4"
            ],
            "check": "If security labeling is not required, this is not a finding.\n\nFirst, as the database administrator (shown here as \"postgres\"), run the following\nSQL against each table that requires security labels:\n\n$ sudo su - postgres\n$ psql -c \"\\d+ <schema_name>.<table_name>\"\n\nIf security labeling requirements have been specified, but the security labeling is\nnot implemented or does not reliably maintain labels on information in process, this\nis a finding.",
            "fix": "In addition to the SQL-standard privilege system available through\nGRANT, tables can have row security policies that restrict, on a per-user basis,\nwhich rows can be returned by normal queries or inserted, updated, or deleted by\ndata modification commands. This feature is also known as Row-Level Security (RLS).\n\nRLS policies can be very different depending on their use case. For one example of\nusing RLS for Security Labels, see supplementary content APPENDIX-D."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73013.rb",
            "line": 23
          },
          "id": "V-73013"
        },
        {
          "title": "Execution of software modules (to include functions and trigger\n  procedures) with elevated privileges must be restricted to necessary cases\n  only.",
          "desc": "Out of the Box DBaaS does not grant System Users access to privileged\n        (Administration) functions. The System Accounts provided to consumers of\n        the Crunchy DBaaS do not have access to privileged (Administration)\n        functions. Those functions are only available to the internal admin\n        DBaaS Roles, and can only be executed by Platform Admins or via authorized\n        Service Broker interactions. Crunchy will not grant Superuser priviledges\n        to ANY Information System User residing on the Shared PostgreSQL Cluster.\n        A Dedicated service plan must be requested if Superuser functionality is\n        required by the Infromation System (aproval required)",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000342-DB-000302",
            "gid": "V-72905",
            "rid": "SV-87557r1_rule",
            "stig_id": "PGS9-00-003600",
            "cci": "CCI-002233",
            "nist": [
              "AC-6 (8)",
              "Rev_4"
            ],
            "check": "Functions in PostgreSQL can be created with the SECURITY\n  DEFINER option. When SECURITY DEFINER functions are executed by a user, said\n  function is run with the privileges of the user who created it.\n  To list all functions that have SECURITY DEFINER, as, the database\n  administrator (shown here as \"postgres\"), run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SELECT nspname, proname, proargtypes, prosecdef, rolname,\n  proconfig FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid JOIN\n  pg_authid a ON a.oid = p.proowner WHERE prosecdef OR NOT proconfig IS NULL;\"\n  In the query results, a prosecdef value of \"t\" on a row indicates that that\n  function uses privilege elevation.\n  If elevation of PostgreSQL privileges is utilized but not documented, this is\n  a finding.\n  If elevation of PostgreSQL privileges is documented, but not implemented as\n  described in the documentation, this is a finding.\n  If the privilege-elevation logic can be invoked in ways other than intended,\n  or in contexts other than intended, or by subjects/principals other than\n  intended, this is a finding.",
            "fix": "Determine where, when, how, and by what principals/subjects\n  elevated privilege is needed.\n  To change a SECURITY DEFINER function to SECURITY INVOKER, as the database\n  administrator (shown here as \"postgres\"), run the following SQL:  $ sudo su - postgres\n  $ psql -c \"ALTER FUNCTION <function_name> SECURITY INVOKER;\""
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72905.rb",
            "line": 39
          },
          "id": "V-72905"
        },
        {
          "title": "PostgreSQL must protect the confidentiality and integrity of all\ninformation at rest.",
          "desc": "This control is intended to address the confidentiality and integrity of\ninformation at rest in non-mobile devices and covers user information and system\ninformation. Information at rest refers to the state of information when it is\nlocated on a secondary storage device (e.g., disk drive, tape drive) within an\norganizational information system. Applications and application users generate\ninformation throughout the course of their application use.\n\nUser data generated, as well as application-specific configuration data, needs to be\nprotected. Organizations may choose to employ different mechanisms to achieve\nconfidentiality and integrity protections, as appropriate.\n\nIf the confidentiality and integrity of application data is not protected, the data\nwill be open to compromise and unauthorized modification.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000231-DB-000154",
            "gid": "V-72995",
            "rid": "SV-87647r1_rule",
            "stig_id": "PGS9-00-008300",
            "cci": "CCI-001199",
            "nist": [
              "SC-28",
              "Rev_4"
            ],
            "check": "One possible way to encrypt data within PostgreSQL is to use the\npgcrypto extension.\n\nTo check if pgcrypto is installed on PostgreSQL, as a database administrator (shown\nhere as \"postgres\"), run the following command:\n\n$ sudo su - postgres\n$ psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a\nfinding.\n\nIf disk or filesystem requires encryption, ask the system owner, DBA, and SA to\ndemonstrate the use of disk-level encryption. If this is required and is not found,\nthis is a finding.\n\nIf controls do not exist or are not enabled, this is a finding.",
            "fix": "Apply appropriate controls to protect the confidentiality and\nintegrity of data at rest in the database.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See\nsupplementary content APPENDIX-E for documentation on installing pgcrypto.\n\nWith pgcrypto installed, it is possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('a_secure_password',\ngen_salt('xdes')));"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72995.rb",
            "line": 46
          },
          "id": "V-72995"
        },
        {
          "title": "PostgreSQL must automatically terminate a user session after\norganization-defined conditions or trigger events requiring session disconnect.",
          "desc": "Crunchy DBaaS exclusively utilizes System Accounts which are negotiated\n        through the Service Broker interactions. Crunchy does not maintain any\n        user accounts and therefore is not responsible for terminating user-initiated\n        logical sessions",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000295-DB-000305",
            "gid": "V-73051",
            "rid": "SV-87703r1_rule",
            "stig_id": "PGS9-00-011600",
            "cci": "CCI-002361",
            "nist": [
              "AC-12",
              "Rev_4"
            ],
            "check": "Review system documentation to obtain the organization's definition\nof circumstances requiring automatic session termination. If the documentation\nexplicitly states that such termination is not required or is prohibited, this is\nnot a finding.\n\nIf the documentation requires automatic session termination, but PostgreSQL is not\nconfigured accordingly, this is a finding.",
            "fix": "Configure PostgreSQL to automatically terminate a user session after\norganization-defined conditions or trigger events requiring session termination.\n\nExamples follow.\n\n### Change a role to nologin and disconnect the user\n\nALTER ROLE '<username>' NOLOGIN;\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE username='<username>';\n\n### Disconnecting users during a specific time range\nSee supplementary content APPENDIX-A for a bash script for this example.\n\nThe script found in APPENDIX-A using the -l command can disable all users with\nrolcanlogin=t from logging in. The script keeps track of who it disables in a\n.restore_login file. After the specified time is over, the same script can be run\nwith the -r command to restore all login connections.\n\nThis script would be added to a cron job:\n\n# lock at 5 am every day of the week, month, year at the 0 minute mark.\n0 5 * * * postgres /var/lib/pgsql/no_login.sh -d postgres -l\n# restore at 5 pm every day of the week, month, year at the 0 minute mark.\n0 17 * * * postgres /var/lib/pgsql/no_login.sh -d postgres -r"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73051.rb",
            "line": 23
          },
          "id": "V-73051"
        },
        {
          "title": "PostgreSQL must be able to generate audit records when\n  privileges/permissions are retrieved.",
          "desc": "Under some circumstances, it may be useful to monitor who/what is\n  reading privilege/permission/role information. Therefore, it must be possible\n  to configure auditing to do this. PostgreSQLs typically make such information\n  available through views or functions.\n  This requirement addresses explicit requests for privilege/permission/role\n  membership information. It does not refer to the implicit retrieval of\n  privileges/permissions/role memberships that PostgreSQL continually performs\n  to determine if any and every action on the database is permitted.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000091-DB-000066",
            "gid": "V-72947",
            "rid": "SV-87599r1_rule",
            "stig_id": "PGS9-00-005500",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), check if\n  pgaudit is enabled by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If pgaudit is not found in the results, this is a finding.\n  Next, as the database administrator (shown here as \"postgres\"), list all\n  role memberships for the database:\n  $ sudo su - postgres\n$ psql -c \"\\du\"\n  Next, verify the query was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-01-28 19:43:12.126 UTC postgres postgres: >LOG: AUDIT:\n  SESSION,1,1,READ,SELECT,,,\"SELECT r.rolname, r.rolsuper, r.rolinherit,\n  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,\n  r.rolconnlimit, r.rolvaliduntil,\n  ARRAY(SELECT b.rolname\n  FROM pg_catalog.pg_auth_members m\n  JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)\n  WHERE m.member = r.oid) as memberof\n  , r.rolreplication\n  , r.rolbypassrls\n  FROM pg_catalog.pg_roles r\n  ORDER BY 1;\",<none>\n  If audit records are not produced, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log_catalog = 'on'\n  pgaudit.log = 'read'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72947.rb",
            "line": 46
          },
          "id": "V-72947"
        },
        {
          "title": "When invalid inputs are received, PostgreSQL must behave in a\n  predictable and documented manner that reflects organizational and system\n  objectives.",
          "desc": "A common vulnerability is unplanned behavior when invalid inputs are\n  received. This requirement guards against adverse or unintended system\n  behavior caused by invalid inputs, where information system responses to the\n  invalid input may be disruptive or cause the system to fail into an unsafe\n  state.\n  The behavior will be derived from the organizational and system requirements\n  and includes, but is not limited to, notification of the appropriate\n  personnel, creating an audit record, and rejecting invalid input.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000447-DB-000393",
            "gid": "V-72907",
            "rid": "SV-87559r1_rule",
            "stig_id": "PGS9-00-003700",
            "cci": "CCI-002754",
            "nist": [
              "SI-10 (3)",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), make\n  a small SQL syntax error in psql by running the following:\n  $ sudo su - postgres\n  $ psql -c \"CREAT TABLEincorrect_syntax(id INT)\"\n  ERROR: syntax error at or near \"CREAT\"\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  syntax error was logged (change the log file name and part to suit the\n  circumstances):\n  $ sudo su - postgres\n  $ cat ~/9.5/data/pg_log/postgresql-Wed.log\n  2016-03-30 16:18:10.772 EDT postgres postgres 5706bb87.90dERROR: syntax error\n  at or near \"CRT\" at character 1\n  2016-03-30 16:18:10.772 EDT postgres postgres 5706bb87.90dSTATEMENT: CRT TABLE\n  incorrect_syntax(id INT);\n  Review system documentation to determine how input errors from application to\n  PostgreSQL are to be handled in general and if any special handling is defined\n  for specific circumstances.\n  If it does not implement the documented behavior, this is a finding.",
            "fix": "Enable logging.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  All errors and denials are logged if logging is enabled."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72907.rb",
            "line": 45
          },
          "id": "V-72907"
        },
        {
          "title": "PostgreSQL must require users to reauthenticate when organization-defined\ncircumstances or situations require reauthentication.",
          "desc": "Crunchy DBaaS exclusively utilizes System Accounts which are negotiated\n        through the Service Broker interactions. Crunchy does not maintain any\n        user accounts.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000389-DB-000372",
            "gid": "V-73027",
            "rid": "SV-87679r1_rule",
            "stig_id": "PGS9-00-010100",
            "cci": "CCI-002038",
            "nist": [
              "IA-11",
              "Rev_4"
            ],
            "check": "Determine all situations where a user must re-authenticate. Check if\nthe mechanisms that handle such situations use the following SQL:\n\nTo make a single user re-authenticate, the following must be present:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\n\nTo make all users re-authenticate, run the following:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'\n\nIf the provided SQL does not force re-authentication, this is a finding.",
            "fix": "Modify and/or configure PostgreSQL and related applications and tools\nso that users are always required to reauthenticate when changing role or escalating\nprivileges.\n\nTo make a single user re-authenticate, the following must be present:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\n\nTo make all users re-authenticate, the following must be present:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73027.rb",
            "line": 23
          },
          "id": "V-73027"
        },
        {
          "title": "PostgreSQL must generate audit records when privileges/permissions are\n  deleted.",
          "desc": "Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n  In an SQL environment, deleting permissions is typically done via the REVOKE\n  command.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000499-DB-000330",
            "gid": "V-72959",
            "rid": "SV-87611r1_rule",
            "stig_id": "PGS9-00-006100",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'role'\n  Now, as the system administrator, reload the server with the new\n  configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72959.rb",
            "line": 46
          },
          "id": "V-72959"
        },
        {
          "title": "PostgreSQL must protect against a user falsely repudiating having performed\norganization-defined actions.",
          "desc": "Non-repudiation of actions taken is required in order to maintain data\nintegrity. Examples of particular actions taken by individuals include creating\ninformation, sending a message, approving information (e.g., indicating concurrence\nor signing a contract), and receiving a message.\n\nNon-repudiation protects against later claims by a user of not having created,\nmodified, or deleted a particular data item or collection of data in the database.\n\nIn designing a database, the organization must define the types of data and the user\nactions that must be protected from repudiation. The implementation must then\ninclude building audit features into the application data tables, and configuring\nPostgreSQL' audit tools to capture the necessary audit trail. Design and\nimplementation also must ensure that applications pass individual user\nidentification to PostgreSQL, even where the application connects to PostgreSQL with\na standard, shared account.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000080-DB-000063",
            "gid": "V-73019",
            "rid": "SV-87671r1_rule",
            "stig_id": "PGS9-00-009700",
            "cci": "CCI-000166",
            "nist": [
              "AU-10",
              "Rev_4"
            ],
            "check": "First, as the database administrator, review the current\nlog_line_prefix settings by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_line_prefix\"\n\nIf log_line_prefix does not contain at least '< %m %a %u %d %r %p %m >', this is a\nfinding.\n\nNext, review the current shared_preload_libraries' settings by running the following\nSQL:\n\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf shared_preload_libraries does not contain \"pgaudit\", this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nConfigure the database to supply additional auditing information to protect against\na user falsely repudiating having performed organization-defined actions.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See\nsupplementary content APPENDIX-B for documentation on installing pgaudit.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nModify the configuration of audit logs to include details identifying the individual\nuser:\n\nFirst, as the database administrator (shown here as \"postgres\"), edit\npostgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nExtra parameters can be added to the setting log_line_prefix to identify the user:\n\nlog_line_prefix = '< %m %a %u %d %r %p %m >'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\nUse accounts assigned to individual users. Where the application connects to\nPostgreSQL using a standard, shared account, ensure that it also captures the\nindividual user identification and passes it to PostgreSQL."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73019.rb",
            "line": 45
          },
          "id": "V-73019"
        },
        {
          "title": "PostgreSQL must protect its audit features from unauthorized access.",
          "desc": "Protecting audit data also includes identifying and protecting the tools\nused to view and manipulate log data.\n\nDepending upon the log format and application, system and application log tools may\nprovide the only means to manipulate and manage application and system log data. It\nis, therefore, imperative that access to audit tools be controlled and protected\nfrom unauthorized access.\n\nApplications providing tools to interface with audit data will leverage user\npermissions and roles identifying the user accessing the tools and the corresponding\nrights the user enjoys in order make access decisions regarding the access to audit\ntools.\n\nAudit tools include, but are not limited to, OS-provided audit tools,\nvendor-provided audit tools, and open source audit tools needed to successfully view\nand manipulate audit information system activity and records.\n\nIf an attacker were to gain access to audit tools, he could analyze audit logs for\nsystem weaknesses or weaknesses in the auditing itself. An attacker could also\nmanipulate logs to hide evidence of malicious activity.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000121-DB-000202",
            "gid": "V-73039",
            "rid": "SV-87691r1_rule",
            "stig_id": "PGS9-00-010700",
            "cci": "CCI-001493",
            "nist": [
              "AU-9",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\nvariable. See supplementary content APPENDIX-F for instructions on configuring\nPGDATA. Only the database owner and superuser can alter configuration of PostgreSQL.\n\nMake sure the pg_log directory are owned by postgres user and group:\n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}/pg_log\n\nIf pg_log is not owned by the database owner, this is a finding.\n\nMake sure the data directory are owned by postgres user and group.\n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}\n\nIf PGDATA is not owned by the database owner, this is a finding.\n\nMake sure pgaudit installation is owned by root:\n\n$ sudo su - postgres\n$ ls -la /usr/pgsql-9.5/share/contrib/pgaudit\n\nIf pgaudit installation is not owned by root, this is a finding.\n\nNext, as the database administrator (shown here as \"postgres\"), run the following\nSQL to list all roles and their privileges:\n\n$ sudo su - postgres\n$ psql -x -c \"\\du\"\n\nIf any role has \"superuser\" that should not, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nIf pg_log or data directory are not owned by postgres user and group, configure them\nas follows:\n\n$ sudo chown -R postgres:postgres ${PGDATA?}\n\nIf the pgaudit installation is not owned by root user and group, configure it as\nfollows:\n\n$ sudo chown -R root:root /usr/pgsql-9.5/share/contrib/pgaudit.\n\nTo remove superuser from a role, as the database administrator (shown here as\n\"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"ALTER ROLE <role-name> WITH NOSUPERUSER\""
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73039.rb",
            "line": 87
          },
          "id": "V-73039"
        },
        {
          "title": "PostgreSQL, when utilizing PKI-based authentication, must validate\n  certificates by performing RFC 5280-compliant certification path validation.",
          "desc": "The DoD standard for authentication is DoD-approved PKI certificates.\n  A certificate’s certification path is the path from the end entity certificate\n  to a trusted root certification authority (CA). Certification path validation\n  is necessary for a relying party to make an informed decision regarding\n  acceptance of an end entity certificate. Certification path validation\n  includes checks such as certificate issuer trust, time validity and revocation\n  status for each certificate in the certification path. Revocation status\n  information for CA and subject certificates in a certification path is\n  commonly provided via certificate revocation lists (CRLs) or online\n  certificate status protocol (OCSP) responses.\n  Database Management Systems that do not validate certificates by performing\n  RFC 5280-compliant certification path validation are in danger of accepting\n  certificates that are invalid and/or counterfeit. This could allow unauthorized\n  access to the database.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000175-DB-000067",
            "gid": "V-72979",
            "rid": "SV-87631r1_rule",
            "stig_id": "PGS9-00-007000",
            "cci": "CCI-000185",
            "nist": [
              "IA-5 (2) (a)",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To verify that a CRL file exists, as the database administrator (shown here as\n  \"postgres\"), run the following:\n  $ sudo su - postgres\n  $ psql -c \"SHOW ssl_crl_file\"\n  If this is not set to a CRL file, this is a finding.\n  Next verify the existence of the CRL file by checking the directory set in\n  postgresql.conf in the ssl_crl_file parameter from above:\n  Note: If no directory is specified, then the CRL file should be located in the\n  same directory as postgresql.conf (PGDATA).\n  If the CRL file does not exist, this is a finding.\n  Next, verify that hostssl entries in pg_hba.conf have \"cert\" and\n  \"clientcert=1\" enabled:\n  $ sudo su - postgres\n  $ grep hostssl ${PGDATA?}/postgresql.conf\n  If hostssl entries does not contain cert or clientcert=1, this is a finding.\n  If certificates are not being validated by performing RFC 5280-compliant\n  certification path validation, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To configure PostgreSQL to use SSL, see supplementary content APPENDIX-G.\n  To generate a Certificate Revocation List, see the official Red Hat\n  Documentation:\n  https://access.redhat.com/documentation/en-US/Red_Hat_Update_Infrastructure/\n  2.1/html/Administration_Guide/chap-Red_Hat_Update_Infrastructure-\n  Administration_Guide-Certification_Revocation_List_CRL.html\n  As the database administrator (shown here as \"postgres\"), copy the CRL file\n  into the data directory:\n  First, as the system administrator, copy the CRL file into the PostgreSQL Data\n  Directory:\n  $ sudo cp root.crl ${PGDATA?}/root.crl\n  As the database administrator (shown here as \"postgres\"), set the\n  ssl_crl_file parameter to the filename of the CRL:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  ssl_crl_file = 'root.crl'\n  Next, in pg_hba.conf, require ssl authentication:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n  hostssl <database> <user> <address> cert clientcert=1\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72979.rb",
            "line": 52
          },
          "id": "V-72979"
        },
        {
          "title": "PostgreSQL must generate audit records for all privileged activities or\n  other system-level access.",
          "desc": "Without tracking privileged activity, it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n  System documentation should include a definition of the functionality\n  considered privileged.\n  A privileged function in this context is any operation that modifies the\n  structure of the database, its built-in logic, or its security settings.\n  This would include all Data Definition Language (DDL) statements and all\n  security-related statements. In an SQL environment, it encompasses, but is not\n  necessarily limited to:\n  CREATE\n  ALTER\n  DROP\n  GRANT\n  REVOKE\n  There may also be Data Manipulation Language (DML) statements that, subject to\n  context, should be regarded as privileged. Possible examples in SQL include:\n  TRUNCATE TABLE;DELETE, or DELETE affecting more than n rows, for some n, or\n  DELETE without a WHERE clause;\n  UPDATE or UPDATE affecting more than n rows, for some n, or UPDATE without a\n  WHERE clause;\n  any SELECT, INSERT, UPDATE, or DELETE to an application-defined security table\n  executed by other than a security principal.\n  Depending on the capabilities of PostgreSQL and the design of the database and\n  associated applications, audit logging may be achieved by means of DBMS\n  auditing features, database triggers, other mechanisms, or a combination of\n  these.\n  Note: That it is particularly important to audit, and tightly control, any\n  action that weakens the implementation of this requirement itself, since the\n  objective is to have a complete audit trail of all administrative activity.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000504-DB-000354",
            "gid": "V-72953",
            "rid": "SV-87605r1_rule",
            "stig_id": "PGS9-00-005800",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  shared_preload_libraries = ‘pgaudit’\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72953.rb",
            "line": 46
          },
          "id": "V-72953"
        },
        {
          "title": "The audit information produced by PostgreSQL must be protected from\n  unauthorized deletion.",
          "desc": "If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is impossible to achieve.\n  To ensure the veracity of audit data, the information system and/or the\n  application must protect audit information from unauthorized deletion. This\n  requirement can be achieved through multiple methods which will depend upon\n  system architecture and design.\n  Some commonly employed methods include: ensuring log files enjoy the proper\n  file system permissions utilizing file system protections; restricting access;\n  and backing up log data to ensure log data is retained.\n  Applications providing a user interface to audit data will leverage user\n  permissions and roles identifying the user accessing the data and the\n  corresponding rights the user enjoys in order make access decisions regarding\n  the deletion of audit data.\n  Audit information includes all information (e.g., audit records, audit\n  settings, and audit reports) needed to successfully audit information system\n  activity.\n  Deletion of database audit data could mask the theft of, or the unauthorized\n  modification of, sensitive data stored in the database.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000120-DB-000061",
            "gid": "V-72885",
            "rid": "SV-87537r1_rule",
            "stig_id": "PGS9-00-002300",
            "cci": "CCI-000164",
            "nist": [
              "AU-9",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Review locations of audit logs, both internal to the database and database\n  audit logs located at the operating system level.\n  Verify there are appropriate controls and permissions to protect the audit\n  information from unauthorized modification.\n  #### stderr Logging\n  If the PostgreSQL server is configured to use stderr for logging, the logs\n  will be owned by the database administrator (shown here as \"postgres\") with\n  a default permissions level of 0600. The permissions can be configured in\n  postgresql.conf.\n  To check the permissions for log files in postgresql.conf, as the database\n  administrator (shown here as \"postgres\"), run the following command:\n\n  $ sudo su - postgres\n  $ grep \"log_file_mode\" ${PGDATA?}/postgresql.conf\n\n  If the permissions are not 0600, this is a finding.\n\n  Next, navigate to where the logs are stored. This can be found by running the\n  following command against postgresql.conf as the database administrator (shown\n  here as \"postgres\"):\n\n  $ sudo su - postgres\n  $ grep \"log_directory\" ${PGDATA?}/postgresql.conf\n\n  With the log directory identified, as the database administrator (shown here\n  as \"postgres\"), list the permissions of the logs:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}/pg_log\n\n  If logs are not owned by the database administrator (shown here as\n  \"postgres\") and are not the same permissions as configured in\n  postgresql.conf, this is a finding.\n  \n  #### syslog Logging\n  If the PostgreSQL server is configured to use syslog for logging, consult the\n  organizations syslog setting for permissions and ownership of logs.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  By default, the database administrator account is not accessible by\n  unauthorized users. Only grant access to this account if required for operations.\n  #### stderr Logging\n  By default, the database administrator account is not accessible by\n  unauthorized users. Only grant access to this account if required for\n  operations.\n  With stderr logging enabled, as the database administrator (shown here as\n  \"postgres\"), set the following parameter in postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_file_mode = 0600\n  #### syslog Logging\n  Check with the organization to see how syslog facilities are defined in their\n  organization."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72885.rb",
            "line": 69
          },
          "id": "V-72885"
        },
        {
          "title": "PostgreSQL must maintain the confidentiality and integrity of\n  information during reception.",
          "desc": "Information can be either unintentionally or maliciously disclosed or\n  modified during reception, including, for example, during aggregation, at\n  protocol transformation points, and during packing/unpacking. These\n  unauthorized disclosures or modifications compromise the confidentiality or\n  integrity of the information.\n  This requirement applies only to those applications that are either\n  distributed or can allow access to data nonlocally. Use of this requirement\n  will be limited to situations where the data owner has a strict requirement\n  for ensuring data integrity and confidentiality is maintained at every step of\n  the data transfer and handling process.\n  When receiving data, PostgreSQL, associated applications, and infrastructure\n  must leverage protection mechanisms.\n  PostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c; while the name\n  is misleading, this function enables only TLS encryption methods, not SSL.\n  See OpenSSL: https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.htm.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000442-DB-000379",
            "gid": "V-72895",
            "rid": "SV-87547r1_rule",
            "stig_id": "PGS9-00-003000",
            "cci": "CCI-002422",
            "nist": [
              "SC-8 (2)",
              "Rev_4"
            ],
            "check": "If the data owner does not have a strict requirement for\n  ensuring data integrity and confidentiality is maintained at every step of the\n  data transfer and handling process, this is not a finding.\n\n  As the database administrator (shown here as \"postgres\"), verify SSL is\n  enabled in postgresql.conf by:\n\n  First, open the postgresql.conf file and ensure the ssl paramater is set to on:\n\n  $ vi <pg_conf_dir>/postgresql.conf\n  $ ssl = 'on'\n\n  is set and not commented out with a '#'.\n\n  Second, run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW ssl\"\n\n  If SSL is off, this is a finding.\n\n  If PostgreSQL, associated applications, and infrastructure do not employ\n  protective measures against unauthorized disclosure and modification during\n  reception, this is a finding.",
            "fix": "Implement protective measures against unauthorized disclosure and\n  modification during reception.\n  To configure PostgreSQL to use SSL, see supplementary content APPENDIX-G for\n  instructions on enabling SSL."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72895.rb",
            "line": 45
          },
          "id": "V-72895"
        },
        {
          "title": "PostgreSQL must produce audit records containing sufficient information to\nestablish what type of events occurred.",
          "desc": "Information system auditing capability is critical for accurate forensic\nanalysis. Without establishing what type of event occurred, it would be difficult to\nestablish, correlate, and investigate the events relating to an incident or identify\nthose responsible for one.\n\nAudit record content that may be necessary to satisfy the requirement of this policy\nincludes, for example, time stamps, user/process identifiers, event descriptions,\nsuccess/fail indications, filenames involved, and access control or flow control\nrules invoked.\n\nAssociating event types with detected events in the application and audit logs\nprovides a means of investigating an attack; recognizing resource utilization or\ncapacity thresholds; or identifying an improperly configured application.\n\nDatabase software is capable of a range of actions on data stored within the\ndatabase. It is important, for accurate forensic analysis, to know exactly what\nactions were performed. This requires specific information regarding the event type\nan audit record is referring to. If event type information is not recorded and\nstored with the audit record, the record itself is of very limited use.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000095-DB-000039",
            "gid": "V-73033",
            "rid": "SV-87685r1_rule",
            "stig_id": "PGS9-00-010400",
            "cci": "CCI-000130",
            "nist": [
              "AU-3",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), verify\nthe current log_line_prefix setting in postgresql.conf:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_line_prefix\"\n\nVerify that the current settings are appropriate for the organization.\n\nThe following is what is possible for logged information:\n\n# %a = application name\n# %u = user name\n# %d = database name\n# %r = remote host and port\n# %h = remote host\n# %p = process ID\n# %t = timestamp without milliseconds\n# %m = timestamp with milliseconds\n# %i = command tag\n# %e = SQL state\n# %c = session ID\n# %l = session line number\n# %s = session start timestamp\n# %v = virtual transaction ID\n# %x = transaction ID (0 if none)\n# %q = stop here in non-session\n# processes\n\nIf the audit record does not log events required by the organization, this is a\nfinding.\n\nNext, verify the current settings of log_connections and log_disconnections by\nrunning the following SQL:\n\n$ psql -c \"SHOW log_connections\"\n$ psql -c \"SHOW log_disconnections\"\n\nIf both settings are off, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nIf logging is enabled the following configurations must be made to log connections,\ndate/time, username and session identifier.\n\nFirst, edit the postgresql.conf file as a privileged user:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nEdit the following parameters based on the organization's needs (minimum\nrequirements are as follows):\n\nlog_connections = on\nlog_disconnections = on\nlog_line_prefix = '< %m %u %d %c: >'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73033.rb",
            "line": 51
          },
          "id": "V-73033"
        },
        {
          "title": "PostgreSQL must generate audit records when successful logons or\n  connections occur.",
          "desc": "For completeness of forensic analysis, it is necessary to track\n  who/what (a user or other principal) logs on to PostgreSQL.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000503-DB-000350",
            "gid": "V-72933",
            "rid": "SV-87585r1_rule",
            "stig_id": "PGS9-00-005100",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), check if\n  log_connections is enabled by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_connections\"\n  If log_connections is off, this is a finding.\n  Next, verify the logs that the previous connection to the database was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-02-16 15:54:03.934 EST postgres postgres 56c64b8b.aeb: >LOG: connection\n  authorized: user=postgres database=postgres\n  If an audit record is not generated each time a user (or other principal) logs\n  on or connects to PostgreSQL, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  If logging is enabled the following configurations must be made to log\n  connections, date/time, username, and session identifier.\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Edit the following parameters as such:\n  log_connections = on\n  log_line_prefix = '< %m %u %d %c: >'\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %d is the database\n  * %c is the session ID for the connection\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72933.rb",
            "line": 46
          },
          "id": "V-72933"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  access security objects occur.",
          "desc": "Changes to the security configuration must be tracked.\n  This requirement applies to situations where security data is retrieved or\n  modified via data manipulation operations, as opposed to via specialized\n  security functionality.\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n  SELECT\n  INSERT\n  UPDATE\n  DELETE\n  EXECUTE\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000492-DB-000333",
            "gid": "V-72921",
            "rid": "SV-87573r1_rule",
            "stig_id": "PGS9-00-004500",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), setup a\n  test schema and revoke users privileges from using it by running the following\n  SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE SCHEMA stig_test_schema AUTHORIZATION postgres\"\n  $ psql -c \"REVOKE ALL ON SCHEMA stig_test_schema FROM public\"\n  $ psql -c \"GRANT ALL ON SCHEMA stig_test_schema TO postgres\"\n  Next, create a test table, insert a value into that table for the following\n  checks by running the following SQL:\n  $ psql -c \"CREATE TABLE stig_test_schema.stig_test_table(id INT)\"\n  $ psql -c \"INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0)\"\n  #### CREATE\nAttempt to CREATE a table in the stig_test_schema schema with a\n  role that does not have privileges by running the following SQL:\n  psql -c \"CREATE ROLE bob; SET ROLE bob; CREATE TABLE\n  stig_test_schema.test_table(id INT);\"\n  ERROR: permission denied for schema stig_test_schema\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 09:55:19.423 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 14\n  < 2016-03-09 09:55:19.423 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  CREATE TABLE stig_test_schema.test_table(id INT);\n  If the denial is not logged, this is a finding.\n  #### INSERT\n  As role bob, attempt to INSERT into the table created earlier, stig_test_table\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; INSERT INTO stig_test_schema.stig_test_table(id)\n  VALUES (0);\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n< 2016-03-09 09:58:30.709 EST postgres\n  56e0393f.186b postgres: >ERROR: permission denied for schema stig_test_schema\n  at character 13\n  < 2016-03-09 09:58:30.709 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0);\n  If the denial is not logged, this is a finding.\n  #### SELECT\n  As role bob, attempt to SELECT from the table created earlier, stig_test_table\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; SELECT * FROM stig_test_schema.stig_test_table;\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 09:57:58.327 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 15\n  < 2016-03-09 09:57:58.327 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  SELECT * FROM stig_test_schema.stig_test_table;\n  If the denial is not logged, this is a finding.\n  #### ALTER\n  As role bob, attempt to ALTER the table created earlier, stig_test_table by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; ALTER TABLE stig_test_schema.stig_test_table ADD\n  COLUMN name TEXT;\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:03:43.765 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  ALTER TABLE stig_test_schema.stig_test_table ADD COLUMN name TEXT;\n  If the denial is not logged, this is a finding.\n  #### UPDATE\n  As role bob, attempt to UPDATE a row created earlier, stig_test_table by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; UPDATE stig_test_schema.stig_test_table SET id=1\n  WHERE id=0;\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:08:27.696 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 8\n  < 2016-03-09 10:08:27.696 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  UPDATE stig_test_schema.stig_test_table SET id=1 WHERE id=0;\n  If the denial is not logged, this is a finding.\n  #### DELETE\n  As role bob, attempt to DELETE a row created earlier, stig_test_table by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; DELETE FROM stig_test_schema.stig_test_table\n  WHERE id=0;\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:09:29.607 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 13\n  < 2016-03-09 10:09:29.607 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  DELETE FROM stig_test_schema.stig_test_table WHERE id=0;\n  If the denial is not logged, this is a finding.\n  #### PREPARE\n  As role bob, attempt to execute a prepared system using PREPARE by running the\n  following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; PREPARE stig_test_plan(int) AS SELECT id FROM\n  stig_test_schema.stig_test_table WHERE id=$1;\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:16:22.628 EST postgres 56e03e02.18e4 postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 46\n  < 2016-03-09 10:16:22.628 EST postgres 56e03e02.18e4 postgres: >STATEMENT:\n  PREPARE stig_test_plan(int) AS SELECT id FROM stig_test_schema.stig_test_table\n  WHERE id=$1;\n  If the denial is not logged, this is a finding.\n  #### DROP\n  As role bob, attempt to DROP the table created earlier stig_test_table by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; DROP TABLE stig_test_schema.stig_test_table;\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:18:55.255 EST postgres 56e03e02.18e4 postgres: >ERROR:\n  permission denied for schema stig_test_schema\n  < 2016-03-09 10:18:55.255 EST postgres 56e03e02.18e4 postgres: >STATEMENT:\n  DROP TABLE stig_test_schema.stig_test_table;\n  If the denial is not logged, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access security objects occur.\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72921.rb",
            "line": 52
          },
          "id": "V-72921"
        },
        {
          "title": "The audit information produced by PostgreSQL must be protected from\n  unauthorized modification.",
          "desc": "If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is impossible to achieve. To ensure the veracity of audit data\n  the information system and/or the application must protect audit information\n  from unauthorized modification. This requirement can be achieved through\n  multiple methods that will depend upon system architecture and design. Some\n  commonly employed methods include ensuring log files enjoy the proper file\n  system permissions and limiting log data locations. Applications providing\n  a user interface to audit data will leverage user permissions and roles\n  identifying the user accessing the data and the corresponding rights that\n  the user enjoys in order to make access decisions regarding the modification\n  of audit data.  Audit information includes all information (e.g., audit\n  records, audit settings, and audit reports) needed to successfully audit\n  information system activity. Modification of database audit data could mask\n  the theft of, or the unauthorized modification of, sensitive data stored in\n  the database.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000119-DB-000060",
            "gid": "V-72847",
            "rid": "SV-87499r1_rule",
            "stig_id": "PGS9-00-000400",
            "cci": "CCI-000163",
            "nist": [
              "AU-9",
              "Rev_4"
            ],
            "check": "Review locations of audit logs, both internal to the database\n  and database audit logs located at the operating system level.  Verify there\n  are appropriate controls and permissions to protect the audit information from\n  unauthorized modification.\n\n  Note: The following instructions use the PGDATA environment variable. See\n  supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\n  #### stderr Logging  If the PostgreSQL server is configured to use stderr for\n  logging, the logs will be owned by the database owner (usually postgres user)\n  with a default permissions level of 0600. The permissions can be configured in\n  postgresql.conf.\n\n  To check the permissions for log files in postgresql.conf, as the database\n  owner (shown here as \"postgres\"), run the following command:\n\n  $ sudo su - postgres\n  $ grep \"log_file_mode\" ${PGDATA?}/postgresql.conf\n\n  If the permissions are not 0600, this is a finding.\n\n  Next, navigate to where the logs are stored. This can be found by running the\n  following command against postgresql.conf as the database owner (shown here as\n  \"postgres\"):\n\n  $ sudo su - postgres\n  $ grep \"log_directory\" ${PGDATA?}/postgresql.conf\n\n  With the log directory identified, as the database owner (shown here as \n\"postgres\"),\n  list the permissions of the logs:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}/pg_log\n\n  If logs are not owned by the database owner (shown here as \"postgres\") and\n  are not the same permissions as configured in postgresql.conf, this is a\n  finding.\n\n  #### syslog Logging\n  If the PostgreSQL server is configured to use syslog for logging, consult\n  the organizations syslog setting for permissions and ownership of logs.",
            "fix": "To ensure that logging is enabled, review supplementary content\n  APPENDIX-C for instructions on enabling logging.  Note: The following\n  instructions use the PGDATA environment variable. See supplementary content\n  APPENDIX-F for instructions on configuring PGDATA.\n  #### stderr Logging\n  With stderr logging enabled, as the database owner (shown here as\n  \"postgres\"), set the following parameter in postgresql.conf:\n\n  $ vi ${PGDATA?}/postgresql.conf\n  log_file_mode = 0600\n\n  To change the owner and permissions of the log files, run the following:\n\n  $ chown postgres:postgres ${PGDATA?}/<log directory name>\n  $ chmod 0700 ${PGDATA?}/<log directory name>\n  $ chmod 600 ${PGDATA?}/<log directory name>/*.log\n\n  #### syslog Logging\n  If PostgreSQL is configured to use syslog for logging, the log files must be\n  configured to be owned by root with 0600 permissions.\n\n  $ chown root:root <log directory name>/<log_filename>\n  $ chmod 0700 <log directory name>\n  $ chmod 0600 <log directory name>/*.log"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72847.rb",
            "line": 46
          },
          "id": "V-72847"
        },
        {
          "title": "PostgreSQL must implement cryptographic mechanisms preventing the\nunauthorized disclosure of organization-defined information at rest on\norganization-defined information system components.",
          "desc": "PostgreSQLs handling data requiring \"data at rest\" protections must\nemploy cryptographic mechanisms to prevent unauthorized disclosure and modification\nof the information at rest. These cryptographic mechanisms may be native to\nPostgreSQL or implemented via additional software or operating system/file system\nsettings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity\nof organizational information. The strength of the mechanism is commensurate with\nthe security category and/or classification of the information. Organizations have\nthe flexibility to either encrypt all information on storage devices (i.e., full\ndisk encryption) or encrypt specific data structures (e.g., files, records, or\nfields).\n\nThe decision whether and what to encrypt rests with the data owner and is also\ninfluenced by the physical measures taken to secure the equipment and media on which\nthe information resides.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000429-DB-000387",
            "gid": "V-73035",
            "rid": "SV-87687r1_rule",
            "stig_id": "PGS9-00-010500",
            "cci": "CCI-002476",
            "nist": [
              "SC-28 (1)",
              "Rev_4"
            ],
            "check": "To check if pgcrypto is installed on PostgreSQL, as a database\nadministrator (shown here as \"postgres\"), run the following command:\n\n$ sudo su - postgres\n$ psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a\nfinding.\n\nIf a disk or filesystem requires encryption, ask the system owner, DBA, and SA to\ndemonstrate the use of filesystem and/or disk-level encryption. If this is required\nand is not found, this is a finding.",
            "fix": "Configure PostgreSQL, operating system/file system, and additional\nsoftware as relevant, to provide the required level of cryptographic protection for\ninformation requiring cryptographic protection against disclosure.\n\nSecure the premises, equipment, and media to provide the required level of physical\nprotection.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See\nsupplementary content APPENDIX-E for documentation on installing pgcrypto.\n\nWith pgcrypto installed, it is possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('a_secure_password',\ngen_salt('md5')));"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73035.rb",
            "line": 45
          },
          "id": "V-73035"
        },
        {
          "title": "The audit information produced by PostgreSQL must be protected from\n  unauthorized read access.",
          "desc": "If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is difficult, if not impossible, to achieve. In addition, access to\n  audit records provides information an attacker could potentially use to his or\n  her advantage.\n  To ensure the veracity of audit data, the information system and/or the\n  application must protect audit information from any and all unauthorized\n  access. This includes read, write, copy, etc.\n  This requirement can be achieved through multiple methods which will depend\n  upon system architecture and design. Some commonly employed methods include\n  ensuring log files enjoy the proper file system permissions utilizing file\n  system protections and limiting log data location.\n  Additionally, applications with user interfaces to audit records should not\n  allow for the unfettered manipulation of or access to those records via the\n  application. If the application provides access to the audit data, the\n  application becomes accountable for ensuring that audit information is\n  protected from unauthorized access.\n  Audit information includes all information (e.g., audit records, audit\n  settings, and audit reports) needed to successfully audit information system\n  activity.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000118-DB-000059",
            "gid": "V-72915",
            "rid": "SV-87567r1_rule",
            "stig_id": "PGS9-00-004200",
            "cci": "CCI-000162",
            "nist": [
              "AU-9",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Review locations of audit logs, both internal to the database and database\n  audit logs located at the operating system level.\n  Verify there are appropriate controls and permissions to protect the audit\n  information from unauthorized access.\n  #### syslog Logging\n  If PostgreSQL is configured to use syslog for logging, consult the\n  organizations location and permissions for syslog log files.\n  #### stderr Logging\n  As the database administrator (shown here as \"postgres\"), check the current\n  log_file_mode configuration by running the following:\n  Note: Consult the organization's documentation on acceptable log privileges\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_file_mode\"\n  If log_file_mode is not 600, this is a finding.\n  Next, check the current log_destination path by running the following SQL:\n  Note: This is relative to PGDATA.\n  $ psql -c \"SHOW log_destination\"\n  Next, verify the log files have the set configurations in the log_destination:\n  Note: Use location of logs from log_directory.\n  $ ls -l ${PGDATA?}/pg_log/\n  total 32\n  -rw-------. 1 postgres postgres 0 Apr 8 00:00 postgresql-Fri.log\n  -rw-------. 1 postgres postgres 8288 Apr 11 17:36 postgresql-Mon.log\n  -rw-------. 1 postgres postgres 0 Apr 9 00:00 postgresql-Sat.log\n  -rw-------. 1 postgres postgres 0 Apr 10 00:00 postgresql-Sun.log\n  -rw-------. 1 postgres postgres 16212 Apr 7 17:05 postgresql-Thu.log\n  -rw-------. 1 postgres postgres 1130 Apr 6 17:56 postgresql-Wed.log\n  If logs with 600 permissions do not exist in log_destination, this is a\n    finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  #### syslog Logging\n  If PostgreSQL is configured to use syslog for logging, consult the\n  organizations location and permissions for syslog log files.\n  #### stderr Logging\n  If PostgreSQL is configured to use stderr for logging, permissions of the log\n  files can be set in postgresql.conf.\n  As the database administrator (shown here as \"postgres\"), edit the following\n  settings of logs in the postgresql.conf file:\n  Note: Consult the organization's documentation on acceptable log privileges\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_file_mode = 0600\n  Next, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72915.rb",
            "line": 46
          },
          "id": "V-72915"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful logons or\n  connection attempts occur.",
          "desc": "For completeness of forensic analysis, it is necessary to track failed\n  attempts to log on to PostgreSQL. While positive identification may not be\n  possible in a case of failed authentication, as much information as possible\n  about the incident must be captured.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000503-DB-000351",
            "gid": "V-72923",
            "rid": "SV-87575r1_rule",
            "stig_id": "PGS9-00-004600",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  In this example the user joe will log into the Postgres database unsuccessfully:\n  $ psql -d postgres -U joe\n  As the database administrator (shown here as \"postgres\"), check pg_log for a\n  FATAL connection audit trail:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/postgresql-Tue.log\n  < 2016-02-16 16:18:13.027 EST joe 56c65135.b5f postgres: >LOG: connection\n  authorized: user=joe database=postgres\n  < 2016-02-16 16:18:13.027 EST joe 56c65135.b5f postgres: >FATAL: role \"joe\"\n  does not exist\n  If an audit record is not generated each time a user (or other principal)\n  attempts, but fails to log on or connect to PostgreSQL (including attempts\n  where the user ID is invalid/unknown), this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  If logging is enabled the following configurations must be made to log\n  unsuccessful connections, date/time, username, and session identifier.\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Edit the following parameters:\n  log_connections = on\n  log_line_prefix = '< %m %u %c: >'\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %c is the session ID for the connection\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72923.rb",
            "line": 46
          },
          "id": "V-72923"
        },
        {
          "title": "Access to external executables must be disabled or restricted.",
          "desc": "Information systems are capable of providing a wide variety of functions\nand services. Some of the functions and services, provided by default, may not be\nnecessary to support essential organizational operations (e.g., key missions,\nfunctions).\n\nIt is detrimental for applications to provide, or install by default, functionality\nexceeding requirements or mission objectives.\n\nApplications must adhere to the principles of least functionality by providing only\nessential capabilities.\n\nPostgreSQLs may spawn additional external processes to execute procedures that are\ndefined in PostgreSQL but stored in external host files (external procedures). The\nspawned process used to execute the external procedure may operate within a\ndifferent OS security context than PostgreSQL and provide unauthorized access to the\nhost system.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000141-DB-000093",
            "gid": "V-73009",
            "rid": "SV-87661r1_rule",
            "stig_id": "PGS9-00-009100",
            "cci": "CCI-000381",
            "nist": [
              "CM-7 a",
              "Rev_4"
            ],
            "check": "PostgreSQL’s Copy command can interact with the underlying OS. Only\nsuperuser has access to this command.\n\nFirst, as the database administrator (shown here as \"postgres\"), run the following\nSQL to list all roles and their privileges:\n\n$ sudo su - postgres\n$ psql -x -c \"\\du\"\n\nIf any role has \"superuser\" that should not, this is a finding.\n\nIt is possible for an extension to contain code that could access external\nexecutables via SQL. To list all installed extensions, as the database administrator\n(shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -x -c \"SELECT * FROM pg_available_extensions WHERE installed_version IS NOT\nNULL\"\n\nIf any extensions are installed that are not approved, this is a finding.",
            "fix": "To remove superuser from a role, as the database administrator (shown\nhere as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"ALTER ROLE <role-name> WITH NOSUPERUSER\"\n\nTo remove extensions from PostgreSQL, as the database administrator (shown here as\n\"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"DROP EXTENSION extension_name\""
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73009.rb",
            "line": 75
          },
          "id": "V-73009"
        },
        {
          "title": "PostgreSQL must include additional, more detailed, organization-defined\n  information in the audit records for audit events identified by type,\n  location, or subject.",
          "desc": "Crunchy Audit Logs meet all provided to us organization-defined\n        auditable events",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000101-DB-000044",
            "gid": "V-72903",
            "rid": "SV-87555r1_rule",
            "stig_id": "PGS9-00-003500",
            "cci": "CCI-000135",
            "nist": [
              "AU-3 (1)",
              "Rev_4"
            ],
            "check": "Review the system documentation to identify what additional\n  information the organization has determined necessary.\n  Check PostgreSQL settings and existing audit records to verify that all\n  organization-defined additional, more detailed information is in the audit\n  records for audit events identified by type, location, or subject.\n  If any additional information is defined and is not contained in the audit\n  records, this is a finding.",
            "fix": "Configure PostgreSQL audit settings to include all\n  organization-defined detailed information in the audit records for audit\n  events identified by type, location, or subject.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72903.rb",
            "line": 23
          },
          "id": "V-72903"
        },
        {
          "title": "Unused database components which are integrated in PostgreSQL and cannot be\nuninstalled must be disabled.",
          "desc": "Information systems are capable of providing a wide variety of functions\nand services. Some of the functions and services, provided by default, may not be\nnecessary to support essential organizational operations (e.g., key missions,\nfunctions).\n\nIt is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\nPostgreSQLs must adhere to the principles of least functionality by providing only\nessential capabilities.\n\nUnused, unnecessary PostgreSQL components increase the attack vector for PostgreSQL\nby introducing additional targets for attack. By minimizing the services and\napplications installed on the system, the number of potential vulnerabilities is\nreduced. Components of the system that are unused and cannot be uninstalled must be\ndisabled. The techniques available for disabling components will vary by DBMS\nproduct, OS and the nature of the component and may include DBMS configuration\nsettings, OS service settings, OS file access security, and DBMS user/role\npermissions.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000141-DB-000092",
            "gid": "V-73011",
            "rid": "SV-87663r1_rule",
            "stig_id": "PGS9-00-009200",
            "cci": "CCI-000381",
            "nist": [
              "CM-7 a",
              "Rev_4"
            ],
            "check": "To list all installed packages, as the system administrator, run the\nfollowing:\n\n# RHEL/CENT Systems\n$ sudo yum list installed | grep postgres\n\n# Debian Systems\n$ dpkg --get-selections | grep postgres\n\nIf any packages are installed that are not required, this is a finding.",
            "fix": "To remove any unneeded executables, as the system administrator, run\nthe following:\n\n# RHEL/CENT Systems\n$ sudo yum erase <package_name>\n\n# Debian Systems\n$ sudo apt-get remove <package_name>"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73011.rb",
            "line": 23
          },
          "id": "V-73011"
        },
        {
          "title": "If passwords are used for authentication, PostgreSQL must transmit only\n         encrypted representations of passwords.",
          "desc": "The DoD standard for authentication is DoD-approved PKI certificates.\n        Authentication based on User ID and Password may be used only when it is\n        not possible to employ a PKI certificate, and requires AO approval.\n\n        In such cases, passwords need to be protected at all times, and\n        encryption is the standard method for protecting passwords during\n        transmission.\n\n        PostgreSQL passwords sent in clear text format across the network are\n        vulnerable to discovery by unauthorized users. Disclosure of passwords\n        may easily lead to unauthorized access to the database.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000172-DB-000075",
            "gid": "V-72857",
            "rid": "SV-87509r1_rule",
            "stig_id": "PGS9-00-000800",
            "cci": "CCI-000197",
            "nist": [
              "IA-5 (1) (c)",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  As the database administrator (shown here as \"postgres\"), review\n  the authentication entries in pg_hba.conf:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n  If any entries use the auth_method (last column in records) \"password\", this\n  is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  As the database administrator (shown here as \"postgres\"), edit\n  pg_hba.conf authentication file and change all entries of \"password\" to\n  \"md5\":\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n  host all all .example.com md5"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72857.rb",
            "line": 28
          },
          "id": "V-72857"
        },
        {
          "title": "PostgreSQL must generate audit records when concurrent\n  logons/connections by the same user from different workstations occur.",
          "desc": "For completeness of forensic analysis, it is necessary to track who\n  logs on to PostgreSQL.\n  Concurrent connections by the same user from multiple workstations may be\n  valid use of the system; or such connections may be due to improper\n  circumvention of the requirement to use the CAC for authentication; or they\n  may indicate unauthorized account sharing; or they may be because an account\n  has been compromised.\n  (If the fact of multiple, concurrent logons by a given user can be reliably\n  reconstructed from the log entries for other events (logons/connections;\n  voluntary and involuntary disconnections), then it is not mandatory to create\n  additional log entries specifically for this..",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000506-DB-000353",
            "gid": "V-72961",
            "rid": "SV-87613r1_rule",
            "stig_id": "PGS9-00-006200",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify that\n  log_connections and log_disconnections are enabled by running the following\n  SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_connections\"\n  $ psql -c \"SHOW log_disconnections\"\n  If either is off, this is a finding.\n  Next, verify that log_line_prefix contains sufficient information by running\n  the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_line_prefix\"\n  If log_line_prefix does not contain at least %m %u %d %c, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Edit the following parameters as such:\n  log_connections = on\n  log_disconnections = on\n  log_line_prefix = '< %m %u %d %c: >'\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %d is the database\n  * %c is the session ID for the connection\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72961.rb",
            "line": 46
          },
          "id": "V-72961"
        },
        {
          "title": "PostgreSQL must generate audit records for all direct access to the\n        database(s).",
          "desc": "In this context, direct access is any query, command, or call to the\n        DBMS that comes from any source other than the application(s) that it\n        supports. Examples would be the command line or a database management\n        utility program. The intent is to capture all activity from administrative\n        and non-standard sources.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000508-DB-000358",
            "gid": "V-73069",
            "rid": "SV-87721r1_rule",
            "stig_id": "PGS9-00-012700",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "As the database administrator, verify pgaudit is enabled by running\n      the following SQL:\n\n      $ sudo su - postgres\n      $ psql -c \"SHOW shared_preload_libraries\"\n\n      If the output does not contain \"pgaudit\", this is a finding.\n\n      Verify that connections and disconnections are being logged by\n      running the following SQL:\n\n      $ sudo su - postgres\n      $ psql -c \"SHOW log_connections\"\n      $ psql -c \"SHOW log_disconnections\"\n\n      If the output does not contain \"on\",\n\n      pgaudit.log='ddl, role, read, write'\n      log_connections='on'\n      log_disconnections='on'\n\n      this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n      variable. See supplementary content APPENDIX-F for instructions on\n      configuring PGDATA.\n\n      To ensure that logging is enabled, review supplementary content APPENDIX-C\n      for instructions on enabling logging.\n\n      Using pgaudit PostgreSQL can be configured to audit these requests. See\n      supplementary content APPENDIX-B for documentation on installing pgaudit.\n\n      With pgaudit installed the following configurations should be made:\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n\n      Add the following parameters (or edit existing parameters):\n\n      pgaudit.log='ddl, role, read, write'\n      log_connections='on'\n      log_disconnections='on'\n\n      Now, as the system administrator, reload the server with the new configuration:\n\n      # SYSTEMD SERVER ONLY\n      $ sudo systemctl reload postgresql-9.5\n\n      # INITD SERVER ONLY\n      $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73069.rb",
            "line": 104
          },
          "id": "V-73069"
        },
        {
          "title": "PostgreSQL must only accept end entity certificates issued by DoD PKI or\nDoD-approved PKI Certification Authorities (CAs) for the establishment of all\nencrypted sessions.",
          "desc": "Only DoD-approved external PKIs have been evaluated to ensure that they\nhave security controls and identity vetting procedures in place which are sufficient\nfor DoD systems to rely on the identity asserted in the certificate. PKIs lacking\nsufficient security controls and identity vetting procedures risk being compromised\nand issuing certificates that enable adversaries to impersonate legitimate users.\n\nThe authoritative list of DoD-approved PKIs is published at\nhttp://iase.disa.mil/pki-pke/interoperability.\n\nThis requirement focuses on communications protection for PostgreSQL session rather\nthan for the network packet.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000427-DB-000385",
            "gid": "V-73031",
            "rid": "SV-87683r1_rule",
            "stig_id": "PGS9-00-010300",
            "cci": "CCI-002470",
            "nist": [
              "SC-23 (5)",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), verify\nthe following setting in postgresql.conf:\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl_ca_file\"\n$ psql -c \"SHOW ssl_cert_file\"\n\nIf the database is not configured to used approved certificates, this is a finding.",
            "fix": "Revoke trust in any certificates not issued by a DoD-approved\ncertificate authority.\n\nConfigure PostgreSQL to accept only DoD and DoD-approved PKI end-entity certificates.\n\nTo configure PostgreSQL to accept approved CA's, see the official PostgreSQL\ndocumentation: http://www.postgresql.org/docs/current/static/ssl-tcp.html\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73031.rb",
            "line": 45
          },
          "id": "V-73031"
        },
        {
          "title": "Database contents must be protected from unauthorized and unintended\ninformation transfer by enforcement of a data-transfer policy.",
          "desc": "Information System Owners and Application developers must follow Best\n        Practices when developing Cloud applications. Example: Review the\n        procedures for the refreshing of development/test data from production.\n        Review any scripts or code that exists for the movement of production\n        data to development/test systems, or to any other location or for any\n        other purpose. Verify that copies of production data are not left in\n        unprotected locations.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000243-DB-000128",
            "gid": "V-73057",
            "rid": "SV-87709r1_rule",
            "stig_id": "PGS9-00-011900",
            "cci": "CCI-001090",
            "nist": [
              "SC-4",
              "Rev_4"
            ],
            "check": "Review the procedures for the refreshing of development/test data\nfrom production.\n\nReview any scripts or code that exists for the movement of production data to\ndevelopment/test systems, or to any other location or for any other purpose.\n\nVerify that copies of production data are not left in unprotected locations.\n\nIf the code that exists for data movement does not comply with the\norganization-defined data transfer policy and/or fails to remove any copies of\nproduction data from unprotected locations, this is a finding.",
            "fix": "Modify any code used for moving data from production to\ndevelopment/test systems to comply with the organization-defined data transfer\npolicy, and to ensure copies of production data are not left in unsecured locations."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73057.rb",
            "line": 23
          },
          "id": "V-73057"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  modify security objects occur.",
          "desc": "Changes in the database objects (tables, views, procedures, functions)\n  that record and control permissions, privileges, and roles granted to users\n  and roles must be tracked. Without an audit trail, unauthorized changes to the\n  security subsystem could go undetected. The database could be severely\n  compromised or rendered inoperative.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000496-DB-000335",
            "gid": "V-72927",
            "rid": "SV-87579r1_rule",
            "stig_id": "PGS9-00-004800",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  As the database administrator (shown here as \"postgres\"), create a test role\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob\"\n  Next, to test if audit records are generated from unsuccessful attempts at\n  modifying security objects, run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; UPDATE pg_authid SET rolsuper = 't' WHERE\n  rolname = 'bob';\"\n  Next, as the database administrator (shown here as \"postgres\"), verify that\n  the denials were logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-17 10:34:00.017 EDT bob 56eabf52.b62 postgres: >ERROR: permission\n  denied for relation pg_authid\n  < 2016-03-17 10:34:00.017 EDT bob 56eabf52.b62 postgres: >STATEMENT:\n  UPDATE pg_authid SET rolsuper = 't' WHERE rolname = 'bob';\n  If denials are not logged, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to modify security objects occur.\n  Unsuccessful attempts to modifying security objects can be logged if logging\n  is enabled. To ensure that logging is enabled, review supplementary content A\n  PPENDIX-C for instructions on enabling logging."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72927.rb",
            "line": 46
          },
          "id": "V-72927"
        },
        {
          "title": "Unused database components, PostgreSQL software, and database objects must be removed.",
          "desc": "Information systems are capable of providing a wide variety of functions\n  and services. Some of the functions and services, provided by default, may not be\n  necessary to support essential organizational operations (e.g., key missions,\n  functions).\n\n  It is detrimental for software products to provide, or install by default,\n  functionality exceeding requirements or mission objectives.\n\n  PostgreSQLs must adhere to the principles of least functionality by providing only\n  essential capabilities.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000141-DB-000091",
            "gid": "V-73007",
            "rid": "SV-87659r1_rule",
            "stig_id": "PGS9-00-008900",
            "cci": "CCI-000381",
            "nist": [
              "CM-7 a",
              "Rev_4"
            ],
            "check": "To get a list of all extensions installed, use the following commands:\n  $ sudo su - postgres\n  $ psql -c \"select * from pg_extension where extname != 'plpgsql';\"\"\n\n  If any extensions exist that are not approved, this is a finding.",
            "fix": "To remove extensions, use the following commands:\n  $ sudo su - postgres\n  $ psql -c \"DROP EXTENSION <extension_name>\"\n\n  Note: it is recommended that plpgsql not be removed."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73007.rb",
            "line": 63
          },
          "id": "V-73007"
        },
        {
          "title": "PostgreSQL and associated applications, when making use of dynamic code\n  execution, must scan input data for invalid values that may indicate a code i\n  njection attack.",
          "desc": "Information System Owners and Application developers must follow Best\n        Practices when developing Cloud applications. Example: Checking the valid\n        syntax and semantics of information system inputs to ensure that SQL\n        injections are not possible.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000251-DB-000392",
            "gid": "V-72875",
            "rid": "SV-87527r1_rule",
            "stig_id": "PGS9-00-002000",
            "cci": "CCI-001310",
            "nist": [
              "SI-10",
              "Rev_4"
            ],
            "check": "Review PostgreSQL source code (trigger procedures, functions)\n  and application source code to identify cases of dynamic code execution.\n  If dynamic code execution is employed without protective measures against code\n  injection, this is a finding.",
            "fix": "Where dynamic code execution is used, modify the code to implement\n  protections against code injection (IE: prepared statements)."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72875.rb",
            "line": 23
          },
          "id": "V-72875"
        },
        {
          "title": "PostgreSQL must limit privileges to change functions and triggers, and\n  links to software external to PostgreSQL.",
          "desc": "This is a DEVOPS system and users don't have ability to install or\n        remove packages. Once released as BOSH package software libraries can\n        not be changed. Any changes to the software libriaries can ONLY be done\n        by creating and deploying a new BOSH release. This is\n        Software-Defined-Infrustructure",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000133-DB-000179",
            "gid": "V-72855",
            "rid": "SV-87507r1_rule",
            "stig_id": "PGS9-00-000710",
            "cci": "CCI-001499",
            "nist": [
              "CM-5 (6)",
              "Rev_4"
            ],
            "check": "Only owners of objects can change them. To view all functions,\n  triggers, and trigger procedures, their ownership and source, as the database\n  administrator (shown here as \"postgres\") run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -x -c \"\\df+\"\n\n  Only the OS database owner user (shown here as \"postgres\") or a PostgreSQL\n  superuser can change links to external software.\n\n  As the database administrator (shown here as \"postgres\"), check the permissions\n  of configuration files for the database:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}\n\n  If any files are not owned by the database owner or have permissions allowing\n  others to modify (write) configuration files, this is a finding.",
            "fix": "To change ownership of an object, as the database administrator\n  (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su – postgres  $ psql -c \"ALTER FUNCTION function_name OWNER TO new_role_name\"\n\n  To change ownership of postgresql.conf, as the database administrator (shown\n  here as \"postgres\"), run the following commands:\n\n  $ sudo su - postgres\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\n  $ chmod 0600 ${PGDATA?}/postgresql.conf\n\n  To remove superuser from a role, as the database administrator (shown here as\n  \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"ALTER ROLE rolename WITH NOSUPERUSER\""
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72855.rb",
            "line": 92
          },
          "id": "V-72855"
        },
        {
          "title": "PostgreSQL must prevent non-privileged users from executing privileged\nfunctions, to include disabling, circumventing, or altering implemented security\nsafeguards/countermeasures.",
          "desc": "Out of the Box DBaaS does not grant System Users access to privileged\n        (Administration) functions. The System Accounts provided to consumers of\n        the Crunchy DBaaS do not have access to privileged (Administration)\n        functions. Those functions are only available to the internal admin\n        DBaaS Roles, and can only be executed by Platform Admins or via\n        authorized Service Broker interactions. Crunchy will not grant Superuser\n        priviledges to ANY Information System User residing on the Shared\n        PostgreSQL Cluster. A Dedicated service plan must be requested if\n        Superuser functionality is required by the Infromation System\n        (aproval required)",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000340-DB-000304",
            "gid": "V-73053",
            "rid": "SV-87705r1_rule",
            "stig_id": "PGS9-00-011700",
            "cci": "CCI-002235",
            "nist": [
              "AC-6 (10)",
              "Rev_4"
            ],
            "check": "Review the system documentation to obtain the definition of the\nPostgreSQL functionality considered privileged in the context of the system in\nquestion.\n\nReview the PostgreSQL security configuration and/or other means used to protect\nprivileged functionality from unauthorized use.\n\nIf the configuration does not protect all of the actions defined as privileged, this\nis a finding.\n\nIf PostgreSQL instance uses procedural languages, such as pl/Python or pl/R, without\nAO authorization, this is a finding.",
            "fix": "Configure PostgreSQL security to protect all privileged functionality.\n\nIf pl/R and pl/Python are used, document their intended use, document users that\nhave access to pl/R and pl/Python, as well as their business use case, such as\ndata-analytics or data-mining. Because of the risks associated with using pl/R and\npl/Python, their use must have AO risk acceptance.\n\nTo remove unwanted extensions, use:\n\nDROP EXTENSION <extension_name>\n\nTo remove unwanted privileges from a role, use the REVOKE command.\n\nSee the PostgreSQL documentation for more details:\nhttp://www.postgresql.org/docs/current/static/sql-revoke.html"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73053.rb",
            "line": 113
          },
          "id": "V-73053"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  delete categorized information (e.g., classification levels/security levels)\n  occur.",
          "desc": "Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n  For detailed information on categorizing information, refer to FIPS Publication\n  199, Standards for Security Categorization of Federal Information and\n  Information Systems, and FIPS Publication 200, Minimum Security Requirements\n  for Federal Information and Information Systems.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000502-DB-000349",
            "gid": "V-72931",
            "rid": "SV-87583r1_rule",
            "stig_id": "PGS9-00-005000",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain \"pgaudit\", this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  All errors and denials are logged if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72931.rb",
            "line": 46
          },
          "id": "V-72931"
        },
        {
          "title": "PostgreSQL must provide the capability for authorized users to capture,\nrecord, and log all content related to a user session.",
          "desc": "Without the capability to capture, record, and log all content related to a\nuser session, investigations into suspicious user activity would be hampered.\n\nTypically, this PostgreSQL capability would be used in conjunction with comparable\nmonitoring of a user's online session, involving other software components such as\noperating systems, web servers and front-end user applications. The current\nrequirement, however, deals specifically with PostgreSQL.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000093-DB-000052",
            "gid": "V-73021",
            "rid": "SV-87673r1_rule",
            "stig_id": "PGS9-00-009800",
            "cci": "CCI-001462",
            "nist": [
              "AU-14 (2)",
              "Rev_4"
            ],
            "check": "First, as the database administrator (shown here as \"postgres\"),\nverify pgaudit is installed by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf shared_preload_libraries does not contain pgaudit, this is a finding.\n\nNext, to verify connections and disconnections are logged, run the following SQL:\n\n$ psql -c \"SHOW log_connections\"\n$ psql -c \"SHOW log_disconnections\"\n\nIf log_connections and log_disconnections are off, this is a finding.\n\nNow, to verify that pgaudit is configured to log, run the following SQL:\n\n$ psql -c \"SHOW pgaudit.log\"\n\nIf pgaudit.log does not contain ddl, role, read, write, this is a finding.",
            "fix": "Configure the database capture, record, and log all content related to\na user session.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nWith logging enabled, as the database administrator (shown here as \"postgres\"),\nenable log_connections and log_disconnections:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nlog_connections = on\nlog_disconnections = on\n\nUsing pgaudit PostgreSQL can be configured to audit activity. See supplementary\ncontent APPENDIX-B for documentation on installing pgaudit.\n\nWith pgaudit installed, as a database administrator (shown here as \"postgres\"),\nenable which objects required for auditing a user's session:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\npgaudit.log = 'write, ddl, role, read, function';\npgaudit.log_relation = on;\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73021.rb",
            "line": 45
          },
          "id": "V-73021"
        },
        {
          "title": "PostgreSQL must prohibit user installation of logic modules (functions,\n  trigger procedures, views, etc.) without explicit privileged status.",
          "desc": "Once released as BOSH package software libraries can not be changed.\n        Any changes to the software libriaries can ONLY be done by creating and\n        deploying a new BOSH release. This is Software-Defined-Infrustructure",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000378-DB-000365",
            "gid": "V-72997",
            "rid": "SV-87649r1_rule",
            "stig_id": "PGS9-00-008400",
            "cci": "CCI-001812",
            "nist": [
              "CM-11 (2)",
              "Rev_4"
            ],
            "check": "If PostgreSQL supports only software development, experimentation\nand/or developer-level testing (that is, excluding production systems, integration\ntesting, stress testing, and user acceptance testing), this is not a finding.\n\nReview PostgreSQL and database security settings with respect to non-administrative\nusers' ability to create, alter, or replace logic modules, to include but not\nnecessarily only stored procedures, functions, triggers, and views.\n\nTo list the privileges for all tables and schemas, as the database administrator\n(shown here as \"postgres\"), run the following:\n\n$ sudo su - postgres\n$ psql -c \"\\dp\"\n$ psql -c \"\\dn+\"\n\nThe privileges are as follows:\n\nrolename=xxxx -- privileges granted to a role\n=xxxx -- privileges granted to PUBLIC\n\nr -- SELECT (\"read\")\nw -- UPDATE (\"write\")\na -- INSERT (\"append\")\nd -- DELETE\nD -- TRUNCATE\nx -- REFERENCES\nt -- TRIGGER\nX -- EXECUTE\nU -- USAGE\nC -- CREATE\nc -- CONNECT\nT -- TEMPORARY\narwdDxt -- ALL PRIVILEGES (for tables, varies for other objects)\n* -- grant option for preceding privilege\n\n/yyyy -- role that granted this privilege\n\nIf any such permissions exist and are not documented and approved, this is a\nfinding.",
            "fix": "Document and obtain approval for any non-administrative users who\nrequire the ability to create, alter or replace logic modules.\n\nImplement the approved permissions. Revoke any unapproved permissions."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72997.rb",
            "line": 57
          },
          "id": "V-72997"
        },
        {
          "title": "PostgreSQL must use NSA-approved cryptography to protect classified\ninformation in accordance with the data owners requirements.",
          "desc": "Use of weak or untested encryption algorithms undermines the purposes of\nutilizing encryption to protect data. The application must implement cryptographic\nmodules adhering to the higher standards approved by the federal government since\nthis provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements\nin light of applicable federal laws, Executive Orders, directives, policies,\nregulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This\nrequirement addresses the compatibility of PostgreSQL with the encryption devices.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000416-DB-000380",
            "gid": "V-72991",
            "rid": "SV-87643r1_rule",
            "stig_id": "PGS9-00-008100",
            "cci": "CCI-002450",
            "nist": [
              "SC-13",
              "Rev_4"
            ],
            "check": "If PostgreSQL is deployed in an unclassified environment, this is\nnot applicable (NA).\n\nIf PostgreSQL is not using NSA-approved cryptography to protect classified\ninformation in accordance with applicable federal laws, Executive Orders,\ndirectives, policies, regulations, and standards, this is a finding.\n\nTo check if PostgreSQL is configured to use SSL, as the database administrator\n(shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl\"\n\nIf SSL is off, this is a finding.\n\nConsult network administration staff to determine whether the server is protected by\nNSA-approved encrypting devices. If not, this a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo configure PostgreSQL to use SSL, as a database administrator (shown here as\n\"postgres\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameter:\n\nssl = on\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G.\n\nDeploy NSA-approved encrypting devices to protect the server on the network."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72991.rb",
            "line": 46
          },
          "id": "V-72991"
        },
        {
          "title": "PostgreSQL must reveal detailed error messages only to the ISSO, ISSM,\n  SA and DBA.",
          "desc": "If PostgreSQL provides too much information in error logs and\n  administrative messages to the screen, this could lead to compromise. The\n  structure and content of error messages need to be carefully considered by\n  the organization and development team. The extent to which the information\n  system is able to identify and handle error conditions is guided by\n  organizational policy and operational requirements.\n  Some default PostgreSQL error messages can contain information that could aid\n   attacker in, among others things, identifying the database type, host\n   address, or state of the database. Custom errors may contain sensitive\n   customer information.\n   It is important that detailed error messages be visible only to those who are\n   authorized to view them; that general users receive only generalized\n   acknowledgment that errors have occurred; and that these generalized messages\n   appear only when relevant to the user's task. For example, a message along\n   the lines of, \"An error has occurred. Unable to save your changes. If this\n   problem persists, please contact your help desk\" would be relevant. A\n   message such as \"Warning: your transaction generated a large number of\n   page splits\" would likely not be relevant.\n   Administrative users authorized to review detailed error messages typically\n   are the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified\n   according to organization-specific needs, with DBA approval.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000267-DB-000163",
            "gid": "V-72889",
            "rid": "SV-87541r1_rule",
            "stig_id": "PGS9-00-002500",
            "cci": "CCI-001314",
            "nist": [
              "SI-11 b",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Check PostgreSQL settings and custom database code to determine if detailed\n  error messages are ever displayed to unauthorized individuals.\n  To check the level of detail for errors exposed to clients, as the database\n  administrator (shown here as \"postgres\"), run the following:\n  $ sudo su - postgres\n  $ grep \"client_min_messages\"\n\n  ${PGDATA?}/postgresql.conf\n  If client_min_messages is set to LOG or DEBUG, this is a finding.\n  If detailed error messages are displayed to individuals not authorized to\n  view them, this is a finding.\n\n  #### stderr Logging\n  Logs may contain detailed information and should only be accessible by the\n  database owner.\n  As the database administrator, verify the following settings of logs in the\n  postgresql.conf file.\n  Note: Consult the organization's documentation on acceptable log privileges\n  $ sudo su - postgres\n  $ grep log_directory ${PGDATA?}/postgresql.conf\n  $ grep log_file_mode ${PGDATA?}/postgresql.conf\n  Next, verify the log files have the set configurations.\n  Note: Use location of logs from log_directory.\n  $ ls -l <audit_log_path>\n  total 32\n  -rw-------. 1 postgres postgres 0 Apr 8 00:00 postgresql-Fri.log\n  -rw-------. 1 postgres postgres 8288 Apr 11 17:36 postgresql-Mon.log\n  -rw-------. 1 postgres postgres 0 Apr 9 00:00 postgresql-Sat.log\n  -rw-------. 1 postgres postgres 0 Apr 10 00:00 postgresql-Sun.log\n  -rw-------. 1 postgres postgres 16212 Apr 7 17:05 postgresql-Thu.log\n  -rw-------. 1 postgres postgres 1130 Apr 6 17:56 postgresql-Wed.log\n  If logs are not owned by the database administrator or have permissions that\n  are not 0600, this is a finding.\n\n  #### syslog Logging\n  If PostgreSQL is configured to use syslog for logging, consult the\n   organizations location and permissions for syslog log files. If the logs are\n   not owned by root or have permissions that are not 0600, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To set the level of detail for errors messages exposed to clients, as the\n  database administrator (shown here as \"postgres\"), run the following\n  commands:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  client_min_messages = notice"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72889.rb",
            "line": 69
          },
          "id": "V-72889"
        },
        {
          "title": "PostgreSQL must be able to generate audit records when security objects\n  are accessed.",
          "desc": "Changes to the security configuration must be tracked.\n  This requirement applies to situations where security data is retrieved or\n  modified via data manipulation operations, as opposed to via specialized\n  security functionality.\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n  CREATE\n  SELECT\n  INSERT\n  UPDATE\n  DELETE\n  PREPARE\n  EXECUTE\n  ALTER\n  DRO.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000492-DB-000332",
            "gid": "V-72957",
            "rid": "SV-87609r1_rule",
            "stig_id": "PGS9-00-006000",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72957.rb",
            "line": 46
          },
          "id": "V-72957"
        },
        {
          "title": "PostgreSQL must separate user functionality (including user interface\nservices) from database management functionality.",
          "desc": "Information system management functionality includes functions necessary to\nadminister databases, network components, workstations, or servers and typically\nrequires privileged user access.\n\nThe separation of user functionality from information system management\nfunctionality is either physical or logical and is accomplished by using different\ncomputers, different central processing units, different instances of the operating\nsystem, different network addresses, combinations of these methods, or other\nmethods, as appropriate.\n\nAn example of this type of separation is observed in web administrative interfaces\nthat use separate authentication methods for users of any other information system\nresources.\n\nThis may include isolating the administrative interface on a different domain and\nwith additional access controls.\n\nIf administrative functionality or information regarding PostgreSQL management is\npresented on an interface available for users, information on DBMS settings may be\ninadvertently made available to the user.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000211-DB-000122",
            "gid": "V-72999",
            "rid": "SV-87651r1_rule",
            "stig_id": "PGS9-00-008500",
            "cci": "CCI-001082",
            "nist": [
              "SC-2",
              "Rev_4"
            ],
            "check": "Check PostgreSQL settings and vendor documentation to verify that\nadministrative functionality is separate from user functionality.\n\nAs the database administrator (shown here as \"postgres\"), list all roles and\npermissions for the database:\n\n$ sudo su - postgres\n$ psql -c \"\\du\"\n\nIf any non-administrative role has the attribute \"Superuser\", \"Create role\",\n\"Create DB\" or \"Bypass RLS\", this is a finding.\n\nIf administrator and general user functionality are not separated either physically\nor logically, this is a finding.",
            "fix": "Configure PostgreSQL to separate database administration and general\nuser functionality.\n\nDo not grant superuser, create role, create db or bypass rls role attributes to\nusers that do not require it.\n\nTo remove privileges, see the following example:\n\nALTER ROLE <username> NOSUPERUSER NOCREATEDB NOCREATEROLE NOBYPASSRLS;"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72999.rb",
            "line": 57
          },
          "id": "V-72999"
        },
        {
          "title": "PostgreSQL must be configured to prohibit or restrict the use of\n        organization-defined functions, ports, protocols, and/or services, as\n        defined in the PPSM CAL and vulnerability assessments.",
          "desc": "In order to prevent unauthorized connection of devices, unauthorized\n        transfer of information, or unauthorized tunneling (i.e., embedding of\n        data types within data types), organizations must disable or restrict\n        unused or unnecessary physical and logical ports/protocols/services on\n        information systems.\n\n        Applications are capable of providing a wide variety of functions and\n        services. Some of the functions and services provided by default may\n        not be necessary to support essential organizational operations.\n        Additionally, it is sometimes convenient to provide multiple services\n        from a single component (e.g., email and web services); however, doing\n        so increases risk over limiting the services provided by any one component.\n\n        To support the requirements and principles of least functionality, the\n        application must support the organizational requirements providing only\n        essential capabilities and limiting the use of ports, protocols, and/or\n        services to only those required, authorized, and approved to conduct\n        official business or to address authorized quality of life issues.\n\n        Database Management Systems using ports, protocols, and services deemed\n        unsafe are open to attack through those ports, protocols, and services.\n        This can allow unauthorized access to the database and through the\n        database to other components of the information system.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000142-DB-000094",
            "gid": "V-72841",
            "rid": "SV-87493r1_rule",
            "stig_id": "PGS9-00-000100",
            "cci": "CCI-001762",
            "nist": [
              "CM-7 (1) (b)",
              "Rev_4"
            ],
            "check": "As the database administrator, run the following SQL:\n\n  $ psql -c \"SHOW port\"\n\n  If the currently defined port configuration is deemed prohibited, this is a\n  finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  To change the listening port of the database, as the database administrator,\n  change the following setting in postgresql.conf:\n\n  $ sudo su - postgres\n  $ vi $PGDATA/postgresql.conf\n\n  Change the port parameter to the desired port.\n\n  Next, restart the database:\n\n  $ sudo su - postgres\n  # SYSTEMD SERVER ONLY\n  $ systemctl restart postgresql-9.5\n  # INITD SERVER ONLY\n  $ service postgresql-9.5 restart\n\n  Note: psql uses the default port 5432 by default. This can be changed by\n  specifying the port with psql or by setting the PGPORT environment variable:\n\n  $ psql -p 5432 -c \"SHOW port\"\n  $ export PGPORT=5432"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72841.rb",
            "line": 52
          },
          "id": "V-72841"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  modify privileges/permissions occur.",
          "desc": "Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n  Modifying permissions is done via the GRANT and REVOKE commands.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000495-DB-000329",
            "gid": "V-72975",
            "rid": "SV-87627r1_rule",
            "stig_id": "PGS9-00-006800",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator (shown here as\n  \"postgres\"), create a role 'bob' and a test table by running the following\n  SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob; CREATE TABLE test(id INT)\"\n  Next, set current role to bob and attempt to modify privileges:\n  $ psql -c \"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\"\n  $ psql -c \"SET ROLE bob; REVOKE ALL PRIVILEGES ON test FROM bob\"\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  unsuccessful attempt was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  2016-07-14 18:12:23.208 EDT postgres postgres ERROR: permission denied for\n  relation test\n  2016-07-14 18:12:23.208 EDT postgres postgres STATEMENT: GRANT ALL PRIVILEGES\n  ON test TO bob;\n  2016-07-14 18:14:52.895 EDT postgres postgres ERROR: permission denied for\n  relation test\n  2016-07-14 18:14:52.895 EDT postgres postgres STATEMENT: REVOKE ALL PRIVILEGES\n  ON test FROM bob;\n  If audit logs are not generated when unsuccessful attempts to modify\n  privileges/permissions occur, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to modify privileges occur.\n  All denials are logged by default if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72975.rb",
            "line": 46
          },
          "id": "V-72975"
        },
        {
          "title": "PostgreSQL must generate audit records when privileges/permissions are\n  added.",
          "desc": "Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n  In an SQL environment, adding permissions is typically done via the GRANT\n  command, or, in the negative, the REVOKE command.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000495-DB-000326",
            "gid": "V-72929",
            "rid": "SV-87581r1_rule",
            "stig_id": "PGS9-00-004900",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), create a\n  role by running the following SQL:\n  Change the privileges of another user:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob\"\n  Next, GRANT then REVOKE privileges from the role:\n  $ psql -c \"GRANT CONNECT ON DATABASE postgres TO bob\"\n  $ psql -c \"REVOKE CONNECT ON DATABASE postgres FROM bob\"\n  postgres=# REVOKE CONNECT ON DATABASE postgres FROM bob;\n  REVOKE\n  postgres=# GRANT CONNECT ON DATABASE postgres TO bob;\n  GRANT\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  events were logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n< 2016-07-13 16:25:21.103 EDT postgres\n  postgres LOG: > AUDIT: SESSION,1,1,ROLE,GRANT,,,GRANT CONNECT ON DATABASE\n  postgres TO bob,<none>\n  < 2016-07-13 16:25:25.520 EDT postgres postgres LOG: > AUDIT:\n  SESSION,1,1,ROLE,REVOKE,,,REVOKE CONNECT ON DATABASE postgres FROM bob,<none>\n  If the above steps cannot verify that audit records are produced when\n  privileges/permissions/role memberships are added, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'role'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72929.rb",
            "line": 45
          },
          "id": "V-72929"
        },
        {
          "title": "Security-relevant software updates to PostgreSQL must be installed\n  within the time period directed by an authoritative source (e.g., IAVM, CTOs,\n  DTMs, and STIGs).",
          "desc": "This control should be met through Common Control Provider - Software,\n        Patch and Vulnerability Management. Crunchy follows an agile development\n        process. Any security-related findings are documented in the development\n        backlog within Redmine and prioritized for resolution.  Issues are tracked\n        until closed via Redmine's tracking fields",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000456-DB-000390",
            "gid": "V-72845",
            "rid": "SV-87497r1_rule",
            "stig_id": "PGS9-00-000300",
            "cci": "CCI-002605",
            "nist": [
              "SI-2 c",
              "Rev_4"
            ],
            "check": "If new packages are available for PostgreSQL, they can be\n  reviewed in the package manager appropriate for the server operating system:\n  To list the version of installed PostgreSQL using psql:\n  $ sudo su - postgres\n  $ psql -–version\n  To list the current version of software for RPM:\n  $ rpm -qa | grep postgres\n  To list the current version of software for APT:\n  $ apt-cache policy postgres\n  All versions of PostgreSQL will be listed on:\n  http://www.postgresql.org/support/versioning/\n  All security-relevant software updates for PostgreSQL will be listed on:\n  http://www.postgresql.org/support/security/\n  If PostgreSQL is not at the latest version, this is a finding.\n  If PostgreSQL is not at the latest version and the evaluated version has CVEs\n  (IAVAs), then this is a CAT I finding.",
            "fix": "Institute and adhere to policies and procedures to ensure that\n  patches are consistently applied to PostgreSQL within the time allowed."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72845.rb",
            "line": 23
          },
          "id": "V-72845"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  execute privileged activities or other system-level access occur.",
          "desc": "Without tracking privileged activity, it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n  System documentation should include a definition of the functionality\n  considered privileged.\n\n  A privileged function in this context is any operation that modifies the\n  structure of the database, its built-in logic, or its security settings. This\n  would include all Data Definition Language (DDL) statements and all\n  security-related statements. In an SQL environment, it encompasses, but is not\n  necessarily limited to:\n\n  CREATE\n  ALTER\n  DROP\n  GRANT\n  REVOKE\n\n  Note: That it is particularly important to audit, and tightly control, any\n  action that weakens the implementation of this requirement itself, since the\n  objective is to have a complete audit trail of all administrative activity.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000504-DB-000355",
            "gid": "V-72969",
            "rid": "SV-87621r1_rule",
            "stig_id": "PGS9-00-006500",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"),\n  create the role bob by running the following SQL:\n    $ sudo su - postgres\n    $ psql -c \"CREATE ROLE bob\"\n\n  Next, change the current role to bob and attempt to execute privileged activity:\n    $ psql -c \"CREATE ROLE stig_test SUPERUSER\"\n    $ psql -c \"CREATE ROLE stig_test CREATEDB\"\n    $ psql -c \"CREATE ROLE stig_test CREATEROLE\"\n    $ psql -c \"CREATE ROLE stig_test CREATEUSER\"\n\n  Now, as the database administrator (shown here as \"postgres\"), verify that\n  an audit event was produced (use the latest log):\n    $ sudo su - postgres\n    $ cat ${PGDATA?}/pg_log/<latest_log>\n\n  < 2016-02-23 20:16:32.396 EST postgres 56cfa74f.79eb postgres: >ERROR: must be\n  superuser to create superusers\n  < 2016-02-23 20:16:32.396 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test SUPERUSER;\n  < 2016-02-23 20:16:48.725 EST postgres 56cfa74f.79eb postgres: >ERROR:\n  permission denied to create role\n  < 2016-02-23 20:16:48.725 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test CREATEDB;\n  < 2016-02-23 20:16:54.365 EST postgres 56cfa74f.79eb postgres: >ERROR: p\n  ermission denied to create role\n  < 2016-02-23 20:16:54.365 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test CREATEROLE;\n  < 2016-02-23 20:17:05.949 EST postgres 56cfa74f.79eb postgres: >ERROR: must be\n  superuser to create superusers\n  < 2016-02-23 20:17:05.949 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test CREATEUSER;\n  If audit records are not produced, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to execute privileged SQL.\n  All denials are logged by default if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72969.rb",
            "line": 46
          },
          "id": "V-72969"
        },
        {
          "title": "PostgreSQL must allow only the ISSM (or individuals or roles appointed\n  by the ISSM) to select which auditable events are to be audited.",
          "desc": "Without the capability to restrict which roles and individuals can\n  select which events are audited, unauthorized personnel may be able to prevent\n  or interfere with the auditing of critical events.\n\n  Suppression of auditing could permit an adversary to evade detection.\n\n  Misconfigured audits can degrade the system's performance by overwhelming the\n  audit log. Misconfigured audits may also make it more difficult to establish,\n  correlate, and investigate the events relating to an incident or identify those\n  responsible for one.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000090-DB-000065",
            "gid": "V-72891",
            "rid": "SV-87543r1_rule",
            "stig_id": "PGS9-00-002600",
            "cci": "CCI-000171",
            "nist": [
              "AU-12 b",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Check PostgreSQL settings and documentation to determine whether designated\n  personnel are able to select which auditable events are being audited.\n  As the database administrator (shown here as \"postgres\"), verify the\n  permissions for PGDATA:\n  $ ls -la ${PGDATA?}\n  If anything in PGDATA is not owned by the database administrator, this is a\n  finding.\n  Next, as the database administrator, run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"\\du\"\n  Review the role permissions, if any role is listed as superuser but should not\n  have that access, this is a finding.",
            "fix": "Configure PostgreSQL's settings to allow designated personnel to\n  select which auditable events are audited.\n  Using pgaudit allows administrators the flexibility to choose what they log.\n  For an overview of the capabilities of pgaudit, see\n  https://github.com/pgaudit/pgaudit.\n  See supplementary content APPENDIX-B for documentation on installing pgaudit.\n  See supplementary content APPENDIX-C for instructions on enabling logging.\n  Only administrators/superuser can change PostgreSQL configurations. Access to\n  the database administrator must be limited to designated personnel only.\n  To ensure that postgresql.conf is owned by the database owner:\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\n  $ chmod 600 ${PGDATA?}/postgresql.conf"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72891.rb",
            "line": 63
          },
          "id": "V-72891"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  modify categorized information (e.g., classification levels/security levels)\n  occur.",
          "desc": "Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000498-DB-000347",
            "gid": "V-72949",
            "rid": "SV-87601r1_rule",
            "stig_id": "PGS9-00-005600",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain \"pgaudit\", this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to modify categories of information.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. All denials are logged when logging is enabled.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72949.rb",
            "line": 46
          },
          "id": "V-72949"
        },
        {
          "title": "The PostgreSQL software installation account must be restricted to\n  authorized users.",
          "desc": "Once released as BOSH package software libraries can not be changed.\n        Any changes to the software libriaries can ONLY be done by creating and\n        deploying a new BOSH release. This is Software-Defined-Infrustructure",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000133-DB-000198",
            "gid": "V-72899",
            "rid": "SV-87551r1_rule",
            "stig_id": "PGS9-00-003200",
            "cci": "CCI-001499",
            "nist": [
              "CM-5 (6)",
              "Rev_4"
            ],
            "check": "Review procedures for controlling, granting access to, and\n  tracking use of the PostgreSQL software installation account(s).\n  If access or use of this account is not restricted to the minimum number of\n  personnel required or if unauthorized access to the account has been granted,\n  this is a finding.",
            "fix": "Develop, document, and implement procedures to restrict and track\n  use of the PostgreSQL software installation account."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72899.rb",
            "line": 23
          },
          "id": "V-72899"
        },
        {
          "title": "PostgreSQL must allocate audit record storage capacity in accordance\n  with organization-defined audit record storage requirements.",
          "desc": "System is sized based on its intended use and constantly monitored",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000357-DB-000316",
            "gid": "V-72877",
            "rid": "SV-87529r1_rule",
            "stig_id": "PGS9-00-002100",
            "cci": "CCI-001849",
            "nist": [
              "AU-4",
              "Rev_4"
            ],
            "check": "Investigate whether there have been any incidents where\n  PostgreSQL ran out of audit log space since the last time the space was\n  allocated or other corrective measures were taken.\n  If there have been incidents where PostgreSQL ran out of audit log space,\n  this is a finding.",
            "fix": "Allocate sufficient audit file/table space to support peak demand."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72877.rb",
            "line": 23
          },
          "id": "V-72877"
        },
        {
          "title": "PostgreSQL must map the PKI-authenticated identity to an associated user\naccount.",
          "desc": "Crunchy DBaaS exclusively utilizes System Accounts which are negotiated\n  through the Service Broker interactions. Crunchy does not maintain any\n  user accounts.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000177-DB-000069",
            "gid": "V-73055",
            "rid": "SV-87707r1_rule",
            "stig_id": "PGS9-00-011800",
            "cci": "CCI-000187",
            "nist": [
              "IA-5 (2) (c)",
              "Rev_4"
            ],
            "check": "The cn (Common Name) attribute of the certificate will be compared\nto the requested database user name, and if they match the login will be allowed.\n\nTo check the cn of the certificate, using openssl, do the following:\n\n$ openssl x509 -noout -subject -in client_cert\n\nIf the cn does not match the users listed in PostgreSQL and no user mapping is used,\nthis is a finding.\n\nUser name mapping can be used to allow cn to be different from the database user\nname. If User Name Maps are used, run the following as the database administrator\n(shown here as \"postgres\"), to get a list of maps used for authentication:\n\n$ sudo su - postgres\n$ grep \"map\" ${PGDATA?}/pg_hba.conf\n\nWith the names of the maps used, check those maps against the user name mappings in\npg_ident.conf:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/pg_ident.conf\n\nIf user accounts are not being mapped to authenticated identities, this is a finding.\n\nIf the cn and the username mapping do not match, this is a finding.",
            "fix": "Configure PostgreSQL to map authenticated identities directly to\nPostgreSQL user accounts.\n\nFor information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73055.rb",
            "line": 23
          },
          "id": "V-73055"
        },
        {
          "title": "The system must provide a warning to appropriate support staff when\nallocated audit record storage volume reaches 75% of maximum audit record storage\ncapacity.",
          "desc": "Centralized Enterprize monitoring and alerting solution is not yet\n        implemented by the sponsor. Crunchy services are constantly undergo extensive\n        health checks",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000359-DB-000319",
            "gid": "V-73023",
            "rid": "SV-87675r1_rule",
            "stig_id": "PGS9-00-009900",
            "cci": "CCI-001855",
            "nist": [
              "AU-5 (1)",
              "Rev_4"
            ],
            "check": "Review system configuration.\n\nIf no script/tool is monitoring the partition for the PostgreSQL log directories,\nthis is a finding.\n\nIf appropriate support staff are not notified immediately upon storage volume\nutilization reaching 75%, this is a finding.",
            "fix": "Configure the system to notify appropriate support staff immediately\nupon storage volume utilization reaching 75%.\n\nPostgreSQL does not monitor storage, however, it is possible to monitor storage with\na script.\n\n##### Example Monitoring Script\n\n#!/bin/bash\n\nPGDATA=/var/lib/psql/9.5/data\nCURRENT=$(df ${PGDATA?} | grep / | awk '{ print $5}' | sed 's/%//g')\nTHRESHOLD=75\n\nif [ \"$CURRENT\" -gt \"$THRESHOLD\" ] ; then\nmail -s 'Disk Space Alert' mail@support.com << EOF\nThe data directory volume is almost full. Used: $CURRENT\n%EOF\nfi\n\nSchedule this script in cron to run around the clock."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73023.rb",
            "line": 23
          },
          "id": "V-73023"
        },
        {
          "title": "PostgreSQL must record time stamps, in audit records and application\n  data, that can be mapped to Coordinated Universal Time (UTC, formerly GMT).",
          "desc": "If time stamps are not consistently applied and there is no common time\n  reference, it is difficult to perform forensic analysis.\n  Time stamps generated by PostgreSQL must include date and time. Time is\n  commonly expressed in Coordinated Universal Time (UTC), a modern continuation\n  of Greenwich Mean Time (GMT), or local time with an offset from UTC.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000374-DB-000322",
            "gid": "V-72887",
            "rid": "SV-87539r1_rule",
            "stig_id": "PGS9-00-002400",
            "cci": "CCI-001890",
            "nist": [
              "AU-8 b",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  When a PostgreSQL cluster is initialized using initdb, the PostgreSQL cluster\n  will be configured to use the same time zone as the target server.\n  As the database administrator (shown here as \"postgres\"), check the current\n  log_timezone setting by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_timezone\"\n  log_timezone\n  --------------\n  UTC\n  (1 row)\n  If log_timezone is not set to the desired time zone, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To change log_timezone in postgresql.conf to use a different time zone for\n  logs, as the database administrator (shown here as \"postgres\"), run the\n  following:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_timezone='UTC'\n  Next, restart the database:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl restart postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 restart"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72887.rb",
            "line": 51
          },
          "id": "V-72887"
        },
        {
          "title": "PostgreSQL must protect its audit configuration from unauthorized\n        modification.",
          "desc": "Protecting audit data also includes identifying and protecting the tools\n        used to view and manipulate log data. Therefore, protecting audit tools\n        is necessary to prevent unauthorized operation on audit data.\n\n        Applications providing tools to interface with audit data will leverage\n        user permissions and roles identifying the user accessing the tools and\n        the corresponding rights the user enjoys in order make access decisions\n        regarding the modification of audit tools.\n\n        Audit tools include, but are not limited to, vendor-provided and open source\n        audit tools needed to successfully view and manipulate audit information\n        system activity and records. Audit tools include custom queries and\n        report generators.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000122-DB-000203",
            "gid": "V-73061",
            "rid": "SV-87713r1_rule",
            "stig_id": "PGS9-00-012200",
            "cci": "CCI-001494",
            "nist": [
              "AU-9",
              "Rev_4"
            ],
            "check": "All configurations for auditing and logging can be found in the\n      postgresql.conf configuration file. By default, this file is owned by the\n      database administrator account.\n\n      To check that the permissions of the postgresql.conf are owned by the database\n      administrator with permissions of 0600, run the following as the database\n      administrator (shown here as \"postgres\"):\n\n      $ sudo su - postgres\n      $ ls -la ${PGDATA?}\n\n      If postgresql.conf is not owned by the database administrator or does not\n      have 0600 permissions, this is a finding.\n\n      #### stderr Logging\n\n      To check that logs are created with 0600 permissions, check the\n      postgresql.conf file for the following setting:\n\n      $ sudo su - postgres\n      $ psql -c \"SHOW log_file_mode\"\n\n      If permissions are not 0600, this is a finding.\n\n      #### syslog Logging\n\n      If PostgreSQL is configured to use syslog, verify that the logs are owned\n      by root and have 0600 permissions. If they are not, this is a finding.",
            "fix": "Apply or modify access controls and permissions (both within PostgreSQL\n      and in the file system/operating system) to tools used to view or modify\n      audit log data. Tools must be configurable by authorized personnel only.\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n      log_file_mode = 0600\n\n      Next, as the database administrator (shown here as \"postgres\"), change\n      the ownership and permissions of configuration files in PGDATA:\n\n      $ sudo su - postgres\n      $ chown postgres:postgres ${PGDATA?}/*.conf\n      $ chmod 0600 ${PGDATA?}/*.conf"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73061.rb",
            "line": 105
          },
          "id": "V-73061"
        },
        {
          "title": "PostgreSQL must associate organization-defined types of security labels\n  having organization-defined security label values with information in\ntransmission.",
          "desc": "No  security labeling requirements have been specified. It is ISO\n        responsibility to utilize PostgreSQL RLS capabilities",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000314-DB-000310",
            "gid": "V-72861",
            "rid": "SV-87513r1_rule",
            "stig_id": "PGS9-00-001100",
            "cci": "CCI-002264",
            "nist": [
              "AC-16 a",
              "Rev_4"
            ],
            "check": "If security labeling is not required, this is not a finding.\n  First, as the database administrator (shown here as \"postgres\"), run the\n  following SQL against each table that requires security labels:\n  $ sudo su - postgres\n  $ psql -c \"\\d+ <schema_name>.<table_name>\"\n  If security labeling is required and the results of the SQL above do not show\n    a policy attached to the table, this is a finding.\n    If security labeling is required and not implemented according to the system\n    documentation, such as SSP, this is a finding.\n    If security labeling requirements have been specified, but the security\n    labeling is not implemented or does not reliably maintain labels on\n    information in storage, this is a finding.",
            "fix": "In addition to the SQL-standard privilege system available through\n  GRANT, tables can have row security policies that restrict, on a per-user\n  basis, which rows can be returned by normal queries or inserted, updated, or\n  deleted by data modification commands. This feature is also known as Row-Level\n  Security (RLS).\n  RLS policies can be very different depending on their use case. For one\n    example of using RLS for Security Labels, see supplementary content APPENDIX-D."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72861.rb",
            "line": 23
          },
          "id": "V-72861"
        },
        {
          "title": "PostgreSQL must uniquely identify and authenticate non-organizational\n  users (or processes acting on behalf of non-organizational users).",
          "desc": "Non-organizational users include all information system users other\n  than organizational users, which includes organizational employees or\n  individuals the organization deems to have equivalent status of employees\n  (e.g., contractors, guest researchers, individuals from allied nations).\n  Non-organizational users must be uniquely identified and authenticated for all\n  accesses other than those accesses explicitly identified and documented by the\n  organization when related to the use of anonymous access, such as accessing a\n  web server.\n  Accordingly, a risk assessment is used in determining the authentication needs\n  of the organization.\n  Scalability, practicality, and security are simultaneously considered in\n  balancing the need to ensure ease of use for access to federal information and\n  information systems with the need to protect and adequately mitigate risk to\n  organizational operations, organizational assets, individuals, other\n  organizations, and the Nation.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000180-DB-000115",
            "gid": "V-72867",
            "rid": "SV-87519r1_rule",
            "stig_id": "PGS9-00-001400",
            "cci": "CCI-000804",
            "nist": [
              "IA-8",
              "Rev_4"
            ],
            "check": "PostgreSQL uniquely identifies and authenticates PostgreSQL\n  users through the use of DBMS roles.\n  To list all roles in the database, as the database administrator (shown here\n  as \"postgres\"), run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"\\du\"\n  If users are not uniquely identified as per organizational documentation, this\n  is a finding.",
            "fix": "To drop a role, as the database administrator (shown here as\n  \"postgres\"), run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"DROP ROLE <role_to_drop>\"\n  To create a role, as the database administrator, run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE <role name> LOGIN\"\n  For the complete list of permissions allowed by roles, see the official\n  documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72867.rb",
            "line": 50
          },
          "id": "V-72867"
        },
        {
          "title": "If passwords are used for authentication, PostgreSQL must store only\nhashed, salted representations of passwords.",
          "desc": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not\npossible to employ a PKI certificate, and requires AO approval.\n\nIn such cases, database passwords stored in clear text, using reversible encryption,\nor using unsalted hashes would be vulnerable to unauthorized disclosure. Database\npasswords must always be in the form of one-way, salted hashes when stored\ninternally or externally to PostgreSQL.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000171-DB-000074",
            "gid": "V-73015",
            "rid": "SV-87667r1_rule",
            "stig_id": "PGS9-00-009500",
            "cci": "CCI-000196",
            "nist": [
              "IA-5 (1) (c)",
              "Rev_4"
            ],
            "check": "To check if password encryption is enabled, as the database\nadministrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW password_encryption\"\n\nIf password_encryption is not on, this is a finding.\n\nNext, to identify if any passwords have been stored without being hashed and salted,\nas the database administrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -x -c \"SELECT * FROM pg_shadow\"\n\nIf any password is in plaintext, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo enable password_encryption, as the database administrator, edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\npassword_encryption = on\n\nInstitute a policy of not using the \"WITH UNENCRYPTED PASSWORD\" option with the\nCREATE ROLE/USER and ALTER ROLE/USER commands. (This option overrides the setting of\nthe password_encryption configuration parameter.)\n\nAs the system administrator, restart the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl restart postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 restart"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73015.rb",
            "line": 45
          },
          "id": "V-73015"
        },
        {
          "title": "PostgreSQL must maintain the confidentiality and integrity of\n  information during preparation for transmission.",
          "desc": "Information can be either unintentionally or maliciously disclosed or\n  modified during preparation for transmission, including, for example, during\n  aggregation, at protocol transformation points, and during packing/unpacking.\n  These unauthorized disclosures or modifications compromise the confidentiality\n  or integrity of the information.\n  Use of this requirement will be limited to situations where the data owner has\n  a strict requirement for ensuring data integrity and confidentiality is\n  maintained at every step of the data transfer and handling process.\n  When transmitting data, PostgreSQL, associated applications, and\n  infrastructure must leverage transmission protection mechanisms.\n  PostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c, while the name\n  is misleading, this function enables only TLS encryption methods, not SSL.\n  See OpenSSL: https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.htm.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000441-DB-000378",
            "gid": "V-72981",
            "rid": "SV-87633r1_rule",
            "stig_id": "PGS9-00-007200",
            "cci": "CCI-002420",
            "nist": [
              "SC-8 (2)",
              "Rev_4"
            ],
            "check": "If the data owner does not have a strict requirement for ensuring\n  data integrity and confidentiality is maintained at every step of the data\n  transfer and handling process, this is not a finding.\n  As the database administrator (shown here as \"postgres\"), verify SSL is\n  enabled by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW ssl\"\n  If SSL is not enabled, this is a finding.\n  If PostgreSQL does not employ protective measures against unauthorized\n  disclosure and modification during preparation for transmission, this is a\n  finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Implement protective measures against unauthorized disclosure and modification\n  during preparation for transmission.\n  To configure PostgreSQL to use SSL, as a database administrator (shown here as\n  \"postgres\"), edit postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameter:\n  ssl = on\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\n  For more information on configuring PostgreSQL to use SSL, see supplementary\n  content APPENDIX-G."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72981.rb",
            "line": 46
          },
          "id": "V-72981"
        },
        {
          "title": "PostgreSQL must provide the means for individuals in authorized roles to\nchange the auditing to be performed on all application components, based on all\nselectable event criteria within organization-defined time thresholds.",
          "desc": "If authorized individuals do not have the ability to modify auditing\nparameters in response to a changing threat environment, the organization may not be\nable to effectively respond, and important forensic information may be lost.\n\nThis requirement enables organizations to extend or limit auditing as necessary to\nmeet organizational requirements. Auditing that is limited to conserve information\nsystem resources may be extended to address certain threat situations. In addition,\nauditing may be limited to a specific set of events to facilitate audit reduction,\nanalysis, and reporting. Organizations can establish time thresholds in which audit\nactions are changed, for example, near real time, within minutes, or within hours.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000353-DB-000324",
            "gid": "V-73025",
            "rid": "SV-87677r1_rule",
            "stig_id": "PGS9-00-010000",
            "cci": "CCI-001914",
            "nist": [
              "AU-12 (3)",
              "Rev_4"
            ],
            "check": "First, as the database administrator, check if pgaudit is present in\nshared_preload_libraries:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf pgaudit is not present in the result from the query, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nFor audit logging we suggest using pgaudit. For instructions on how to setup\npgaudit, see supplementary content APPENDIX-B.\n\nAs a superuser (postgres), any pgaudit parameter can be changed in postgresql.conf.\nConfigurations can only be changed by a superuser.\n\n### Example: Change Auditing To Log Any ROLE Statements\n\nNote: This will override any setting already configured.\n\nAlter the configuration to do role-based logging:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log = 'role'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\n### Example: Set An Auditing Role And Grant Privileges\n\nAn audit role can be configured and granted privileges to specific tables and\ncolumns that need logging.\n\n##### Create Test Table\n\n$ sudo su - postgres\n$ psql -c \"CREATE TABLE public.stig_audit_example(id INT, name TEXT, password\nTEXT);\"\n\n##### Define Auditing Role\n\nAs PostgreSQL superuser (such as postgres), add the following to postgresql.conf or\nany included configuration files.\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.role = 'auditor'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\nNext in PostgreSQL create a new role:\n\npostgres=# CREATE ROLE auditor;\npostgres=# GRANT select(password) ON public.stig_audit_example TO auditor;\n\nNote: This role is created with NOLOGIN privileges by default.\n\nNow any SELECT on the column password will be logged:\n\n$ sudo su - postgres\n$ psql -c \"SELECT password FROM public.stig_audit_example;\"\n$ cat ${PGDATA?}/pg_log/<latest_log>\n< 2016-01-28 16:46:09.038 UTC bob postgres: >LOG: AUDIT:\nOBJECT,6,1,READ,SELECT,TABLE,public.stig_audit_example,SELECT password FROM\nstig_audit_example;,<none>\n\n## Change Configurations During A Specific Timeframe\n\nDeploy PostgreSQL that allows audit configuration changes to take effect within the\ntimeframe required by the application owner and without involving actions or events\nthat the application owner rules unacceptable.\n\nCrontab can be used to do this.\n\nFor a specific audit role:\n\n# Grant specific audit privileges to an auditing role at 5 PM every day of the week,\nmonth, year at the 0 minute mark.\n0 5 * * * postgres /usr/bin/psql -c \"GRANT select(password) ON\npublic.stig_audit_example TO auditor;\"\n# Revoke specific audit privileges to an auditing role at 5 PM every day of the\nweek, month, year at the 0 minute mark.\n0 17 * * * postgres /usr/bin/psql -c \"REVOKE select(password) ON\npublic.stig_audit_example FROM auditor;\""
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73025.rb",
            "line": 45
          },
          "id": "V-73025"
        },
        {
          "title": "PostgreSQL must produce audit records of its enforcement of access\n  restrictions associated with changes to the configuration of PostgreSQL or\n  database(s).",
          "desc": "Without auditing the enforcement of access restrictions against changes\n  to configuration, it would be difficult to identify attempted attacks and an\n  audit trail would not be available for forensic investigation for\n  after-the-fact actions.\n  Enforcement actions are the methods or mechanisms used to prevent unauthorized\n  changes to configuration settings. Enforcement action methods may be as simple\n  as denying access to a file based on the application of file permissions\n  (access restriction). Audit items may consist of lists of actions blocked by\n  access restrictions or changes identified after the fact.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000381-DB-000361",
            "gid": "V-72913",
            "rid": "SV-87565r1_rule",
            "stig_id": "PGS9-00-004100",
            "cci": "CCI-001814",
            "nist": [
              "CM-5 (1)",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To verify that system denies are logged when unprivileged users attempt to\n  change database configuration, as the database administrator (shown here as\n  \"postgres\"), run the following commands:\n  $ sudo su - postgres\n  $ psql\n  Next, create a role with no privileges, change the current role to that user\n  and attempt to change a configuration by running the following SQL:\n  CREATE ROLE bob;\n  SET ROLE bob;\n  SET pgaudit.role='test';\n  Now check pg_log (use the latest log):\n  $ cat ${PGDATA?}/pg_log/postgresql-Thu.log\n  < 2016-01-28 17:57:34.092 UTC bob postgres: >ERROR: permission denied to set\n  parameter \"pgaudit.role\"\n  < 2016-01-28 17:57:34.092 UTC bob postgres: >STATEMENT: SET pgaudit.role='test';\n  If the denial is not logged, this is a finding.\n  By default PostgreSQL configuration files are owned by the postgres user and\n  cannot be edited by non-privileged users:\n  $ ls -la ${PGDATA?} | grep postgresql.conf\n  -rw-------. 1 postgres postgres 21758 Jan 22 10:27 postgresql.conf\n  If postgresql.conf is not owned by the database owner and does not have read\n  and write permissions for the owner, this is a finding.",
            "fix": "Enable logging.\n  All denials are logged by default if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72913.rb",
            "line": 64
          },
          "id": "V-72913"
        },
        {
          "title": "PostgreSQL must generate audit records when privileges/permissions are\n  modified.",
          "desc": "Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n  In an SQL environment, modifying permissions is typically done via the GRANT\n  and REVOKE commands.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000495-DB-000328",
            "gid": "V-72965",
            "rid": "SV-87617r1_rule",
            "stig_id": "PGS9-00-006400",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role is enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment v\n  ariable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='role'\n  Now, as the system administrator, reload the server with the new\n  configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72965.rb",
            "line": 46
          },
          "id": "V-72965"
        },
        {
          "title": "PostgreSQL must protect its audit features from unauthorized removal.",
          "desc": "Protecting audit data also includes identifying and protecting the tools\nused to view and manipulate log data. Therefore, protecting audit tools is necessary\nto prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user\npermissions and roles identifying the user accessing the tools and the corresponding\nrights the user enjoys in order make access decisions regarding the deletion of\naudit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit\ntools needed to successfully view and manipulate audit information system activity\nand records. Audit tools include custom queries and report generators.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000123-DB-000204",
            "gid": "V-73043",
            "rid": "SV-87695r1_rule",
            "stig_id": "PGS9-00-011200",
            "cci": "CCI-001495",
            "nist": [
              "AU-9",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), verify\nthe permissions of PGDATA:\n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}\n\nIf PGDATA is not owned by postgres:postgres or if files can be accessed by others,\nthis is a finding.\n\nAs the system administrator, verify the permissions of pgsql shared objects and\ncompiled binaries:\n\n$ ls -la /usr/pgsql-9.5/bin/\n$ ls -la /usr/pgsql-9.5/share\n$ ls -la /usr/pgsql-9.5/include\n\nIf any of these are not owned by root:root, this is a finding.",
            "fix": "As the system administrator, change the permissions of PGDATA:\n\n$ sudo chown -R postgres:postgres ${PGDATA?}\n$ sudo chmod 700 ${PGDATA?}\n\nAs the system administrator, change the permissions of pgsql:\n\n$ sudo chown -R root:root /usr/pgsql-9.5/share/contrib/pgaudit"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73043.rb",
            "line": 58
          },
          "id": "V-73043"
        },
        {
          "title": "PostgreSQL must invalidate session identifiers upon user logout or other\nsession termination.",
          "desc": "Captured sessions can be reused in \"replay\" attacks. This requirement\nlimits the ability of adversaries to capture and continue to employ previously valid\nsession IDs.\n\nThis requirement focuses on communications protection for PostgreSQL session rather\nthan for the network packet. The intent of this control is to establish grounds for\nconfidence at each end of a communications session in the ongoing identity of the\nother party and in the validity of the information being transmitted.\n\nSession IDs are tokens generated by PostgreSQLs to uniquely identify a user's (or\nprocess's) session. DBMSs will make access decisions and execute logic based on the\nsession ID.\n\nUnique session IDs help to reduce predictability of said identifiers. Unique session\nIDs address man-in-the-middle attacks, including session hijacking or insertion of.\ninformation into a session. If the attacker is unable to identify or guess the\nsession information related to pending application traffic, they will have more\ndifficulty in hijacking the session or otherwise manipulating valid sessions.\n\nWhen a user logs out, or when any other session termination event occurs, PostgreSQL\nmust terminate the user session(s) to minimize the potential for sessions to be\nhijacked.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000220-DB-000149",
            "gid": "V-73037",
            "rid": "SV-87689r1_rule",
            "stig_id": "PGS9-00-010600",
            "cci": "CCI-001185",
            "nist": [
              "SC-23 (1)",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), run the\nfollowing SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW tcp_keepalives_idle\"\n$ psql -c \"SHOW tcp_keepalives_interval\"\n$ psql -c \"SHOW tcp_keepalives_count\"\n$ psql -c \"SHOW statement_timeout\"\n\nIf these settings are not set, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nAs the database administrator (shown here as \"postgres\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi $PGDATA/postgresql.conf\n\nSet the following parameters to organizational requirements:\n\nstatement_timeout = 10000 #milliseconds\ntcp_keepalives_idle = 10 # seconds\ntcp_keepalives_interval = 10 # seconds\ntcp_keepalives_count = 10\n\nNow, as the system administrator, restart the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl restart postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 restart"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73037.rb",
            "line": 45
          },
          "id": "V-73037"
        },
        {
          "title": "PostgreSQL must generate time stamps, for audit records and application\ndata, with a minimum granularity of one second.",
          "desc": "Without sufficient granularity of time stamps, it is not possible to\nadequately determine the chronological order of records.\n\nTime stamps generated by PostgreSQL must include date and time. Granularity of time\nmeasurements refers to the precision available in time stamp values. Granularity\ncoarser than one second is not sufficient for audit trail purposes. Time stamp\nvalues are typically presented with three or more decimal places of seconds;\nhowever, the actual granularity may be coarser than the apparent precision. For\nexample, PostgreSQL will always return at least millisecond timestamps but it can be\ntruncated using EXTRACT functions: SELECT EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16\n20:38:40');.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000375-DB-000323",
            "gid": "V-72985",
            "rid": "SV-87637r1_rule",
            "stig_id": "PGS9-00-007700",
            "cci": "CCI-001889",
            "nist": [
              "AU-8 b",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\nvariable. See supplementary content APPENDIX-F for instructions on configuring\nPGDATA.\n\nFirst, as the database administrator (shown here as \"postgres\"), verify the\ncurrent log_line_prefix setting by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_line_prefix\"\n\nIf log_line_prefix does not contain %m, this is a finding.\n\nNext check the logs to verify time stamps are being logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/pg_log/<latest_log>\n< 2016-02-23 12:53:33.947 EDT postgres postgres 570bd68d.3912 >LOG: connection\nauthorized: user=postgres database=postgres\n< 2016-02-23 12:53:41.576 EDT postgres postgres 570bd68d.3912 >LOG: AUDIT:\nSESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE test_srg(id INT);,<none>\n< 2016-02-23 12:53:44.372 EDT postgres postgres 570bd68d.3912 >LOG: disconnection:\nsession time: 0:00:10.426 user=postgres database=postgres host=[local]\n\nIf time stamps are not being logged, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nPostgreSQL will not log anything if logging is not enabled. To ensure that logging\nis enabled, review supplementary content APPENDIX-C for instructions on enabling\nlogging.\n\nIf logging is enabled the following configurations must be made to log events with\ntime stamps:\n\nFirst, as the database administrator (shown here as \"postgres\"), edit\npostgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd %m to log_line_prefix to enable time stamps with milliseconds:\n\nlog_line_prefix = '< %m >'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72985.rb",
            "line": 46
          },
          "id": "V-72985"
        },
        {
          "title": "PostgreSQL must generate audit records when security objects are\n  deleted.",
          "desc": "The removal of security objects from the database/PostgreSQL would\n  seriously degrade a system's information assurance posture. If such an event\n  occurs, it must be logged.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000501-DB-000336",
            "gid": "V-72939",
            "rid": "SV-87591r1_rule",
            "stig_id": "PGS9-00-005200",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), create a\n  test table stig_test, enable row level security, and create a policy by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE TABLE stig_test(id INT)\"\n  $ psql -c \"ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY\"\n  $ psql -c \"CREATE POLICY lock_table ON stig_test USING ('postgres' =\n  current_user)\"\n  Next, drop the policy and disable row level security:\n  $ psql -c \"DROP POLICY lock_table ON stig_test\"\n  $ psql -c \"ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY\"\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  security objects deletions were logged:\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  2016-03-30 14:54:18.991 EDT postgres postgres LOG: AUDIT:\n  SESSION,11,1,DDL,DROP POLICY,,,DROP POLICY lock_table ON stig_test;,<none>\n  2016-03-30 14:54:42.373 EDT postgres postgres LOG: AUDIT:\n  SESSION,12,1,DDL,ALTER TABLE,,,ALTER TABLE stig_test DISABLE ROW LEVEL\n  SECURITY;,<none>\n  If audit records are not produced when security objects are dropped, this is a\n  finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'ddl'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72939.rb",
            "line": 46
          },
          "id": "V-72939"
        },
        {
          "title": "Audit records must be generated when categorized information (e.g.,\n        classification levels/security levels) is deleted.",
          "desc": "Changes in categorized information must be tracked. Without an audit\n        trail, unauthorized access to protected data could go undetected.\n\n        For detailed information on categorizing information, refer to FIPS\n        Publication 199, Standards for Security Categorization of Federal\n        Information and Information Systems, and FIPS Publication 200, Minimum\n        Security Requirements for Federal Information and Information Systems.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000502-DB-000348",
            "gid": "V-73065",
            "rid": "SV-87717r1_rule",
            "stig_id": "PGS9-00-012500",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "As the database administrator, verify pgaudit is enabled by running\n      the following SQL:\n\n      $ sudo su - postgres\n      $ psql -c \"SHOW shared_preload_libraries\"\n\n      If the output does not contain \"pgaudit\", this is a finding.\n\n      Verify that role, read, write and ddl auditing are enabled:\n\n      $ psql -c \"SHOW pgaudit.log\"\n\n      If the output does not contain role, read, write, and ddl,\n      this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\n      See supplementary content APPENDIX-F for instructions on configuring\n      PGDATA.\n\n      To ensure that logging is enabled, review supplementary content APPENDIX-C\n      for instructions on enabling logging.\n\n      Using pgaudit PostgreSQL can be configured to audit these requests. See\n      supplementary content APPENDIX-B for documentation on installing pgaudit.\n\n      With pgaudit installed the following configurations can be made:\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n\n      Add the following parameters (or edit existing parameters):\n\n      pgaudit.log='ddl, role, read, write'\n\n      Now, as the system administrator, reload the server with the new\n      configuration:\n\n      # SYSTEMD SERVER ONLY\n      $ sudo systemctl reload postgresql-9.5\n\n      # INITD SERVER ONLY\n      $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73065.rb",
            "line": 104
          },
          "id": "V-73065"
        },
        {
          "title": "PostgreSQL must generate audit records showing starting and ending time\n  for user access to the database(s).",
          "desc": "For completeness of forensic analysis, it is necessary to know how long\n  a user's (or other principal's) connection to PostgreSQL lasts. This can be\n  achieved by recording disconnections, in addition to logons/connections, in\n  the audit logs.\n  Disconnection may be initiated by the user or forced by the system (as in a\n  timeout) or result from a system or network failure. To the greatest extent\n  possible, all disconnections must be logged.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000505-DB-000352",
            "gid": "V-72925",
            "rid": "SV-87577r1_rule",
            "stig_id": "PGS9-00-004700",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, log into the database with the postgres user by running the following\n  commands:\n  $ sudo su - postgres\n  $ psql -U postgres\n  Next, as the database administrator, verify the log for a connection audit trail:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/postgresql-Tue.log\n  < 2016-02-23 20:25:39.931 EST postgres 56cfa993.7a72 postgres: >LOG: connection\n  authorized: user=postgres database=postgres\n  < 2016-02-23 20:27:45.428 EST postgres 56cfa993.7a72 postgres: >LOG:\n  AUDIT: SESSION,1,1,READ,SELECT,,,SELECT current_user;,<none>\n  < 2016-02-23 20:27:47.988 EST postgres 56cfa993.7a72 postgres: >LOG:\n  disconnection: session time: 0:00:08.057 user=postgres database=postgres\n  host=[local]\n  If connections are not logged, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  If logging is enabled the following configurations must be made to log\n  connections, date/time, username, and session identifier.\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf by running the following:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Edit the following parameters:\n  log_connections = on\n  log_disconnections = on\n  log_line_prefix = '< %m %u %c: >'\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %c is the session ID for the connection\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72925.rb",
            "line": 46
          },
          "id": "V-72925"
        },
        {
          "title": "PostgreSQL must generate audit records when categorized information\n  (e.g., classification levels/security levels) is accessed.",
          "desc": "Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000494-DB-000344",
            "gid": "V-72919",
            "rid": "SV-87571r1_rule",
            "stig_id": "PGS9-00-004400",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), run\n  the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW pgaudit.log\"\n  If pgaudit.log does not contain, \"ddl, write, role\", this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using `pgaudit` the DBMS (PostgreSQL) can be configured to audit these\n  requests. See supplementary content `APPENDIX-B` for documentation on\n  installing `pgaudit`.\n  With `pgaudit` installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'ddl, write, role'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72919.rb",
            "line": 46
          },
          "id": "V-72919"
        },
        {
          "title": "PostgreSQL must provide audit record generation capability for\n  DoD-defined auditable events within all DBMS/database components.",
          "desc": "Crunchy Audit Logs meet all provided to us organization-defined\n        auditable events",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000089-DB-000064",
            "gid": "V-72983",
            "rid": "SV-87635r1_rule",
            "stig_id": "PGS9-00-007400",
            "cci": "CCI-000169",
            "nist": [
              "AU-12 a",
              "Rev_4"
            ],
            "check": "Check PostgreSQL auditing to determine whether\n  organization-defined auditable events are being audited by the system.\n  If organization-defined auditable events are not being audited, this is a\n  finding.",
            "fix": "Configure PostgreSQL to generate audit records for at least the\n  DoD minimum set of events.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging."
          },
          "code": "",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72983.rb",
            "line": 23
          },
          "id": "V-72983"
        }
      ],
      "groups": [
        {
          "title": null,
          "controls": [
            "V-73005"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73005.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73041"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73041.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72851"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72851.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72917"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72917.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73029"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73029.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72893"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72893.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72843"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72843.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73045"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73045.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73059"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73059.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72873"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72873.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73049"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73049.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73047"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73047.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73001"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73001.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72971"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72971.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72865"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72865.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72945"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72945.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72859"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72859.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72863"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72863.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73063"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73063.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73067"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73067.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72869"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72869.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72853"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72853.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72987"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72987.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72955"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72955.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72909"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72909.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72989"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72989.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72883"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72883.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72993"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72993.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73003"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73003.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72963"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72963.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72977"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72977.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72901"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72901.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72951"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72951.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73017"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73017.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73123"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73123.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72973"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72973.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72941"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72941.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72849"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72849.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72871"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72871.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72911"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72911.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73071"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73071.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72897"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72897.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73013"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73013.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72905"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72905.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72995"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72995.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73051"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73051.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72947"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72947.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72907"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72907.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73027"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73027.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72959"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72959.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73019"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73019.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73039"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73039.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72979"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72979.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72953"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72953.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72885"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72885.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72895"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72895.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73033"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73033.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72933"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72933.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72921"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72921.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72847"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72847.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73035"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73035.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72915"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72915.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72923"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72923.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73009"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73009.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72903"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72903.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73011"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73011.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72857"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72857.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72961"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72961.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73069"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73069.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73031"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73031.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73057"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73057.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72927"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72927.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73007"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73007.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72875"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72875.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72855"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72855.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73053"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73053.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72931"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72931.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73021"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73021.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72997"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72997.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72991"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72991.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72889"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72889.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72957"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72957.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72999"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72999.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72841"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72841.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72975"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72975.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72929"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72929.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72845"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72845.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72969"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72969.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72891"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72891.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72949"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72949.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72899"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72899.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72877"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72877.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73055"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73055.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73023"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73023.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72887"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72887.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73061"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73061.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72861"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72861.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72867"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72867.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73015"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73015.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72981"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72981.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73025"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73025.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72913"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72913.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72965"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72965.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73043"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73043.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73037"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73037.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72985"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72985.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72939"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72939.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73065"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-73065.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72925"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72925.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72919"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72919.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72983"
          ],
          "id": "/var/vcap/packages/postgresql-baseline/controls/V-72983.rb"
        }
      ],
      "attributes": [],
      "sha256": "a2138497f5155244d6fcdb0f4d89229439459c53b25316d9deb66b16571549f1"
    },
    {
      "name": "crunchydata-postgres-baseline",
      "title": "CrunchyData PostgreSQL 9.x Security Technical Implementation Guide",
      "maintainer": "Aaron Lippold <lippold@gmail.com>,",
      "copyright": "Aaron Lippold <lippold@gmail.com>,",
      "copyright_email": "support@crunchydata.com",
      "license": "Apache 2.0",
      "summary": "This Security Technical Implementation Guide is published as a tool to improve the security of Department of Defense (DoD) information systems. The requirements are derived from the National Institute of Standards and Technology (NIST) 800-53 and related documents. Comments or proposed revisions to this document should be sent via email to the following address: disa.stig_spt@mail.mil. Release Date: 2017-01-20 Version: 1 Publisher: DISA Source: STIG.DOD.MIL uri: http://iase.disa.mil",
      "version": "0.0.1",
      "supports": [],
      "controls": [
        {
          "title": "PostgreSQL must produce audit records containing sufficient information to\nestablish the sources (origins) of the events.",
          "desc": "Information system auditing capability is critical for accurate forensic\nanalysis. Without establishing the source of the event, it is impossible to\nestablish, correlate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment and provide forensic analysis, it is\nessential for security personnel to know where events occurred, such as application\ncomponents, modules, session identifiers, filenames, host names, and functionality.\n\nIn addition to logging where events occur within the application, the application\nmust also produce audit records that identify the application itself as the source\nof the event.\n\nAssociating information about the source of the event within the application\nprovides a means of investigating an attack; recognizing resource utilization or\ncapacity thresholds; or identifying an improperly configured application.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000098-DB-000042",
            "gid": "V-73005",
            "rid": "SV-87657r1_rule",
            "stig_id": "PGS9-00-008800",
            "cci": "CCI-000133",
            "nist": [
              "AU-3",
              "Rev_4"
            ],
            "check": "Check PostgreSQL settings and existing audit records to verify\ninformation specific to the source (origin) of the event is being captured and\nstored with audit records.\n\nAs the database administrator (usually postgres, check the current log_line_prefix\nand \"log_hostname\" setting by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_line_prefix\"\n$ psql -c \"SHOW log_hostname\"\n\nFor a complete list of extra information that can be added to log_line_prefix, see\nthe official documentation:\nhttps://www.postgresql.org/docs/current/static/runtime-config-logging.html#GUC-LOG-LI\nNE-PREFIX\n\nIf the current settings do not provide enough information regarding the source of\nthe event, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nIf logging is enabled the following configurations can be made to log the source of\nan event.\n\nFirst, as the database administrator, edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\n###### Log Line Prefix\n\nExtra parameters can be added to the setting log_line_prefix to log source of event:\n\n# %a = application name\n# %u = user name\n# %d = database name\n# %r = remote host and port\n# %p = process ID\n# %m = timestamp with milliseconds\n\nFor example:\nlog_line_prefix = '< %m %a %u %d %r %p %m >'\n\n###### Log Hostname\n\nBy default only IP address is logged. To also log the hostname the following\nparameter can also be set in postgresql.conf:\n\nlog_hostname = on\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-73005\" do\n\n  title \"PostgreSQL must produce audit records containing sufficient information to\nestablish the sources (origins) of the events.\"\n  desc  \"Information system auditing capability is critical for accurate forensic\nanalysis. Without establishing the source of the event, it is impossible to\nestablish, correlate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment and provide forensic analysis, it is\nessential for security personnel to know where events occurred, such as application\ncomponents, modules, session identifiers, filenames, host names, and functionality.\n\nIn addition to logging where events occur within the application, the application\nmust also produce audit records that identify the application itself as the source\nof the event.\n\nAssociating information about the source of the event within the application\nprovides a means of investigating an attack; recognizing resource utilization or\ncapacity thresholds; or identifying an improperly configured application.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000098-DB-000042\"\n  tag \"gid\": \"V-73005\"\n  tag \"rid\": \"SV-87657r1_rule\"\n  tag \"stig_id\": \"PGS9-00-008800\"\n  tag \"cci\": \"CCI-000133\"\n  tag \"nist\": [\"AU-3\", \"Rev_4\"]\n\n  tag \"check\": \"Check PostgreSQL settings and existing audit records to verify\ninformation specific to the source (origin) of the event is being captured and\nstored with audit records.\n\nAs the database administrator (usually postgres, check the current log_line_prefix\nand \\\"log_hostname\\\" setting by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW log_line_prefix\\\"\n$ psql -c \\\"SHOW log_hostname\\\"\n\nFor a complete list of extra information that can be added to log_line_prefix, see\nthe official documentation:\nhttps://www.postgresql.org/docs/current/static/runtime-config-logging.html#GUC-LOG-LI\nNE-PREFIX\n\nIf the current settings do not provide enough information regarding the source of\nthe event, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nIf logging is enabled the following configurations can be made to log the source of\nan event.\n\nFirst, as the database administrator, edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\n###### Log Line Prefix\n\nExtra parameters can be added to the setting log_line_prefix to log source of event:\n\n# %a = application name\n# %u = user name\n# %d = database name\n# %r = remote host and port\n# %p = process ID\n# %m = timestamp with milliseconds\n\nFor example:\nlog_line_prefix = '< %m %a %u %d %r %p %m >'\n\n###### Log Hostname\n\nBy default only IP address is logged. To also log the hostname the following\nparameter can also be set in postgresql.conf:\n\nlog_hostname = on\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW log_line_prefix;', [PG_DB]) do\n    its('output') { should eq PG_LOG_LINE_PREFIX }\n  end\n\n  describe sql.query('SHOW log_hostname;', [PG_DB]) do\n    its('output') { should match /(on|true)/i }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73005.rb",
            "line": 51
          },
          "id": "V-73005",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should eq \"< %m %a %u %d %c %s %r >\"",
              "run_time": 0.001696439,
              "start_time": "2017-06-30 21:54:50 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_hostname; output should match /(on|true)/i",
              "run_time": 0.002159659,
              "start_time": "2017-06-30 21:54:50 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must produce audit records containing time stamps to establish\nwhen the events occurred.",
          "desc": "Information system auditing capability is critical for accurate forensic\nanalysis. Without establishing when events occurred, it is impossible to establish,\ncorrelate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment and provide forensic analysis, it is\nessential for security personnel to know the date and time when events occurred.\n\nAssociating the date and time with detected events in the application and audit logs\nprovides a means of investigating an attack; recognizing resource utilization or\ncapacity thresholds; or identifying an improperly configured application.\n\nDatabase software is capable of a range of actions on data stored within the\ndatabase. It is important, for accurate forensic analysis, to know exactly when\nspecific actions were performed. This requires the date and time an audit record is\nreferring to. If date and time information is not recorded and stored with the audit\nrecord, the record itself is of very limited use.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000096-DB-000040",
            "gid": "V-73041",
            "rid": "SV-87693r1_rule",
            "stig_id": "PGS9-00-011100",
            "cci": "CCI-000131",
            "nist": [
              "AU-3",
              "Rev_4"
            ],
            "check": "As the database administrator (usually postgres, run the following\nSQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_line_prefix\"\n\nIf the query result does not contain \"%m\", this is a finding.",
            "fix": "Logging must be enabled in order to capture timestamps. To ensure that\nlogging is enabled, review supplementary content APPENDIX-C for instructions on\nenabling logging.\n\nIf logging is enabled the following configurations must be made to log events with\ntimestamps:\n\nFirst, as the database administrator (shown here as \"postgres\"), edit\npostgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd %m to log_line_prefix to enable timestamps with milliseconds:\n\nlog_line_prefix = '< %m >'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-73041\" do\n  title \"PostgreSQL must produce audit records containing time stamps to establish\nwhen the events occurred.\"\n  desc  \"Information system auditing capability is critical for accurate forensic\nanalysis. Without establishing when events occurred, it is impossible to establish,\ncorrelate, and investigate the events relating to an incident.\n\nIn order to compile an accurate risk assessment and provide forensic analysis, it is\nessential for security personnel to know the date and time when events occurred.\n\nAssociating the date and time with detected events in the application and audit logs\nprovides a means of investigating an attack; recognizing resource utilization or\ncapacity thresholds; or identifying an improperly configured application.\n\nDatabase software is capable of a range of actions on data stored within the\ndatabase. It is important, for accurate forensic analysis, to know exactly when\nspecific actions were performed. This requires the date and time an audit record is\nreferring to. If date and time information is not recorded and stored with the audit\nrecord, the record itself is of very limited use.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000096-DB-000040\"\n  tag \"gid\": \"V-73041\"\n  tag \"rid\": \"SV-87693r1_rule\"\n  tag \"stig_id\": \"PGS9-00-011100\"\n  tag \"cci\": \"CCI-000131\"\n  tag \"nist\": [\"AU-3\", \"Rev_4\"]\n  tag \"check\": \"As the database administrator (usually postgres, run the following\nSQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW log_line_prefix\\\"\n\nIf the query result does not contain \\\"%m\\\", this is a finding.\"\n  tag \"fix\": \"Logging must be enabled in order to capture timestamps. To ensure that\nlogging is enabled, review supplementary content APPENDIX-C for instructions on\nenabling logging.\n\nIf logging is enabled the following configurations must be made to log events with\ntimestamps:\n\nFirst, as the database administrator (shown here as \\\"postgres\\\"), edit\npostgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd %m to log_line_prefix to enable timestamps with milliseconds:\n\nlog_line_prefix = '< %m >'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW log_line_prefix;', [PG_DB]) do\n    its('output') { should include '%m' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73041.rb",
            "line": 45
          },
          "id": "V-73041",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%m\"",
              "run_time": 0.003035655,
              "start_time": "2017-06-30 21:54:50 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must provide non-privileged users with error messages that\n        provide information necessary for corrective actions without revealing\n        information that could be exploited by adversaries.",
          "desc": "Any PostgreSQL or associated application providing too much information\n        in error messages on the screen or printout risks compromising the data\n        and security of the system. The structure and content of error messages\n        need to be carefully considered by the organization and development team.\n\n        Databases can inadvertently provide a wealth of information to an\n        attacker through improperly handled error messages. In addition to\n        sensitive business or personal information, database errors can provide\n        host names, IP addresses, user names, and other system information not\n        required for troubleshooting but very useful to someone targeting the\n        system.\n\n        Carefully consider the structure/content of error messages. The extent\n        to which information systems are able to identify and handle error\n        conditions is guided by organizational policy and operational\n        requirements. Information that could be exploited by adversaries\n        includes, for example, logon attempts with passwords entered by mistake\n        as the username, mission/business information that can be derived from\n        (if not stated explicitly by) information recorded, and personal\n        information, such as account numbers, social security numbers, and\n        credit card numbers.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000266-DB-000162",
            "gid": "V-72851",
            "rid": "SV-87503r1_rule",
            "stig_id": "PGS9-00-000600",
            "cci": "CCI-001312",
            "nist": [
              "SI-11 a",
              "Rev_4"
            ],
            "check": "As the database administrator, run the following SQL:\n\n  SELECT current_setting('client_min_messages');\n\n  If client_min_messages is *not* set to error, this is a finding.",
            "fix": "As the database administrator, edit postgresql.conf:\n\n  $ sudo su - postgres\n  $ vi $PGDATA/postgresql.conf\n  Change the client_min_messages parameter to be error:\n  client_min_messages = 'error'\n\n  Now reload the server with the new configuration (this just reloads settings\n  currently in memory, will not cause an interruption):\n\n  $ sudo su - postgres\n  # SYSTEMD SERVER ONLY\n  $ systemctl reload postgresql-9.5\n\n  # INITD SERVER ONLY\n  $ service postgresql-9.5 reload "
          },
          "code": "control \"V-72851\" do\n  title \"PostgreSQL must provide non-privileged users with error messages that\n        provide information necessary for corrective actions without revealing\n        information that could be exploited by adversaries.\"\n  desc  \"Any PostgreSQL or associated application providing too much information\n        in error messages on the screen or printout risks compromising the data\n        and security of the system. The structure and content of error messages\n        need to be carefully considered by the organization and development team.\n\n        Databases can inadvertently provide a wealth of information to an\n        attacker through improperly handled error messages. In addition to\n        sensitive business or personal information, database errors can provide\n        host names, IP addresses, user names, and other system information not\n        required for troubleshooting but very useful to someone targeting the\n        system.\n\n        Carefully consider the structure/content of error messages. The extent\n        to which information systems are able to identify and handle error\n        conditions is guided by organizational policy and operational\n        requirements. Information that could be exploited by adversaries\n        includes, for example, logon attempts with passwords entered by mistake\n        as the username, mission/business information that can be derived from\n        (if not stated explicitly by) information recorded, and personal\n        information, such as account numbers, social security numbers, and\n        credit card numbers.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n\n  tag \"gtitle\": \"SRG-APP-000266-DB-000162\"\n  tag \"gid\": \"V-72851\"\n  tag \"rid\": \"SV-87503r1_rule\"\n  tag \"stig_id\": \"PGS9-00-000600\"\n  tag \"cci\": \"CCI-001312\"\n  tag \"nist\": [\"SI-11 a\", \"Rev_4\"]\n  tag \"check\": \"As the database administrator, run the following SQL:\n\n  SELECT current_setting('client_min_messages');\n\n  If client_min_messages is *not* set to error, this is a finding.\"\n\n  tag \"fix\": \"As the database administrator, edit postgresql.conf:\n\n  $ sudo su - postgres\n  $ vi $PGDATA/postgresql.conf\n  Change the client_min_messages parameter to be error:\n  client_min_messages = 'error'\n\n  Now reload the server with the new configuration (this just reloads settings\n  currently in memory, will not cause an interruption):\n\n  $ sudo su - postgres\n  # SYSTEMD SERVER ONLY\n  $ systemctl reload postgresql-9.5\n\n  # INITD SERVER ONLY\n  $ service postgresql-9.5 reload \"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n \n  describe sql.query(\"SELECT current_setting('client_min_messages');\", [PG_DB]) do\n    its('output') { should eq 'error' }\n  end\n\n  postgres_conf(PG_USER_DEFINED_CONF).client_min_messages.nil? ? pgconf = PG_CONF : pgconf = PG_USER_DEFINED_CONF\n\n  describe postgres_conf(pgconf) do\n    its('client_min_messages') { should eq 'error' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72851.rb",
            "line": 63
          },
          "id": "V-72851",
          "results": [
            {
              "status": "failed",
              "code_desc": "PostgreSQL query: SELECT current_setting('client_min_messages'); output should eq \"error\"",
              "run_time": 0.067657703,
              "start_time": "2017-06-30 21:54:50 +0000",
              "message": "\nexpected: \"error\"\n     got: \"notice\"\n\n(compared using ==)\n"
            },
            {
              "status": "failed",
              "code_desc": "PostgreSQL Configuration client_min_messages should eq \"error\"",
              "run_time": 0.006806554,
              "start_time": "2017-06-30 21:54:51 +0000",
              "message": "\nexpected: \"error\"\n     got: nil\n\n(compared using ==)\n"
            }
          ]
        },
        {
          "title": "When updates are applied to PostgreSQL software, any software\n  components that have been replaced or made unnecessary must be removed.",
          "desc": "Once released as BOSH package software libraries can not be changed.\n        Any changes to the software libriaries can ONLY be done by creating and\n        deploying a new BOSH release. This is Software-Defined-Infrustructure and\n        any unused versions of the software are automaticaly deleted",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000454-DB-000389",
            "gid": "V-72917",
            "rid": "SV-87569r1_rule",
            "stig_id": "PGS9-00-004300",
            "cci": "CCI-002617",
            "nist": [
              "SI-2 (6)",
              "Rev_4"
            ],
            "check": "To check software installed by packages, as the system\n  administrator, run the following command:\n  # RHEL/CENT Systems\n  $ sudo rpm -qa | grep postgres\n  If multiple versions of postgres are installed but are unused, this is a\n  finding.",
            "fix": "Use package managers (RPM or apt-get) for installing PostgreSQL.\n  Unused software is removed when updated."
          },
          "code": "control \"V-72917\" do\n  title \"When updates are applied to PostgreSQL software, any software\n  components that have been replaced or made unnecessary must be removed.\"\n  desc  \"Previous versions of PostgreSQL components that are not removed from\n  the information system after updates have been installed may be exploited\n  by adversaries.\n  Some PostgreSQL installation tools may remove older versions of software\n  automatically from the information system. In other cases, manual review and\n  removal will be required. In planning installations and upgrades,\n  organizations must include steps (automated, manual, or both) to identify and\n  remove the outdated modules.\n  A transition period may be necessary when both the old and the new software\n  are required. This should be taken into account in the planning.\"\n  impact 0.0\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000454-DB-000389\"\n  tag \"gid\": \"V-72917\"\n  tag \"rid\": \"SV-87569r1_rule\"\n  tag \"stig_id\": \"PGS9-00-004300\"\n  tag \"cci\": \"CCI-002617\"\n  tag \"nist\": [\"SI-2 (6)\", \"Rev_4\"]\n  tag \"check\": \"To check software installed by packages, as the system\n  administrator, run the following command:\n  # RHEL/CENT Systems\n  $ sudo rpm -qa | grep postgres\n  If multiple versions of postgres are installed but are unused, this is a\n  finding.\"\n  tag \"fix\": \"Use package managers (RPM or apt-get) for installing PostgreSQL.\n  Unused software is removed when updated.\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72917.rb",
            "line": 23
          },
          "id": "V-72917",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 3.1755e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must enforce authorized access to all PKI private keys\nstored/utilized by PostgreSQL.",
          "desc": "The DoD standard for authentication is DoD-approved PKI certificates. PKI\ncertificate-based authentication is performed by requiring the certificate holder to\ncryptographically prove possession of the corresponding private key.\n\nIf the private key is stolen, an attacker can use the private key(s) to impersonate\nthe certificate holder. In cases where PostgreSQL-stored private keys are used to\nauthenticate PostgreSQL to the system’s clients, loss of the corresponding private\nkeys would allow an attacker to successfully perform undetected man-in-the-middle\nattacks against PostgreSQL system and its clients.\n\nBoth the holder of a digital certificate and the issuing authority must take careful\nmeasures to protect the corresponding private key. Private keys should always be\ngenerated and protected in FIPS 140-2 validated cryptographic modules.\n\nAll access to the private key(s) of PostgreSQL must be restricted to authorized and\nauthenticated users. If unauthorized users have access to one or more of\nPostgreSQL's private keys, an attacker could gain access to the key(s) and use them\nto impersonate the database on the network or otherwise perform unauthorized\nactions.",
          "impact": 0.7,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000176-DB-000068",
            "gid": "V-73029",
            "rid": "SV-87681r1_rule",
            "stig_id": "PGS9-00-010200",
            "cci": "CCI-000186",
            "nist": [
              "IA-5 (2) (b)",
              "Rev_4"
            ],
            "check": "First, as the database administrator (shown here as \"postgres\"),\nverify the following settings:\n\nNote: If no specific directory given before the filename, the files are stored in\nPGDATA.\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl_ca_file\"\n$ psql -c \"SHOW ssl_cert_file\"\n$ psql -c \"SHOW ssl_crl_file\"\n$ psql -c \"SHOW ssl_key_file\"\n\nIf the directory these files are stored in is not protected, this is a finding.",
            "fix": "Store all PostgreSQL PKI private keys in a FIPS 140-2 validated\ncryptographic module. Ensure access to PostgreSQL PKI private keys is restricted to\nonly authenticated and authorized users.\n\nPostgreSQL private key(s) can be stored in $PGDATA directory, which is only\naccessible by the database owner (usually postgres, DBA) user. Do not allow access\nto this system account to unauthorized users.\n\nTo put the keys in a different directory, as the database administrator (shown here\nas \"postgres\"), set the following settings to a protected directory:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nssl_ca_file = \"/some/protected/directory/root.crt\"\nssl_crl_file = \"/some/protected/directory/root.crl\"\nssl_cert_file = \"/some/protected/directory/server.crt\"\nssl_key_file = \"/some/protected/directory/server.key\"\n\nNow, as the system administrator, restart the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl restartpostgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 restart\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G."
          },
          "code": "control \"V-73029\" do\n  title \"PostgreSQL must enforce authorized access to all PKI private keys\nstored/utilized by PostgreSQL.\"\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates. PKI\ncertificate-based authentication is performed by requiring the certificate holder to\ncryptographically prove possession of the corresponding private key.\n\nIf the private key is stolen, an attacker can use the private key(s) to impersonate\nthe certificate holder. In cases where PostgreSQL-stored private keys are used to\nauthenticate PostgreSQL to the system’s clients, loss of the corresponding private\nkeys would allow an attacker to successfully perform undetected man-in-the-middle\nattacks against PostgreSQL system and its clients.\n\nBoth the holder of a digital certificate and the issuing authority must take careful\nmeasures to protect the corresponding private key. Private keys should always be\ngenerated and protected in FIPS 140-2 validated cryptographic modules.\n\nAll access to the private key(s) of PostgreSQL must be restricted to authorized and\nauthenticated users. If unauthorized users have access to one or more of\nPostgreSQL's private keys, an attacker could gain access to the key(s) and use them\nto impersonate the database on the network or otherwise perform unauthorized\nactions.\"\n  impact 0.7\n  tag \"severity\": \"high\"\n  tag \"gtitle\": \"SRG-APP-000176-DB-000068\"\n  tag \"gid\": \"V-73029\"\n  tag \"rid\": \"SV-87681r1_rule\"\n  tag \"stig_id\": \"PGS9-00-010200\"\n  tag \"cci\": \"CCI-000186\"\n  tag \"nist\": [\"IA-5 (2) (b)\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator (shown here as \\\"postgres\\\"),\nverify the following settings:\n\nNote: If no specific directory given before the filename, the files are stored in\nPGDATA.\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW ssl_ca_file\\\"\n$ psql -c \\\"SHOW ssl_cert_file\\\"\n$ psql -c \\\"SHOW ssl_crl_file\\\"\n$ psql -c \\\"SHOW ssl_key_file\\\"\n\nIf the directory these files are stored in is not protected, this is a finding.\"\n  tag \"fix\": \"Store all PostgreSQL PKI private keys in a FIPS 140-2 validated\ncryptographic module. Ensure access to PostgreSQL PKI private keys is restricted to\nonly authenticated and authorized users.\n\nPostgreSQL private key(s) can be stored in $PGDATA directory, which is only\naccessible by the database owner (usually postgres, DBA) user. Do not allow access\nto this system account to unauthorized users.\n\nTo put the keys in a different directory, as the database administrator (shown here\nas \\\"postgres\\\"), set the following settings to a protected directory:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nssl_ca_file = \\\"/some/protected/directory/root.crt\\\"\nssl_crl_file = \\\"/some/protected/directory/root.crl\\\"\nssl_cert_file = \\\"/some/protected/directory/server.crt\\\"\nssl_key_file = \\\"/some/protected/directory/server.key\\\"\n\nNow, as the system administrator, restart the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl restartpostgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 restart\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G.\"\n\n  settings = [\n    'ssl_crl_file',\n    'ssl_key_file',\n    'ssl_ca_file',\n    'ssl_cert_file'\n  ]\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  settings.each do |setting|\n    file = sql.query(\"SHOW #{setting};\", [PG_DB]).output\n    if not file.include?('/') and not file.empty?\n      file = \"#{PG_DATA}/#{file}\"\n    end\n    file.empty? ? directory = File.dirname(file) : directory = PG_DATA\n\n    describe file(file) do\n      it { should be_file }\n    end\n\n    describe directory(directory) do\n      its('owner') { should match /root|#{PG_OWNER}/ }\n      its('mode') { should cmp '0700' }\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73029.rb",
            "line": 57
          },
          "id": "V-73029",
          "results": [
            {
              "status": "failed",
              "code_desc": "File  should be file",
              "run_time": 0.010241187,
              "start_time": "2017-06-30 21:54:51 +0000",
              "message": "expected `File .file?` to return true, got false"
            },
            {
              "status": "passed",
              "code_desc": "File . owner should match /root|vcap/",
              "run_time": 0.099627632,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File . mode should cmp == \"0700\"",
              "run_time": 0.000496929,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "failed",
              "code_desc": "File /etc/ssl/private/ssl-cert-snakeoil.key should be file",
              "run_time": 0.000377596,
              "start_time": "2017-06-30 21:54:51 +0000",
              "message": "expected `File /etc/ssl/private/ssl-cert-snakeoil.key.file?` to return true, got false"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data owner should match /root|vcap/",
              "run_time": 0.032201318,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data mode should cmp == \"0700\"",
              "run_time": 0.000478954,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "failed",
              "code_desc": "File  should be file",
              "run_time": 0.00043973,
              "start_time": "2017-06-30 21:54:51 +0000",
              "message": "expected `File .file?` to return true, got false"
            },
            {
              "status": "passed",
              "code_desc": "File . owner should match /root|vcap/",
              "run_time": 0.000280444,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File . mode should cmp == \"0700\"",
              "run_time": 0.000316462,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "failed",
              "code_desc": "File /etc/ssl/certs/ssl-cert-snakeoil.pem should be file",
              "run_time": 0.001672448,
              "start_time": "2017-06-30 21:54:51 +0000",
              "message": "expected `File /etc/ssl/certs/ssl-cert-snakeoil.pem.file?` to return true, got false"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data owner should match /root|vcap/",
              "run_time": 0.000206681,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data mode should cmp == \"0700\"",
              "run_time": 0.000318797,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must provide an immediate real-time alert to appropriate\n  support staff of all audit failure events requiring real-time alerts.",
          "desc": "Geoint Centralized Enterprize monitoring and alerting solution is not\n        yet implemented by the sponsor. Crunchy services are constantly undergo\n        extensive health checks",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000360-DB-000320",
            "gid": "V-72893",
            "rid": "SV-87545r1_rule",
            "stig_id": "PGS9-00-002700",
            "cci": "CCI-001858",
            "nist": [
              "AU-5 (2)",
              "Rev_4"
            ],
            "check": "Review the system documentation to determine which audit failure\n  events require real-time alerts.\n  Review the system settings and code. If the real-time alerting that is\n  specified in the documentation is not enabled, this is a finding.",
            "fix": "Configure the system to provide an immediate real-time alert to\n  appropriate support staff when a specified audit failure occurs.\n  It is possible to create scripts or implement third-party tools to enable\n  real-time alerting for audit failures in PostgreSQL."
          },
          "code": "control \"V-72893\" do\n  title \"PostgreSQL must provide an immediate real-time alert to appropriate\n  support staff of all audit failure events requiring real-time alerts.\"\n  desc  \"It is critical for the appropriate personnel to be aware if a system\n  is at risk of failing to process audit logs as required. Without a real-time\n  alert, security personnel may be unaware of an impending failure of the audit\n  capability, and system operation may be adversely affected.\n  The appropriate support staff include, at a minimum, the ISSO and the DBA/SA.\n  Alerts provide organizations with urgent messages. Real-time alerts provide\n  these messages immediately (i.e., the time from event detection to alert o\n  ccurs in seconds or less).\n  The necessary monitoring and alerts may be implemented using features of\n  PostgreSQL, the OS, third-party software, custom code, or a combination of\n  these. The term \\\"the system\\\" is used to encompass all of these.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000360-DB-000320\"\n  tag \"gid\": \"V-72893\"\n  tag \"rid\": \"SV-87545r1_rule\"\n  tag \"stig_id\": \"PGS9-00-002700\"\n  tag \"cci\": \"CCI-001858\"\n  tag \"nist\": [\"AU-5 (2)\", \"Rev_4\"]\n  tag \"check\": \"Review the system documentation to determine which audit failure\n  events require real-time alerts.\n  Review the system settings and code. If the real-time alerting that is\n  specified in the documentation is not enabled, this is a finding.\"\n  tag \"fix\": \"Configure the system to provide an immediate real-time alert to\n  appropriate support staff when a specified audit failure occurs.\n  It is possible to create scripts or implement third-party tools to enable\n  real-time alerting for audit failures in PostgreSQL.\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72893.rb",
            "line": 23
          },
          "id": "V-72893",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 2.471e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must produce audit records containing sufficient information\n  to establish the outcome (success or failure) of the events.",
          "desc": "Information system auditing capability is critical for accurate\n  forensic analysis. Without information about the outcome of events, security\n  personnel cannot make an accurate assessment as to whether an attack was\n  successful or if changes were made to the security state of the system.\n  Event outcomes can include indicators of event success or failure and\n  event-specific results (e.g., the security state of the information system\n  after the event occurred). As such, they also provide a means to measure the\n  impact of an event and help authorized personnel to determine the appropriate\n  response.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000099-DB-000043",
            "gid": "V-72843",
            "rid": "SV-87495r1_rule",
            "stig_id": "PGS9-00-000200",
            "cci": "CCI-000134",
            "nist": [
              "AU-3",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n    As a database administrator (shown here as \"postgres\"), create a table,\n    insert a value, alter the table and update the table by running the following\n    SQL:\n\n    CREATE TABLE stig_test_table(id INT);\n    INSERT INTO stig_test_table(id) VALUES (0);\n    ALTER TABLE stig_test_table ADD COLUMN name text;\n    UPDATE stig_test_table SET id = 1 WHERE id = 0;\n\n    Next, as a user without access to the stig_test table, run the following SQL:\n\n    INSERT INTO stig_test_table(id) VALUES (1);\n    ALTER TABLE stig_test_table DROP COLUMN name;\n    UPDATE stig_test_table SET id = 0 WHERE id = 1;\n\n    The prior SQL should generate errors:\n\n    ERROR: permission denied for relation stig_test\n    ERROR: must be owner of relation stig_test\n    ERROR: permission denied for relation stig_test\n\n    Now, as the database administrator, drop the test table by running the\n    following SQL:\n\n    DROP TABLE stig_test_table;\n\n    Now verify the errors were logged:\n\n    $ sudo su - postgres\n    $ cat ${PGDATA?}/pg_log/<latest_logfile>$PGDATA/\n    < 2016-02-23 14:51:31.103 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE\n    stig_test(id INT);,<none> < 2016-02-23 14:51:44.835 EDT psql postgres\n    postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >LOG: AUDIT:\n    SESSION,2,1,WRITE,INSERT,,,INSERT INTO stig_test(id) VALUES (0);,<none>\n    < 2016-02-23 14:53:25.805 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,3,1,DDL,ALTER TABLE,,,ALTER TABLE\n    stig_test ADD COLUMN name text;,<none> < 2016-02-23 14:53:54.381 EDT psql\n    postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >LOG: AUDIT:\n    SESSION,4,1,WRITE,UPDATE,,,UPDATE stig_test SET id = 1 WHERE id = 0;,<none>\n    < 2016-02-23 14:54:20.832 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >ERROR: permission denied for relation stig_test\n    < 2016-02-23 14:54:20.832 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >STATEMENT: INSERT INTO stig_test(id) VALUES (1);\n    < 2016-02-23 14:54:41.032 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >ERROR: must be owner of relation stig_test < 2016-02-23\n    14:54:41.032 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT\n    [local] >STATEMENT: ALTER TABLE stig_test DROP COLUMN name; < 2016-02-23\n    14:54:54.378 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT\n    [local] >ERROR: permission denied for relation stig_test < 2016-02-23\n    14:54:54.378 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT\n    [local] >STATEMENT: UPDATE stig_test SET id = 0 WHERE id = 1; < 2016-02-23\n    14:55:23.723 EDT psql postgres postgres 570bf307.3b0a 2016-04-11 14:55:03 EDT\n    [local] >LOG: AUDIT: SESSION,1,1,DDL,DROP TABLE,,,DROP TABLE stig_test;,<none>\n\n    If audit records exist without the outcome of the event that occurred, this is\n    a finding.",
            "fix": "Using pgaudit PostgreSQL can be configured to audit various facets\n    of PostgreSQL. See supplementary content APPENDIX-B for documentation on\n    installing pgaudit.\n    All errors, denials and unsuccessful requests are logged if logging is enabled.\n    See supplementary content APPENDIX-C for documentation on enabling logging.\n    Note: The following instructions use the PGDATA environment variable. See\n    supplementary content APPENDIX-F for instructions on configuring PGDATA.\n    With pgaudit and logging enabled, set the following configuration settings in\n    postgresql.conf, as the database administrator (shown here as \"postgres\"),\n    to the following:\n\n    $ vi ${PGDATA?}/postgresql.conf\n    pgaudit.log_catalog='on'\n    pgaudit.log_level='log'\n    pgaudit.log_parameter='on'\n    pgaudit.log_statement_once='off'\n    pgaudit.log='all, -misc'\n\n    Next, tune the following logging configurations in postgresql.conf:\n\n    $ sudo vi ${PGDATA?}/postgresql.conf\n    log_line_prefix = '%m %u %d %e : '\n    log_error_verbosity = default\n\n    Last, as the system administrator, restart PostgreSQL:\n\n    # SERVER USING SYSTEMCTL ONLY\n    $ sudo systemctl restart postgresql-9.5\n\n    # SERVER USING INITD ONLY\n    $ sudo service postgresql-9.5 restart"
          },
          "code": "control \"V-72843\" do\n  title \"PostgreSQL must produce audit records containing sufficient information\n  to establish the outcome (success or failure) of the events.\"\n  desc  \"Information system auditing capability is critical for accurate\n  forensic analysis. Without information about the outcome of events, security\n  personnel cannot make an accurate assessment as to whether an attack was\n  successful or if changes were made to the security state of the system.\n  Event outcomes can include indicators of event success or failure and\n  event-specific results (e.g., the security state of the information system\n  after the event occurred). As such, they also provide a means to measure the\n  impact of an event and help authorized personnel to determine the appropriate\n  response.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000099-DB-000043\"\n  tag \"gid\": \"V-72843\"\n  tag \"rid\": \"SV-87495r1_rule\"\n  tag \"stig_id\": \"PGS9-00-000200\"\n  tag \"cci\": \"CCI-000134\"\n  tag \"nist\": [\"AU-3\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n    As a database administrator (shown here as \\\"postgres\\\"), create a table,\n    insert a value, alter the table and update the table by running the following\n    SQL:\n\n    CREATE TABLE stig_test_table(id INT);\n    INSERT INTO stig_test_table(id) VALUES (0);\n    ALTER TABLE stig_test_table ADD COLUMN name text;\n    UPDATE stig_test_table SET id = 1 WHERE id = 0;\n\n    Next, as a user without access to the stig_test table, run the following SQL:\n\n    INSERT INTO stig_test_table(id) VALUES (1);\n    ALTER TABLE stig_test_table DROP COLUMN name;\n    UPDATE stig_test_table SET id = 0 WHERE id = 1;\n\n    The prior SQL should generate errors:\n\n    ERROR: permission denied for relation stig_test\n    ERROR: must be owner of relation stig_test\n    ERROR: permission denied for relation stig_test\n\n    Now, as the database administrator, drop the test table by running the\n    following SQL:\n\n    DROP TABLE stig_test_table;\n\n    Now verify the errors were logged:\n\n    $ sudo su - postgres\n    $ cat ${PGDATA?}/pg_log/<latest_logfile>$PGDATA/\n    < 2016-02-23 14:51:31.103 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE\n    stig_test(id INT);,<none> < 2016-02-23 14:51:44.835 EDT psql postgres\n    postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >LOG: AUDIT:\n    SESSION,2,1,WRITE,INSERT,,,INSERT INTO stig_test(id) VALUES (0);,<none>\n    < 2016-02-23 14:53:25.805 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >LOG: AUDIT: SESSION,3,1,DDL,ALTER TABLE,,,ALTER TABLE\n    stig_test ADD COLUMN name text;,<none> < 2016-02-23 14:53:54.381 EDT psql\n    postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT [local] >LOG: AUDIT:\n    SESSION,4,1,WRITE,UPDATE,,,UPDATE stig_test SET id = 1 WHERE id = 0;,<none>\n    < 2016-02-23 14:54:20.832 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >ERROR: permission denied for relation stig_test\n    < 2016-02-23 14:54:20.832 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >STATEMENT: INSERT INTO stig_test(id) VALUES (1);\n    < 2016-02-23 14:54:41.032 EDT psql postgres postgres 570bf22a.3af2 2016-04-11\n    14:51:22 EDT [local] >ERROR: must be owner of relation stig_test < 2016-02-23\n    14:54:41.032 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT\n    [local] >STATEMENT: ALTER TABLE stig_test DROP COLUMN name; < 2016-02-23\n    14:54:54.378 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT\n    [local] >ERROR: permission denied for relation stig_test < 2016-02-23\n    14:54:54.378 EDT psql postgres postgres 570bf22a.3af2 2016-04-11 14:51:22 EDT\n    [local] >STATEMENT: UPDATE stig_test SET id = 0 WHERE id = 1; < 2016-02-23\n    14:55:23.723 EDT psql postgres postgres 570bf307.3b0a 2016-04-11 14:55:03 EDT\n    [local] >LOG: AUDIT: SESSION,1,1,DDL,DROP TABLE,,,DROP TABLE stig_test;,<none>\n\n    If audit records exist without the outcome of the event that occurred, this is\n    a finding.\"\n\n    tag \"fix\": \"Using pgaudit PostgreSQL can be configured to audit various facets\n    of PostgreSQL. See supplementary content APPENDIX-B for documentation on\n    installing pgaudit.\n    All errors, denials and unsuccessful requests are logged if logging is enabled.\n    See supplementary content APPENDIX-C for documentation on enabling logging.\n    Note: The following instructions use the PGDATA environment variable. See\n    supplementary content APPENDIX-F for instructions on configuring PGDATA.\n    With pgaudit and logging enabled, set the following configuration settings in\n    postgresql.conf, as the database administrator (shown here as \\\"postgres\\\"),\n    to the following:\n\n    $ vi ${PGDATA?}/postgresql.conf\n    pgaudit.log_catalog='on'\n    pgaudit.log_level='log'\n    pgaudit.log_parameter='on'\n    pgaudit.log_statement_once='off'\n    pgaudit.log='all, -misc'\n\n    Next, tune the following logging configurations in postgresql.conf:\n\n    $ sudo vi ${PGDATA?}/postgresql.conf\n    log_line_prefix = '%m %u %d %e : '\n    log_error_verbosity = default\n\n    Last, as the system administrator, restart PostgreSQL:\n\n    # SERVER USING SYSTEMCTL ONLY\n    $ sudo systemctl restart postgresql-9.5\n\n    # SERVER USING INITD ONLY\n    $ sudo service postgresql-9.5 restart\"\n\n  # setup/teardown sql commands\n  create_role = 'CREATE ROLE joe;'\n  set_role = 'SET ROLE joe;'\n  grant = 'GRANT CONNECT ON DATABASE #{PG_DB} TO joe;'\n  revoke = 'REVOKE ALL ON TABLE stig_test FROM joe;'\n  drop_owned_by = 'DROP OWNED BY joe;'\n  drop_role = 'DROP ROLE joe;'\n\n  permission_denied_error = 'permission denied for relation stig_test'\n  must_be_owner_error = 'must be owner of relation stig_test'\n\n  # test sql commands\n  create_table = 'CREATE TABLE stig_test(id INT);'\n  dba_insert = 'INSERT INTO stig_test(id) VALUES (0);'\n  dba_alter_table = 'ALTER TABLE stig_test ADD COLUMN name text;'\n  dba_update = 'UPDATE stig_test SET id = 1 WHERE id = 0;'\n  user_insert = \"#{set_role} INSERT INTO stig_test(id) VALUES (1);\"\n  user_alter_table = \"#{set_role} ALTER TABLE stig_test DROP COLUMN name;\"\n  user_update = \"#{set_role }UPDATE stig_test SET id = 0 WHERE id = 1;\"\n  drop_table = 'DROP TABLE stig_test;'\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  sql.query(create_role, [PG_DB])\n  sql.query(grant, [PG_DB])\n  sql.query(revoke, [PG_DB])\n\n  describe sql.query(create_table, [PG_DB]) do\n    its('output') { should eq 'CREATE TABLE' }\n  end\n\n  describe sql.query(dba_insert, [PG_DB]) do\n    its('output') { should eq 'INSERT 0 1' }\n  end\n\n  describe sql.query(dba_alter_table, [PG_DB]) do\n    its('output') { should eq 'ALTER TABLE' }\n  end\n\n  describe sql.query(dba_update, [PG_DB]) do\n    its('output') { should eq 'UPDATE 1' }\n  end\n\n  describe sql.query(user_insert, [PG_DB]) do\n    it { should match /ERROR:\\s*#{Regexp.escape(permission_denied_error)}/ }\n  end\n\n  describe sql.query(user_alter_table, [PG_DB]) do\n    it { should match /ERROR:\\s*#{Regexp.escape(must_be_owner_error)}/ }\n  end\n\n  describe sql.query(user_update, [PG_DB]) do\n    it { should match /ERROR:\\s*#{Regexp.escape(permission_denied_error)}/ }\n  end\n\n  describe sql.query(drop_table, [PG_DB]) do\n    its('output') { should eq 'DROP TABLE' }\n  end\n\n  sql.query(drop_owned_by, [PG_DB])\n  sql.query(drop_role, [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,CREATE TABLE(,.*){2},#{Regexp.escape(create_table)}/ }\n    its('content') { should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,WRITE,INSERT(,.*){2},#{Regexp.escape(dba_insert)}/ }\n    its('content') { should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,ALTER TABLE(,.*){2},#{Regexp.escape(dba_alter_table)}/ }\n    its('content') { should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,WRITE,UPDATE(,.*){2},#{Regexp.escape(dba_update)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(user_insert)}/ }\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(permission_denied_error)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(user_alter_table)}/ }\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(must_be_owner_error)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(user_update)}/ }\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(permission_denied_error)}/ }\n    its('content') { should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,DROP TABLE(,.*){2},#{Regexp.escape(drop_table)}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72843.rb",
            "line": 45
          },
          "id": "V-72843",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: CREATE TABLE stig_test(id INT); output should eq \"CREATE TABLE\"",
              "run_time": 0.000303143,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: INSERT INTO stig_test(id) VALUES (0); output should eq \"INSERT 0 1\"",
              "run_time": 0.000270685,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: ALTER TABLE stig_test ADD COLUMN name text; output should eq \"ALTER TABLE\"",
              "run_time": 0.000299647,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: UPDATE stig_test SET id = 1 WHERE id = 0; output should eq \"UPDATE 1\"",
              "run_time": 0.000311255,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Can't read run query \"SET ROLE joe; INSERT INTO stig_test(id) VALUES (1);\" on postgres_session: \nERROR:  permission denied for relation stig_test\n should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ stig_test/",
              "run_time": 0.000211178,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Can't read run query \"SET ROLE joe; ALTER TABLE stig_test DROP COLUMN name;\" on postgres_session: \nERROR:  must be owner of relation stig_test\n should match /ERROR:\\s*must\\ be\\ owner\\ of\\ relation\\ stig_test/",
              "run_time": 0.001238163,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Can't read run query \"SET ROLE joe;UPDATE stig_test SET id = 0 WHERE id = 1;\" on postgres_session: \nERROR:  permission denied for relation stig_test\n should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ stig_test/",
              "run_time": 0.000337833,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: DROP TABLE stig_test; output should eq \"DROP TABLE\"",
              "run_time": 0.000220809,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,CREATE TABLE(,.*){2},CREATE\\ TABLE\\ stig_test\\(id\\ INT\\);/",
              "run_time": 0.21240991,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,WRITE,INSERT(,.*){2},INSERT\\ INTO\\ stig_test\\(id\\)\\ VALUES\\ \\(0\\);/",
              "run_time": 0.008304251,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,ALTER TABLE(,.*){2},ALTER\\ TABLE\\ stig_test\\ ADD\\ COLUMN\\ name\\ text;/",
              "run_time": 0.01101778,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,WRITE,UPDATE(,.*){2},UPDATE\\ stig_test\\ SET\\ id\\ =\\ 1\\ WHERE\\ id\\ =\\ 0;/",
              "run_time": 0.009910171,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ joe;\\ INSERT\\ INTO\\ stig_test\\(id\\)\\ VALUES\\ \\(1\\);/",
              "run_time": 0.009760999,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ stig_test/",
              "run_time": 0.011085946,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ joe;\\ ALTER\\ TABLE\\ stig_test\\ DROP\\ COLUMN\\ name;/",
              "run_time": 0.015901325,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*must\\ be\\ owner\\ of\\ relation\\ stig_test/",
              "run_time": 0.007686105,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ joe;UPDATE\\ stig_test\\ SET\\ id\\ =\\ 0\\ WHERE\\ id\\ =\\ 1;/",
              "run_time": 0.005475543,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ stig_test/",
              "run_time": 0.007841148,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,DROP TABLE(,.*){2},DROP\\ TABLE\\ stig_test;/",
              "run_time": 0.006628141,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must off-load audit data to a separate log management facility;\nthis must be continuous and in near real time for systems with a network connection\nto the storage facility and weekly or more often for stand-alone systems.",
          "desc": "The Crunchy DBaaS inherits this control from the Centralized Log\n        Monitoring Service (i.e., ArcSight) after configuring the systems/VMs to\n        audit all events as required in ICS 500-27 and NCD 8010.17.The Program\n        sends the system logs to the Centralized Log Monitoring Service\n        (i.e., ArcSight) via PaaS BOSH Logs Collector.  It is the responsibility\n        of the ArcSight Service Provider to coordinate security audit function\n        with other organization entities.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000515-DB-000318",
            "gid": "V-73045",
            "rid": "SV-87697r1_rule",
            "stig_id": "PGS9-00-011300",
            "cci": "CCI-001851",
            "nist": [
              "AU-4 (1)",
              "Rev_4"
            ],
            "check": "First, as the database administrator (shown here as \"postgres\"),\nensure PostgreSQL uses syslog by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_destination\"\n\nIf log_destination is not syslog, this is a finding.\n\nNext, as the database administrator, check which log facility is configured by\nrunning the following SQL:\n\n$ psql -c \"SHOW syslog_facility\"\n\nCheck with the organization to see how syslog facilities are defined in their\norganization.\n\nIf the wrong facility is configured, this is a finding.\n\nIf PostgreSQL does not have a continuous network connection to the centralized log\nmanagement system, and PostgreSQL audit records are not transferred to the\ncentralized log management system weekly or more often, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nConfigure PostgreSQL or deploy and configure software tools to transfer audit\nrecords to a centralized log management system, continuously and in near-real time\nwhere a continuous network connection to the log management system exists, or at\nleast weekly in the absence of such a connection.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nWith logging enabled, as the database administrator (shown here as \"postgres\"),\nconfigure the follow parameters in postgresql.conf (the example uses the default\nvalues - tailor for environment):\n\nNote: Consult the organization on how syslog facilities are defined in the syslog\ndaemon configuration.\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nlog_destination = 'syslog'\nsyslog_facility = 'LOCAL0'\nsyslog_ident = 'postgres'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-73045\" do\n  title \"PostgreSQL must off-load audit data to a separate log management facility;\nthis must be continuous and in near real time for systems with a network connection\nto the storage facility and weekly or more often for stand-alone systems.\"\n  desc  \"Information stored in one location is vulnerable to accidental or\nincidental deletion or alteration.\n\nOff-loading is a common process in information systems with limited audit storage\ncapacity.\n\nPostgreSQL may write audit records to database tables, to files in the file system,\nto other kinds of local repository, or directly to a centralized log management\nsystem. Whatever the method used, it must be compatible with off-loading the records\nto the centralized system.\"\n  impact 0.0\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000515-DB-000318\"\n  tag \"gid\": \"V-73045\"\n  tag \"rid\": \"SV-87697r1_rule\"\n  tag \"stig_id\": \"PGS9-00-011300\"\n  tag \"cci\": \"CCI-001851\"\n  tag \"nist\": [\"AU-4 (1)\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator (shown here as \\\"postgres\\\"),\nensure PostgreSQL uses syslog by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW log_destination\\\"\n\nIf log_destination is not syslog, this is a finding.\n\nNext, as the database administrator, check which log facility is configured by\nrunning the following SQL:\n\n$ psql -c \\\"SHOW syslog_facility\\\"\n\nCheck with the organization to see how syslog facilities are defined in their\norganization.\n\nIf the wrong facility is configured, this is a finding.\n\nIf PostgreSQL does not have a continuous network connection to the centralized log\nmanagement system, and PostgreSQL audit records are not transferred to the\ncentralized log management system weekly or more often, this is a finding.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nConfigure PostgreSQL or deploy and configure software tools to transfer audit\nrecords to a centralized log management system, continuously and in near-real time\nwhere a continuous network connection to the log management system exists, or at\nleast weekly in the absence of such a connection.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nWith logging enabled, as the database administrator (shown here as \\\"postgres\\\"),\nconfigure the follow parameters in postgresql.conf (the example uses the default\nvalues - tailor for environment):\n\nNote: Consult the organization on how syslog facilities are defined in the syslog\ndaemon configuration.\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nlog_destination = 'syslog'\nsyslog_facility = 'LOCAL0'\nsyslog_ident = 'postgres'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\"\n  \n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73045.rb",
            "line": 23
          },
          "id": "V-73045",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 7.598e-06,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "Access to database files must be limited to relevant processes and to\nauthorized, administrative users.",
          "desc": "Applications, including PostgreSQLs, must prevent unauthorized and\nunintended information transfer via shared system resources. Permitting only DBMS\nprocesses and authorized, administrative users to have access to the files where the\ndatabase resides helps ensure that those files are not shared inappropriately and\nare not open to backdoor access and manipulation.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000243-DB-000374",
            "gid": "V-73059",
            "rid": "SV-87711r1_rule",
            "stig_id": "PGS9-00-012000",
            "cci": "CCI-001090",
            "nist": [
              "SC-4",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\nvariable. See supplementary content APPENDIX-F for instructions on configuring\nPGDATA.\n\nReview the permissions granted to users by the operating system/file system on the\ndatabase files, database log files and database backup files.\n\nTo verify that all files are owned by the database administrator and have the\ncorrect permissions, run the following as the database administrator (shown here as\n\"postgres\"):\n\n$ sudo su - postgres\n$ ls -lR ${PGDATA?}\n\nIf any files are not owned by the database administrator or allow anyone but the\ndatabase administrator to read/write/execute, this is a finding.\n\nIf any user/role who is not an authorized system administrator with a need-to-know\nor database administrator with a need-to-know, or a system account for running\nPostgreSQL processes, is permitted to read/view any of these files, this is a\nfinding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nConfigure the permissions granted by the operating system/file system on the\ndatabase files, database log files, and database backup files so that only relevant\nsystem accounts and authorized system administrators and database administrators\nwith a need to know are permitted to read/view these files.\n\nAny files (for example: extra configuration files) created in PGDATA must be owned\nby the database administrator, with only owner permissions to read, write, and\nexecute."
          },
          "code": "control \"V-73059\" do\n  title \"Access to database files must be limited to relevant processes and to\nauthorized, administrative users.\"\n  desc  \"Applications, including PostgreSQLs, must prevent unauthorized and\nunintended information transfer via shared system resources. Permitting only DBMS\nprocesses and authorized, administrative users to have access to the files where the\ndatabase resides helps ensure that those files are not shared inappropriately and\nare not open to backdoor access and manipulation.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000243-DB-000374\"\n  tag \"gid\": \"V-73059\"\n  tag \"rid\": \"SV-87711r1_rule\"\n  tag \"stig_id\": \"PGS9-00-012000\"\n  tag \"cci\": \"CCI-001090\"\n  tag \"nist\": [\"SC-4\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\nvariable. See supplementary content APPENDIX-F for instructions on configuring\nPGDATA.\n\nReview the permissions granted to users by the operating system/file system on the\ndatabase files, database log files and database backup files.\n\nTo verify that all files are owned by the database administrator and have the\ncorrect permissions, run the following as the database administrator (shown here as\n\\\"postgres\\\"):\n\n$ sudo su - postgres\n$ ls -lR ${PGDATA?}\n\nIf any files are not owned by the database administrator or allow anyone but the\ndatabase administrator to read/write/execute, this is a finding.\n\nIf any user/role who is not an authorized system administrator with a need-to-know\nor database administrator with a need-to-know, or a system account for running\nPostgreSQL processes, is permitted to read/view any of these files, this is a\nfinding.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nConfigure the permissions granted by the operating system/file system on the\ndatabase files, database log files, and database backup files so that only relevant\nsystem accounts and authorized system administrators and database administrators\nwith a need to know are permitted to read/view these files.\n\nAny files (for example: extra configuration files) created in PGDATA must be owned\nby the database administrator, with only owner permissions to read, write, and\nexecute.\"\n\n  describe command(\"find #{PG_DATA} -type f ! -perm 600 -or ! -user #{PG_OWNER} -or ! -group #{PG_GROUP}\") do\n    its('stdout') { should eq '' }\n    its('stderr') { should eq '' }\n  end\n\n  describe command(\"find #{PG_DATA} -type d ! -perm 700 -or ! -user #{PG_OWNER} -or ! -group #{PG_GROUP}\") do\n    its('stdout') { should eq '' }\n    its('stderr') { should eq '' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73059.rb",
            "line": 105
          },
          "id": "V-73059",
          "results": [
            {
              "status": "passed",
              "code_desc": "Command find /var/vcap/store/postgresql/data -type f ! -perm 600 -or ! -user vcap -or ! -group vcap stdout should eq \"\"",
              "run_time": 0.022036638,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find /var/vcap/store/postgresql/data -type f ! -perm 600 -or ! -user vcap -or ! -group vcap stderr should eq \"\"",
              "run_time": 0.000463008,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find /var/vcap/store/postgresql/data -type d ! -perm 700 -or ! -user vcap -or ! -group vcap stdout should eq \"\"",
              "run_time": 0.023090066,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find /var/vcap/store/postgresql/data -type d ! -perm 700 -or ! -user vcap -or ! -group vcap stderr should eq \"\"",
              "run_time": 0.001101761,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL and associated applications must reserve the use of dynamic\n  code execution for situations that require it.",
          "desc": "Application developers must follow Best Practices when developing Cloud\n        applications. Example: Checking the valid syntax and semantics of\n        information system inputs to ensure that SQL injections are not possible.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000251-DB-000391",
            "gid": "V-72873",
            "rid": "SV-87525r1_rule",
            "stig_id": "PGS9-00-001900",
            "cci": "CCI-001310",
            "nist": [
              "SI-10",
              "Rev_4"
            ],
            "check": "Review PostgreSQL source code (trigger procedures, functions)\n  and application source code, to identify cases of dynamic code execution. Any\n  user input should be handled through prepared statements.\n  If dynamic code execution is employed in circumstances where the objective\n  could practically be satisfied by static execution with strongly typed\n  parameters, this is a finding.",
            "fix": "Where dynamic code execution is employed in circumstances where\n  the objective could practically be satisfied by static execution with strongly\n  typed parameters, modify the code to do so."
          },
          "code": "control \"V-72873\" do\n  title \"PostgreSQL and associated applications must reserve the use of dynamic\n  code execution for situations that require it.\"\n  desc  \"With respect to database management systems, one class of threat is\n  known as SQL Injection, or more generally, code injection. It takes advantage\n  of the dynamic execution capabilities of various programming languages,\n  including dialects of SQL. In such cases, the attacker deduces the manner in\n  which SQL statements are being processed, either from inside knowledge or by\n  observing system behavior in response to invalid inputs. When the attacker\n  identifies scenarios where SQL queries are being assembled by application code\n  (which may be within the database or separate from it) and executed\n  dynamically, the attacker is then able to craft input strings that subvert the\n  intent of the query. Potentially, the attacker can gain unauthorized access to\n  data, including security settings, and severely corrupt or destroy the database.\n  The principal protection against code injection is not to use dynamic execution\n  except where it provides necessary functionality that cannot be utilized\n  otherwise. Use strongly typed data items rather than general-purpose strings\n  as input parameters to task-specific, pre-compiled stored procedures and f\n  unctions (and triggers).\n  This calls for inspection of application source code, which will require\n  collaboration with the application developers. It is recognized that in many\n  cases, the database administrator (DBA) is organizationally separate from the\n  application developers, and may have limited, if any, access to source code.\n  Nevertheless, protections of this type are so important to the secure operation\n  of databases that they must not be ignored. At a minimum, the DBA must attempt\n  to obtain assurances from the development organization that this issue has\n  been addressed, and must document what has been discovered.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000251-DB-000391\"\n  tag \"gid\": \"V-72873\"\n  tag \"rid\": \"SV-87525r1_rule\"\n  tag \"stig_id\": \"PGS9-00-001900\"\n  tag \"cci\": \"CCI-001310\"\n  tag \"nist\": [\"SI-10\", \"Rev_4\"]\n  tag \"check\": \"Review PostgreSQL source code (trigger procedures, functions)\n  and application source code, to identify cases of dynamic code execution. Any\n  user input should be handled through prepared statements.\n  If dynamic code execution is employed in circumstances where the objective\n  could practically be satisfied by static execution with strongly typed\n  parameters, this is a finding.\"\n  tag \"fix\": \"Where dynamic code execution is employed in circumstances where\n  the objective could practically be satisfied by static execution with strongly\n  typed parameters, modify the code to do so.\"\n\n  only_if { false }\n  \nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72873.rb",
            "line": 23
          },
          "id": "V-72873",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 1.9044e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must uniquely identify and authenticate organizational users (or\nprocesses acting on behalf of organizational users).",
          "desc": "To assure accountability and prevent unauthenticated access, organizational\nusers must be identified and authenticated to prevent potential misuse and\ncompromise of the system.\n\nOrganizational users include organizational employees or individuals the\norganization deems to have equivalent status of employees (e.g., contractors).\nOrganizational users (and any processes acting on behalf of users) must be uniquely\nidentified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations\ndocument specific user actions that can be performed on the information system\nwithout identification or authentication; and\n(ii) Accesses that occur through authorized use of group authenticators without\nindividual authentication. Organizations may require unique identification of\nindividuals using shared accounts, for detailed accountability of individual\nactivity.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000148-DB-000103",
            "gid": "V-73049",
            "rid": "SV-87701r1_rule",
            "stig_id": "PGS9-00-011500",
            "cci": "CCI-000764",
            "nist": [
              "IA-2",
              "Rev_4"
            ],
            "check": "Review PostgreSQL settings to determine whether organizational users\nare uniquely identified and authenticated when logging on/connecting to the system.\n\nTo list all roles in the database, as the database administrator (shown here as\n\"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"\\du\"\n\nIf organizational users are not uniquely identified and authenticated, this is a\nfinding.\n\nNext, as the database administrator (shown here as \"postgres\"), verify the current\npg_hba.conf authentication settings:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/pg_hba.conf\n\nIf every role does not have unique authentication requirements, this is a finding.\n\nIf accounts are determined to be shared, determine if individuals are first\nindividually authenticated. If individuals are not individually authenticated before\nusing the shared account, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nConfigure PostgreSQL settings to uniquely identify and authenticate all\norganizational users who log on/connect to the system.\n\nTo create roles, use the following SQL:\n\nCREATE ROLE <role_name> [OPTIONS]\n\nFor more information on CREATE ROLE, see the official documentation:\nhttps://www.postgresql.org/docs/current/static/sql-createrole.html\n\nFor each role created, the database administrator can specify database\nauthentication by editing pg_hba.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/pg_hba.conf\n\nAn example pg_hba entry looks like this:\n\n# TYPE DATABASE USER ADDRESS METHOD\nhost test_db bob 192.168.0.0/16 md5\n\nFor more information on pg_hba.conf, see the official documentation:\nhttps://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html"
          },
          "code": "control \"V-73049\" do\n  title \"PostgreSQL must uniquely identify and authenticate organizational users (or\nprocesses acting on behalf of organizational users).\"\n  desc  \"To assure accountability and prevent unauthenticated access, organizational\nusers must be identified and authenticated to prevent potential misuse and\ncompromise of the system.\n\nOrganizational users include organizational employees or individuals the\norganization deems to have equivalent status of employees (e.g., contractors).\nOrganizational users (and any processes acting on behalf of users) must be uniquely\nidentified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations\ndocument specific user actions that can be performed on the information system\nwithout identification or authentication; and\n(ii) Accesses that occur through authorized use of group authenticators without\nindividual authentication. Organizations may require unique identification of\nindividuals using shared accounts, for detailed accountability of individual\nactivity.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000148-DB-000103\"\n  tag \"gid\": \"V-73049\"\n  tag \"rid\": \"SV-87701r1_rule\"\n  tag \"stig_id\": \"PGS9-00-011500\"\n  tag \"cci\": \"CCI-000764\"\n  tag \"nist\": [\"IA-2\", \"Rev_4\"]\n  tag \"check\": \"Review PostgreSQL settings to determine whether organizational users\nare uniquely identified and authenticated when logging on/connecting to the system.\n\nTo list all roles in the database, as the database administrator (shown here as\n\\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"\\\\du\\\"\n\nIf organizational users are not uniquely identified and authenticated, this is a\nfinding.\n\nNext, as the database administrator (shown here as \\\"postgres\\\"), verify the current\npg_hba.conf authentication settings:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/pg_hba.conf\n\nIf every role does not have unique authentication requirements, this is a finding.\n\nIf accounts are determined to be shared, determine if individuals are first\nindividually authenticated. If individuals are not individually authenticated before\nusing the shared account, this is a finding.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nConfigure PostgreSQL settings to uniquely identify and authenticate all\norganizational users who log on/connect to the system.\n\nTo create roles, use the following SQL:\n\nCREATE ROLE <role_name> [OPTIONS]\n\nFor more information on CREATE ROLE, see the official documentation:\nhttps://www.postgresql.org/docs/current/static/sql-createrole.html\n\nFor each role created, the database administrator can specify database\nauthentication by editing pg_hba.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/pg_hba.conf\n\nAn example pg_hba entry looks like this:\n\n# TYPE DATABASE USER ADDRESS METHOD\nhost test_db bob 192.168.0.0/16 md5\n\nFor more information on pg_hba.conf, see the official documentation:\nhttps://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73049.rb",
            "line": 23
          },
          "id": "V-73049",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 1.3128e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must maintain the authenticity of communications sessions by\nguarding against man-in-the-middle attacks that guess at Session ID values.",
          "desc": "One class of man-in-the-middle, or session hijacking, attack involves the\nadversary guessing at valid session identifiers based on patterns in identifiers\nalready known.\n\nThe preferred technique for thwarting guesses at Session IDs is the generation of\nunique session identifiers using a FIPS 140-2 approved random number generator.\n\nHowever, it is recognized that available PostgreSQL products do not all implement\nthe preferred technique yet may have other protections against session hijacking.\nTherefore, other techniques are acceptable, provided they are demonstrated to be\neffective.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000224-DB-000384",
            "gid": "V-73047",
            "rid": "SV-87699r1_rule",
            "stig_id": "PGS9-00-011400",
            "cci": "CCI-001188",
            "nist": [
              "SC-23 (3)",
              "Rev_4"
            ],
            "check": "To check if PostgreSQL is configured to use ssl, as the database\nadministrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl\"\n\nIf this is not set to `on`, this is a finding.",
            "fix": "To configure PostgreSQL to use SSL, as a database owner (shown here as\n\"postgres\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameter:\n\nssl = on\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G.\n\nFor further SSL configurations, see the official documentation:\nhttps://www.postgresql.org/docs/current/static/ssl-tcp.html"
          },
          "code": "control \"V-73047\" do\n  title \"PostgreSQL must maintain the authenticity of communications sessions by\nguarding against man-in-the-middle attacks that guess at Session ID values.\"\n  desc  \"One class of man-in-the-middle, or session hijacking, attack involves the\nadversary guessing at valid session identifiers based on patterns in identifiers\nalready known.\n\nThe preferred technique for thwarting guesses at Session IDs is the generation of\nunique session identifiers using a FIPS 140-2 approved random number generator.\n\nHowever, it is recognized that available PostgreSQL products do not all implement\nthe preferred technique yet may have other protections against session hijacking.\nTherefore, other techniques are acceptable, provided they are demonstrated to be\neffective.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000224-DB-000384\"\n  tag \"gid\": \"V-73047\"\n  tag \"rid\": \"SV-87699r1_rule\"\n  tag \"stig_id\": \"PGS9-00-011400\"\n  tag \"cci\": \"CCI-001188\"\n  tag \"nist\": [\"SC-23 (3)\", \"Rev_4\"]\n  tag \"check\": \"To check if PostgreSQL is configured to use ssl, as the database\nadministrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW ssl\\\"\n\nIf this is not set to `on`, this is a finding.\"\n\n  tag \"fix\": \"To configure PostgreSQL to use SSL, as a database owner (shown here as\n\\\"postgres\\\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameter:\n\nssl = on\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G.\n\nFor further SSL configurations, see the official documentation:\nhttps://www.postgresql.org/docs/current/static/ssl-tcp.html\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW ssl;', [PG_DB]) do\n    its('output') { should match /(on|true)/i }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73047.rb",
            "line": 45
          },
          "id": "V-73047",
          "results": [
            {
              "status": "failed",
              "code_desc": "PostgreSQL query: SHOW ssl; output should match /(on|true)/i",
              "run_time": 0.000526733,
              "start_time": "2017-06-30 21:54:51 +0000",
              "message": "expected \"off\" to match /(on|true)/i\nDiff:\n@@ -1,2 +1,2 @@\n-/(on|true)/i\n+\"off\"\n"
            }
          ]
        },
        {
          "title": "PostgreSQL must initiate session auditing upon startup.",
          "desc": "Session auditing is for use when a user's activities are under\n  investigation. To be sure of capturing all activity during those periods when\n  session auditing is in use, it needs to be in operation for the whole time\n  PostgreSQL is running.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000092-DB-000208",
            "gid": "V-73001",
            "rid": "SV-87653r1_rule",
            "stig_id": "PGS9-00-008600",
            "cci": "CCI-001464",
            "nist": [
              "AU-14 (1)",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), check\nthe current settings by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf pgaudit is not in the current setting, this is a finding.\n\nAs the database administrator (shown here as \"postgres\"), check the current\nsettings by running the following SQL:\n\n$ psql -c \"SHOW logging_destination\"\n\nIf stderr or syslog are not in the current setting, this is a finding.",
            "fix": "Configure PostgreSQL to enable auditing.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nFor session logging we suggest using pgaudit. For instructions on how to setup\npgaudit, see supplementary content APPENDIX-B."
          },
          "code": "control \"V-73001\" do\n  title \"PostgreSQL must initiate session auditing upon startup.\"\n  desc  \"Session auditing is for use when a user's activities are under\n  investigation. To be sure of capturing all activity during those periods when\n  session auditing is in use, it needs to be in operation for the whole time\n  PostgreSQL is running.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000092-DB-000208\"\n  tag \"gid\": \"V-73001\"\n  tag \"rid\": \"SV-87653r1_rule\"\n  tag \"stig_id\": \"PGS9-00-008600\"\n  tag \"cci\": \"CCI-001464\"\n  tag \"nist\": [\"AU-14 (1)\", \"Rev_4\"]\n\n  tag \"check\": \"As the database administrator (shown here as \\\"postgres\\\"), check\nthe current settings by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW shared_preload_libraries\\\"\n\nIf pgaudit is not in the current setting, this is a finding.\n\nAs the database administrator (shown here as \\\"postgres\\\"), check the current\nsettings by running the following SQL:\n\n$ psql -c \\\"SHOW logging_destination\\\"\n\nIf stderr or syslog are not in the current setting, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to enable auditing.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nFor session logging we suggest using pgaudit. For instructions on how to setup\npgaudit, see supplementary content APPENDIX-B.\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW log_destination;', [PG_DB]) do\n    its('output') { should match /(stderr|syslog)/i }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73001.rb",
            "line": 46
          },
          "id": "V-73001",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000369592,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_destination; output should match /(stderr|syslog)/i",
              "run_time": 0.000144229,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when security objects are\n  modified.",
          "desc": "Changes in the database objects (tables, views, procedures, functions)\n  that record and control permissions, privileges, and roles granted to users\n  and roles must be tracked. Without an audit trail, unauthorized changes to the\n  security subsystem could go undetected. The database could be severely\n  compromised or rendered inoperative.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000496-DB-000334",
            "gid": "V-72971",
            "rid": "SV-87623r1_rule",
            "stig_id": "PGS9-00-006600",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the results does not contain `pgaudit`, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain `role`, `read`, `write`, and `ddl`, this is a\n  finding.\n  Next, verify that accessing the catalog is audited by running the following\n  SQL:\n  $ psql -c \"SHOW pgaudit.log_catalog\"\n  If log_catalog is not `on`, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  Using `pgaudit` the DBMS (PostgreSQL) can be configured to audit these\n  requests. See supplementary content `APPENDIX-B` for documentation on\n  installing `pgaudit`.With `pgaudit` installed the following configurat\n  ions can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log_catalog = 'on'\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new\n  configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72971\" do\n  title \"PostgreSQL must generate audit records when security objects are\n  modified.\"\n  desc  \"Changes in the database objects (tables, views, procedures, functions)\n  that record and control permissions, privileges, and roles granted to users\n  and roles must be tracked. Without an audit trail, unauthorized changes to the\n  security subsystem could go undetected. The database could be severely\n  compromised or rendered inoperative.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000496-DB-000334\"\n  tag \"gid\": \"V-72971\"\n  tag \"rid\": \"SV-87623r1_rule\"\n  tag \"stig_id\": \"PGS9-00-006600\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\n  If the results does not contain `pgaudit`, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \\\"SHOW pgaudit.log\\\"\n  If the output does not contain `role`, `read`, `write`, and `ddl`, this is a\n  finding.\n  Next, verify that accessing the catalog is audited by running the following\n  SQL:\n  $ psql -c \\\"SHOW pgaudit.log_catalog\\\"\n  If log_catalog is not `on`, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  Using `pgaudit` the DBMS (PostgreSQL) can be configured to audit these\n  requests. See supplementary content `APPENDIX-B` for documentation on\n  installing `pgaudit`.With `pgaudit` installed the following configurat\n  ions can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log_catalog = 'on'\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new\n  configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'ddl' }\n    its('output') { should include 'read' }\n    its('output') { should include 'role' }\n    its('output') { should include 'write' }\n  end\n\n  describe sql.query('SHOW pgaudit.log_catalog;', [PG_DB]) do\n    its('output') { should eq 'on' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72971.rb",
            "line": 46
          },
          "id": "V-72971",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000132618,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
              "run_time": 0.001255272,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
              "run_time": 0.000115145,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 0.000102664,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 0.000101673,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log_catalog; output should eq \"on\"",
              "run_time": 0.000427154,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "The role(s)/group(s) used to modify database structure (including but\n          not necessarily limited to tables, indexes, storage, etc.) and logic\n          modules (functions, trigger procedures, links to software external to\n          PostgreSQL, etc.) must be restricted to authorized users.",
          "desc": "If PostgreSQL were to allow any user to make changes to database\n          structure or logic, those changes might be implemented without\n          undergoing the appropriate testing and approvals that are part of a\n          robust change management process.\n\n          Accordingly, only qualified and authorized individuals must be allowed\n          to obtain access to information system components for purposes of\n          initiating changes, including upgrades and modifications.\n\n          Unmanaged changes that occur to the database software libraries or\n          configuration can lead to unauthorized or compromised installations.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000133-DB-000362",
            "gid": "V-72865",
            "rid": "SV-87517r1_rule",
            "stig_id": "PGS9-00-001300",
            "cci": "CCI-001499",
            "nist": [
              "CM-5 (6)",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n                  variable. See supplementary content APPENDIX-F for instructions\n                  on configuring PGDATA.\n\n                  As the database administrator (shown here as \"postgres\"),\n                  list all users and their permissions by running the following\n                  SQL:\n\n                  $ sudo su - postgres\n                  $ psql -c \"\\dp *.*\"\n\n                  Verify that all objects have the correct privileges. If they do\n                  not, this is a finding.\n\n                  Next, as the database administrator (shown here as \"postgres\"),\n                  verify the permissions of the database directory on the\n                  filesystem:\n\n                  $ ls -la ${PGDATA?}\n\n                  If permissions of the database directory are not limited to an\n                  authorized user account, this is a finding.",
            "fix": "As the database administrator, revoke any permissions from a role\n                that are deemed unnecessary by running the following SQL:\n\n                ALTER ROLE bob NOCREATEDB;\n                ALTER ROLE bob NOCREATEROLE;\n                ALTER ROLE bob NOSUPERUSER;\n                ALTER ROLE bob NOINHERIT;\n                REVOKE SELECT ON some_function FROM bob;"
          },
          "code": "control \"V-72865\" do\n  # @todo update the title of this control to something sane\n    title \"The role(s)/group(s) used to modify database structure (including but\n          not necessarily limited to tables, indexes, storage, etc.) and logic\n          modules (functions, trigger procedures, links to software external to\n          PostgreSQL, etc.) must be restricted to authorized users.\"\n    desc  \"If PostgreSQL were to allow any user to make changes to database\n          structure or logic, those changes might be implemented without\n          undergoing the appropriate testing and approvals that are part of a\n          robust change management process.\n\n          Accordingly, only qualified and authorized individuals must be allowed\n          to obtain access to information system components for purposes of\n          initiating changes, including upgrades and modifications.\n\n          Unmanaged changes that occur to the database software libraries or\n          configuration can lead to unauthorized or compromised installations.\"\n    impact 0.5\n    tag \"severity\": \"medium\"\n    tag \"gtitle\": \"SRG-APP-000133-DB-000362\"\n    tag \"gid\": \"V-72865\"\n    tag \"rid\": \"SV-87517r1_rule\"\n    tag \"stig_id\": \"PGS9-00-001300\"\n    tag \"cci\": \"CCI-001499\"\n    tag \"nist\": [\"CM-5 (6)\", \"Rev_4\"]\n    tag \"check\": \"Note: The following instructions use the PGDATA environment\n                  variable. See supplementary content APPENDIX-F for instructions\n                  on configuring PGDATA.\n\n                  As the database administrator (shown here as \\\"postgres\\\"),\n                  list all users and their permissions by running the following\n                  SQL:\n\n                  $ sudo su - postgres\n                  $ psql -c \\\"\\\\dp *.*\\\"\n\n                  Verify that all objects have the correct privileges. If they do\n                  not, this is a finding.\n\n                  Next, as the database administrator (shown here as \\\"postgres\\\"),\n                  verify the permissions of the database directory on the\n                  filesystem:\n\n                  $ ls -la ${PGDATA?}\n\n                  If permissions of the database directory are not limited to an\n                  authorized user account, this is a finding.\"\n\n    tag \"fix\": \"As the database administrator, revoke any permissions from a role\n                that are deemed unnecessary by running the following SQL:\n\n                ALTER ROLE bob NOCREATEDB;\n                ALTER ROLE bob NOCREATEROLE;\n                ALTER ROLE bob NOSUPERUSER;\n                ALTER ROLE bob NOINHERIT;\n                REVOKE SELECT ON some_function FROM bob;\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  sql.query('\\dp *.*', [PG_DB]).output.split(\"\\n\").each do |row|\n    describe row do\n      it { should_not match %r{(^|\\|)\\s*=[arwdDxt]{2,}/\\w+} }\n    end\n    columns = row.split('|')\n    acl = ''\n    column_acl = ''\n    if columns.length < 3\n      acl = columns[0]\n      column_acl = columns[1]\n    else\n      acl = columns[3]\n      column_acl = columns[4]\n    end\n    unless acl.nil?\n      describe acl do\n        it { should match %r{^\\s*((#{PG_OBJECT_OWNERS.join('|')})\\w*=[arwdDxt]+|=r)/\\w+} }\n      end\n    end\n    unless column_acl.nil?\n      describe column_acl do\n        it { should match %r{^\\s*((#{PG_OBJECT_OWNERS.join('|')})\\w*=[arwdDxt]+|=r)/\\w+} }\n      end\n    end\n  end\n\n  describe directory(PG_DATA) do\n    it { should be_owned_by PG_OWNER }\n    its('mode') { should cmp '0700' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72865.rb",
            "line": 63
          },
          "id": "V-72865",
          "results": [
            {
              "status": "passed",
              "code_desc": "information_schema|_pg_foreign_data_wrappers|view||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000413982,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|_pg_foreign_servers|view||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000189736,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|_pg_foreign_table_columns|view||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00021312,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|_pg_foreign_tables|view||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000110679,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|_pg_user_mappings|view||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.8313e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|administrable_role_authorizations|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.7771e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 9.7119e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000133931,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00012437,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|applicable_roles|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 3.0102e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000410037,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000142349,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000149502,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|attributes|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 2.4145e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000153413,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.9718e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000133255,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|character_sets|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.3099e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000154758,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00011311,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000136126,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|check_constraint_routine_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.0762e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000314043,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000116398,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000246241,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|check_constraints|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000106554,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 9.61e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000109183,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000475597,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|collation_character_set_applicability|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000340061,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000466479,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000239513,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000652784,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|collations|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.001486441,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000360557,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000202888,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000195578,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|column_domain_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00011385,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000205568,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 4.304e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000148712,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|column_options|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.001106284,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000448764,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000227007,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000202879,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|column_privileges|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000104644,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00013752,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000149693,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 8.0725e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|column_udt_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000266182,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000251088,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000696932,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000673396,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000278339,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000164801,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.8865e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000131796,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|constraint_column_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.7799e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000127256,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.1235e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000140883,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|constraint_table_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.2213e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000124322,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.0803e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00012374,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|data_type_privileges|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000100069,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000145465,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.5984e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000128541,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|domain_constraints|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000106534,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000229977,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000357975,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000167084,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|domain_udt_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000368107,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000193348,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000102135,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000140851,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|domains|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.6324e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000153555,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.5218e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000126238,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|element_types|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.778e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000122925,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.1186e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000323268,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|enabled_roles|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.2715e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000133982,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.7587e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00021621,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|foreign_data_wrapper_options|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000139121,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000140167,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00013915,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00150832,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|foreign_data_wrappers|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000300384,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000221986,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.001038146,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000318931,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|foreign_server_options|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00041423,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000434782,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000128041,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000345475,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|foreign_servers|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00013054,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000277295,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000158685,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000224434,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|foreign_table_options|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000143145,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000153048,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.0117e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000124061,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|foreign_tables|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000114855,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000101266,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000216641,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000110781,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|information_schema_catalog_name|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000270924,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000296758,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 2.1e-08,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000333812,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|key_column_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000215895,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000406881,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000488182,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000527672,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|parameters|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000234589,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000593003,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000251486,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000452801,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|referential_constraints|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000457828,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000388848,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000141646,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000193994,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|role_column_grants|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000126188,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000164202,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000333927,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.002458706,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|role_routine_grants|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000258402,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 7.6185e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000170951,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000113056,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|role_table_grants|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000640991,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000722128,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000303712,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000526228,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|role_udt_grants|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000153831,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000419705,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.001168419,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000125253,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|role_usage_grants|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000167788,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000285218,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000281485,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000630123,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|routine_privileges|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000266225,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000404972,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000222622,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000349957,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|routines|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000202133,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000234918,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000251625,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000303751,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|schemata|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00068714,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.001116557,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000808193,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.001394176,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|sequences|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000699565,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000232355,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000224718,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000401708,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|sql_features|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000237119,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000846146,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.7161e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000176089,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|sql_implementation_info|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000159208,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000276171,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000225766,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000398723,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|sql_languages|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000341444,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000929355,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000306036,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000351818,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|sql_packages|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000207055,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00026712,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000150173,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.001116014,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|sql_parts|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000560313,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|sql_sizing|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000269509,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000246289,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00143134,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000439378,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|sql_sizing_profiles|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000184859,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000235365,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000157643,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000228792,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|table_constraints|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000145803,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000263405,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000128137,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000260546,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|table_privileges|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000317063,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000527062,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00018683,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00024928,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|tables|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000161514,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000295507,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000673689,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000225725,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|transforms|view||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000125557,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|triggered_update_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000130574,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.001438699,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000969106,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000230082,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|triggers|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000232516,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000268869,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.1681e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000122296,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|udt_privileges|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.8026e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000110582,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.2146e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000103397,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|usage_privileges|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.668e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000107812,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000205651,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000171501,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|user_defined_types|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.9111e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000293488,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.5303e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000204449,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|user_mapping_options|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.6646e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00015767,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.5437e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000441493,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|user_mappings|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000151778,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000166621,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000107687,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000204936,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|view_column_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00026159,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000229609,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000226916,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000504098,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|view_routine_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.003000454,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000620394,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000168095,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000280507,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|view_table_usage|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000163088,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000300026,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000165931,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000250665,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "information_schema|views|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000117285,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000118434,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.5884e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000106706,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_aggregate|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.981e-06,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000126116,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_am|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000103015,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000128297,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_amop|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000183326,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000395398,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_amproc|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000266989,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000104603,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_attrdef|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000104423,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 1.1608e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_attribute|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000124413,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000160299,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_auth_members|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.0554e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000117835,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_authid|table|vcap=arwdDxt/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 3.0422e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 7.7329e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_available_extension_versions|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.8601e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000297663,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_available_extensions|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 1.442e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000527474,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_cast|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000403044,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000203077,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_class|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.5483e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 5.1444e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_collation|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.1206e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000125966,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_constraint|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.5548e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000107959,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_conversion|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.1275e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000102083,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_cursors|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.3034e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000111533,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_database|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6919e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00011114,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_db_role_setting|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.3915e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000123839,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_default_acl|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000141551,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000110778,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_depend|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000137322,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000280506,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_description|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00013103,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000305589,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_enum|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000114038,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000124166,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_event_trigger|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6326e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000110119,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_extension|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.4811e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000105465,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_file_settings|view|vcap=arwdDxt/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000160035,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000150066,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_foreign_data_wrapper|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.8958e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000111892,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_foreign_server|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.3374e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000504737,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_foreign_table|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000304574,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000283079,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_group|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000154198,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000223392,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_index|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00034495,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000150735,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000174887,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00093482,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_inherits|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000448302,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000656939,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_language|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000665733,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.001096436,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_largeobject|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000369468,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_largeobject_metadata|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000191773,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000195009,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_locks|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.5835e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 9.9708e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_matviews|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 2.149e-06,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000207225,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_namespace|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000153133,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000243075,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_opclass|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000130051,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 9.2927e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_operator|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00016616,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00028193,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_opfamily|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000115752,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000313176,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_pltemplate|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 4.2915e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000110429,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_policies|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.108e-06,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 1.6504e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_policy|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 1.7704e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 2.1346e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_prepared_statements|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000101543,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000678742,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_prepared_xacts|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000104245,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00025858,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_proc|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000100742,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 6.6301e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_range|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.7563e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000133551,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_replication_origin|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000174173,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00012084,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_replication_origin_status|view|vcap=arwdDxt/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.7563e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000129432,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_replication_slots|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.9646e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000106104,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_rewrite|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.3352e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000146572,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_roles|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.414e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000101177,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_rules|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000301838,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00090537,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_seclabel|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00012334,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000132187,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_seclabels|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000101375,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000194887,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_settings|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000100113,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00011119,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "failed",
              "code_desc": "=rw/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000332863,
              "start_time": "2017-06-30 21:54:51 +0000",
              "message": "expected \"=rw/vcap||\" not to match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/\n+\"=rw/vcap||\"\n"
            },
            {
              "status": "failed",
              "code_desc": "=rw/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000257546,
              "start_time": "2017-06-30 21:54:51 +0000",
              "message": "expected \"=rw/vcap\" to match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/\n+\"=rw/vcap\"\n"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_shadow|view|vcap=arwdDxt/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.9919e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 7.6361e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_shdepend|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000136997,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000190131,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_shdescription|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000134478,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 8.7022e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_shseclabel|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000105059,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00011293,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_activity|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.0939e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000104047,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_all_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.0974e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.001073254,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_all_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000169464,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000469262,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_archiver|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000173936,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.001622787,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_bgwriter|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000416092,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000145982,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_database|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000110729,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000191538,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_database_conflicts|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000252588,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000149458,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_replication|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 3e-09,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000162879,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_ssl|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000270574,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000416856,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_sys_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000141262,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000617609,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_sys_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000119715,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000133904,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_user_functions|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.9582e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000113224,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_user_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.488e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000122859,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_user_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.5312e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000103781,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_xact_all_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000143669,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000128273,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_xact_sys_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 5.9425e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000207736,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_xact_user_functions|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.5969e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000111081,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stat_xact_user_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6947e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000113124,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_statio_all_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.7647e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000119505,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_statio_all_sequences|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.836e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000109322,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_statio_all_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.1363e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00010675,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_statio_sys_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.1005e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000129017,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_statio_sys_sequences|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.235e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00029202,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_statio_sys_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.707e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000145662,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_statio_user_indexes|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.7569e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00010589,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_statio_user_sequences|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.9615e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000100659,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_statio_user_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.1271e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000101451,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_statistic|table|vcap=arwdDxt/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.9005e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000252047,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_stats|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000107802,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000120475,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_tables|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6344e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000114582,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_tablespace|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.8113e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000368398,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_timezone_abbrevs|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 4.2571e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000127327,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_timezone_names|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.1171e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000278538,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_transform|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.6685e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00011078,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_trigger|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.8311e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000301001,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_ts_config|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.9858e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000114143,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_ts_config_map|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.5375e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000104087,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_ts_dict|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6767e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000104681,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_ts_parser|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.0714e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000145437,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_ts_template|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.487e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000105041,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_type|table|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.725e-06,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000402068,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_user|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000187745,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000420209,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_user_mapping|table|vcap=arwdDxt/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000155809,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000136143,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_user_mappings|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.0403e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000111012,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pg_catalog|pg_views|view|=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6928e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 7.1068e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data should be owned by \"vcap\"",
              "run_time": 0.00023332,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data mode should cmp == \"0700\"",
              "run_time": 0.000196898,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  delete privileges/permissions occur.",
          "desc": "Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n  In an SQL environment, deleting permissions is typically done via the REVOKE\n  command.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000499-DB-000331",
            "gid": "V-72945",
            "rid": "SV-87597r1_rule",
            "stig_id": "PGS9-00-005400",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), create the\n  roles joe and bob with LOGIN by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE joe LOGIN\"\n  $ psql -c \"CREATE ROLE bob LOGIN\"\n  Next, set current role to bob and attempt to alter the role joe:\n  $ psql -c \"SET ROLE bob; ALTER ROLE joe NOLOGIN\"\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  denials are logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-17 11:28:10.004 EDT bob 56eacd05.cda postgres: >ERROR: permission\n  denied to drop role\n  < 2016-03-17 11:28:10.004 EDT bob 56eacd05.cda postgres:\n  >STATEMENT: DROP ROLE joe;\n  If audit logs are not generated when unsuccessful attempts to delete\n  privileges/permissions occur, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to delete privileges occur.\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging."
          },
          "code": "control \"V-72945\" do\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\n  delete privileges/permissions occur.\"\n  desc  \"Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n  In an SQL environment, deleting permissions is typically done via the REVOKE\n  command.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000499-DB-000331\"\n  tag \"gid\": \"V-72945\"\n  tag \"rid\": \"SV-87597r1_rule\"\n  tag \"stig_id\": \"PGS9-00-005400\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \\\"postgres\\\"), create the\n  roles joe and bob with LOGIN by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE ROLE joe LOGIN\\\"\n  $ psql -c \\\"CREATE ROLE bob LOGIN\\\"\n  Next, set current role to bob and attempt to alter the role joe:\n  $ psql -c \\\"SET ROLE bob; ALTER ROLE joe NOLOGIN\\\"\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\n  denials are logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-17 11:28:10.004 EDT bob 56eacd05.cda postgres: >ERROR: permission\n  denied to drop role\n  < 2016-03-17 11:28:10.004 EDT bob 56eacd05.cda postgres:\n  >STATEMENT: DROP ROLE joe;\n  If audit logs are not generated when unsuccessful attempts to delete\n  privileges/permissions occur, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to delete privileges occur.\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging.\"\n\n  create_bob =  'CREATE ROLE bob;' \n  create_joe =  'CREATE ROLE joe;' \n  drop_bob =  'DROP ROLE bob;'\n  drop_joe =  'DROP ROLE joe;'\n\n  command = 'SET ROLE bob; ALTER ROLE joe NOLOGIN;'\n  error = 'permission denied'\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  sql.query(create_bob, [PG_DB])\n  sql.query(create_joe, [PG_DB])\n  sql.query(command, [PG_DB])\n  sql.query(drop_joe, [PG_DB])\n  sql.query(drop_bob, [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(error)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(command)}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72945.rb",
            "line": 46
          },
          "id": "V-72945",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied/",
              "run_time": 0.006126816,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ ALTER\\ ROLE\\ joe\\ NOLOGIN;/",
              "run_time": 0.004299885,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must enforce approved authorizations for logical access to\n        information and system resources in accordance with applicable access\n        control policies.",
          "desc": "Authentication with a DoD-approved PKI certificate does not necessarily\n        imply authorization to access PostgreSQL. To mitigate the risk of\n        unauthorized access to sensitive information by entities that have been\n        issued certificates by DoD-approved PKIs, all DoD systems, including\n        databases, must be properly configured to implement access control\n        policies.\n\n        Successful authentication must not automatically give an entity access\n        to an asset or security boundary. Authorization procedures and controls\n        must be implemented to ensure each authenticated entity also has a\n        validated and current authorization. Authorization is the process of\n        determining whether an entity, once authenticated, is permitted to\n        access a specific asset. Information systems use access control policies\n        and enforcement mechanisms to implement this requirement.\n\n        Access control policies include identity-based policies, role-based\n        policies, and attribute-based policies. Access enforcement mechanisms\n        include access control lists, access control matrices, and cryptography.\n\n        These policies and mechanisms must be employed by the application to\n        control access between users (or processes acting on behalf of users)\n        and objects (e.g., devices, files, records, processes, programs, and domains)\n        in the information system.\n\n        This requirement is applicable to access control enforcement applications,\n        a category that includes database management systems. If PostgreSQL does\n        not follow applicable policy when approving access, it may be in conflict\n        with networks or other applications in the information system. This may\n        result in users either gaining or being denied access inappropriately and\n        in conflict with applicable policy.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000033-DB-000084",
            "gid": "V-72859",
            "rid": "SV-87511r1_rule",
            "stig_id": "PGS9-00-000900",
            "cci": "CCI-000213",
            "nist": [
              "AC-3",
              "Rev_4"
            ],
            "check": "From the system security plan or equivalent documentation,\n  determine the appropriate permissions on database objects for each kind\n  (group role) of user. If this documentation is missing, this is a finding.\n\n  First, as the database administrator (shown here as \"postgres\"),\n  check the privileges of all roles in the database by running the\n  following SQL:\n\n  $ sudo su - postgres\n  $ psql -c '\\du'\n\n  Review all roles and their associated privileges. If any roles'\n  privileges exceed those documented, this is a finding.\n\n  Next, as the database administrator (shown here as \"postgres\"),\n  check the configured privileges for tables and columns by running\n  the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c '\\dp'\n\n  Review all access privileges and column access privileges list.\n  If any roles' privileges exceed those documented, this is a finding.\n\n  Next, as the database administrator (shown here as \"postgres\"),\n  check the configured authentication settings in pg_hba.conf:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n\n  Review all entries and their associated authentication methods.\n\n  If any entries do not have their documented authentication requirements,\n  this is a finding.",
            "fix": "Create and/or maintain documentation of each group role's\n  appropriate permissions on database objects.\n\n  Implement these permissions in the database, and remove any permissions that\n  exceed those documented.\n\n  The following are examples of how to use role privileges in PostgreSQL to\n  enforce access controls. For a complete list of privileges, see the official\n  documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html\n\n  #### Roles Example 1\n  The following example demonstrates how to create an admin role with CREATEDB\n  and CREATEROLE privileges.\n\n  As the database administrator (shown here as \"postgres\"), run the following\n  SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE admin WITH CREATEDB CREATEROLE\"\n\n  #### Roles Example 2\n  The following example demonstrates how to create a role with a password that\n  expires and makes the role a member of the \"admin\" group.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE joe LOGIN ENCRYPTED PASSWORD 'stig2016!' VALID UNTIL\n'2016-09-20' IN ROLE admin\"\n\n  #### Roles Example 3\n  The following demonstrates how to revoke privileges from a role using REVOKE.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n$ psql -c \"REVOKE admin FROM joe\"\n\n  #### Roles Example 4\n  The following demonstrates how to alter privileges in a role using ALTER.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n$ psql -c \"ALTER ROLE joe NOLOGIN\"\n\n  The following are examples of how to use grant privileges in PostgreSQL to\n  enforce access controls on objects. For a complete list of privileges, see the\n  official documentation:\nhttps://www.postgresql.org/docs/current/static/sql-grant.html\n\n  #### Grant Example 1\n  The following example demonstrates how to grant INSERT on a table to a role.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"GRANT SELECT ON stig_test TO joe\"\n\n  #### Grant Example 2\n  The following example demonstrates how to grant ALL PRIVILEGES on a table to a\n  role.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"GRANT ALL PRIVILEGES ON stig_test TO joe\"\n\n  #### Grant Example 3\n  The following example demonstrates how to grant a role to a role.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"GRANT admin TO joe\"\n\n  #### Revoke Example 1\n  The following example demonstrates how to revoke access from a role.\n\n  As the database administrator (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"REVOKE admin FROM joe\"\n\n  To change authentication requirements for the database, as the database\n  administrator (shown here as \"postgres\"), edit pg_hba.conf:\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n\n  Edit authentication requirements to the organizational requirements. See the\n  official documentation for the complete list of options for authentication:\n  http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html\n\n  After changes to pg_hba.conf, reload the server:\n\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72859\" do\n  title \"PostgreSQL must enforce approved authorizations for logical access to\n        information and system resources in accordance with applicable access\n        control policies.\"\n  desc  \"Authentication with a DoD-approved PKI certificate does not necessarily\n        imply authorization to access PostgreSQL. To mitigate the risk of\n        unauthorized access to sensitive information by entities that have been\n        issued certificates by DoD-approved PKIs, all DoD systems, including\n        databases, must be properly configured to implement access control\n        policies.\n\n        Successful authentication must not automatically give an entity access\n        to an asset or security boundary. Authorization procedures and controls\n        must be implemented to ensure each authenticated entity also has a\n        validated and current authorization. Authorization is the process of\n        determining whether an entity, once authenticated, is permitted to\n        access a specific asset. Information systems use access control policies\n        and enforcement mechanisms to implement this requirement.\n\n        Access control policies include identity-based policies, role-based\n        policies, and attribute-based policies. Access enforcement mechanisms\n        include access control lists, access control matrices, and cryptography.\n\n        These policies and mechanisms must be employed by the application to\n        control access between users (or processes acting on behalf of users)\n        and objects (e.g., devices, files, records, processes, programs, and domains)\n        in the information system.\n\n        This requirement is applicable to access control enforcement applications,\n        a category that includes database management systems. If PostgreSQL does\n        not follow applicable policy when approving access, it may be in conflict\n        with networks or other applications in the information system. This may\n        result in users either gaining or being denied access inappropriately and\n        in conflict with applicable policy.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000033-DB-000084\"\n  tag \"gid\": \"V-72859\"\n  tag \"rid\": \"SV-87511r1_rule\"\n  tag \"stig_id\": \"PGS9-00-000900\"\n  tag \"cci\": \"CCI-000213\"\n  tag \"nist\": [\"AC-3\", \"Rev_4\"]\n  tag \"check\": \"From the system security plan or equivalent documentation,\n  determine the appropriate permissions on database objects for each kind\n  (group role) of user. If this documentation is missing, this is a finding.\n\n  First, as the database administrator (shown here as \\\"postgres\\\"),\n  check the privileges of all roles in the database by running the\n  following SQL:\n\n  $ sudo su - postgres\n  $ psql -c '\\\\du'\n\n  Review all roles and their associated privileges. If any roles'\n  privileges exceed those documented, this is a finding.\n\n  Next, as the database administrator (shown here as \\\"postgres\\\"),\n  check the configured privileges for tables and columns by running\n  the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c '\\\\dp'\n\n  Review all access privileges and column access privileges list.\n  If any roles' privileges exceed those documented, this is a finding.\n\n  Next, as the database administrator (shown here as \\\"postgres\\\"),\n  check the configured authentication settings in pg_hba.conf:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n\n  Review all entries and their associated authentication methods.\n\n  If any entries do not have their documented authentication requirements,\n  this is a finding.\"\n\n  tag \"fix\": \"Create and/or maintain documentation of each group role's\n  appropriate permissions on database objects.\n\n  Implement these permissions in the database, and remove any permissions that\n  exceed those documented.\n\n  The following are examples of how to use role privileges in PostgreSQL to\n  enforce access controls. For a complete list of privileges, see the official\n  documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html\n\n  #### Roles Example 1\n  The following example demonstrates how to create an admin role with CREATEDB\n  and CREATEROLE privileges.\n\n  As the database administrator (shown here as \\\"postgres\\\"), run the following\n  SQL:\n\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE ROLE admin WITH CREATEDB CREATEROLE\\\"\n\n  #### Roles Example 2\n  The following example demonstrates how to create a role with a password that\n  expires and makes the role a member of the \\\"admin\\\" group.\n\n  As the database administrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE ROLE joe LOGIN ENCRYPTED PASSWORD 'stig2016!' VALID UNTIL\n'2016-09-20' IN ROLE admin\\\"\n\n  #### Roles Example 3\n  The following demonstrates how to revoke privileges from a role using REVOKE.\n\n  As the database administrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n  $ sudo su - postgres\n$ psql -c \\\"REVOKE admin FROM joe\\\"\n\n  #### Roles Example 4\n  The following demonstrates how to alter privileges in a role using ALTER.\n\n  As the database administrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n  $ sudo su - postgres\n$ psql -c \\\"ALTER ROLE joe NOLOGIN\\\"\n\n  The following are examples of how to use grant privileges in PostgreSQL to\n  enforce access controls on objects. For a complete list of privileges, see the\n  official documentation:\nhttps://www.postgresql.org/docs/current/static/sql-grant.html\n\n  #### Grant Example 1\n  The following example demonstrates how to grant INSERT on a table to a role.\n\n  As the database administrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \\\"GRANT SELECT ON stig_test TO joe\\\"\n\n  #### Grant Example 2\n  The following example demonstrates how to grant ALL PRIVILEGES on a table to a\n  role.\n\n  As the database administrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \\\"GRANT ALL PRIVILEGES ON stig_test TO joe\\\"\n\n  #### Grant Example 3\n  The following example demonstrates how to grant a role to a role.\n\n  As the database administrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \\\"GRANT admin TO joe\\\"\n\n  #### Revoke Example 1\n  The following example demonstrates how to revoke access from a role.\n\n  As the database administrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \\\"REVOKE admin FROM joe\\\"\n\n  To change authentication requirements for the database, as the database\n  administrator (shown here as \\\"postgres\\\"), edit pg_hba.conf:\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n\n  Edit authentication requirements to the organizational requirements. See the\n  official documentation for the complete list of options for authentication:\n  http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html\n\n  After changes to pg_hba.conf, reload the server:\n\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  sql.query('\\du', [PG_DB]).output.split(\"\\n\").each do |row|\n    role, attributes, member_of = row.split('|')\n    unless PG_SUPERUSERS.include?(role)\n      describe attributes do\n        it { should_not match /Superuser/ }\n      end\n    end\n  end\n\n  sql.query('SELECT datname FROM pg_catalog.pg_database;', ['postgres']).output.split(\"\\n\").each do |database|\n    rows = sql.query('\\dp', [database])\n    if rows.methods.include?(:output) # Handle connection disabled on database\n      rows.output.split(\"\\n\").each do |row|\n        describe row do\n          it { should_not match %r{(^|\\|)\\s*=[arwdDxt]{2,}/\\w+} }\n        end\n        columns = row.split('|')\n        acl = ''\n        column_acl = ''\n        if columns.length < 3\n          acl = columns[0]\n          column_acl = columns[1]\n        else\n          acl = columns[3]\n          column_acl = columns[4]\n        end\n        unless acl.nil?\n          describe acl do\n            it { should match %r{^\\s*((#{PG_OBJECT_OWNERS.join('|')})\\w*=[arwdDxt]+|=r)/\\w+} }\n          end\n        end\n        unless column_acl.nil?\n          describe column_acl do\n            it { should match %r{^\\s*((#{PG_OBJECT_OWNERS.join('|')})\\w*=[arwdDxt]+|=r)/\\w+} }\n          end\n        end\n      end\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72859.rb",
            "line": 69
          },
          "id": "V-72859",
          "results": [
            {
              "status": "passed",
              "code_desc": "Cannot login should not match /Superuser/",
              "run_time": 0.000188973,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Create role, Create DB, Cannot login should not match /Superuser/",
              "run_time": 0.000134999,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Replication should not match /Superuser/",
              "run_time": 0.000374722,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|pg_stat_repl_json|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000183091,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000128681,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "replication=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.996e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "replication=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000114195,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|geography_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000166385,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000110498,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 3.6054e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000151775,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|geometry_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.0254e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000108505,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.9858e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000106278,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|raster_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.6419e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000117079,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.5156e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000114258,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|raster_overviews|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.5638e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.0001015,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.8935e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000121138,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|spatial_ref_sys|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.1758e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000160451,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.1471e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000114731,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|addr|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000226181,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|addr_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000204804,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|addrfeat|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000103498,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|addrfeat_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6956e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|bg|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6254e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|bg_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.9971e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|county|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.8497e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|county_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.6812e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|county_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.7231e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|countysub_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.004e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|cousub|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.7084e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|cousub_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.9965e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|direction_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000252383,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|edges|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.0001399,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|edges_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.2279e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|faces|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6544e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|faces_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.1807e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|featnames|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6309e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|featnames_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.6259e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|geocode_settings|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.4421e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000385173,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000265311,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000187761,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|geocode_settings_default|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.1923e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000119796,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.6728e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000121325,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|loader_lookuptables|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000258678,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000300805,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000137257,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000159664,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|loader_platform|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.014298174,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000173646,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.0952e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000126826,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|loader_variables|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.1466e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000118991,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00021468,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000164418,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|pagc_gaz|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000210389,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00040076,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000354646,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000138572,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|pagc_gaz_id_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.1107e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|pagc_lex|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.2984e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000161039,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000106121,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000105912,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|pagc_lex_id_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.7395e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|pagc_rules|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.0147e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000103269,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6948e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 4.9607e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|pagc_rules_id_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.7769e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|place|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.5749e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|place_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000122682,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|place_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000181401,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|secondary_unit_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00012018,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|state|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.2229e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|state_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.155e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|state_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6991e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|street_type_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000116458,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|tabblock|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.3512e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|tabblock_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.2062e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|tract|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.1982e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|tract_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.0652e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zcta5|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.0824e-05,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zcta5_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000482367,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zip_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000114867,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zip_lookup_all|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000913948,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zip_lookup_base|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000212197,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zip_state|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.002457321,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zip_state_loc|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000362815,
              "start_time": "2017-06-30 21:54:51 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must limit the number of concurrent sessions to an\n  organization-defined number per user for all accounts and/or account types.",
          "desc": "Database management includes the ability to control the number of users\n  and user sessions utilizing PostgreSQL. Unlimited concurrent connections to\n  PostgreSQL could allow a successful Denial of Service (DoS) attack by\n  exhausting connection resources; and a system can also fail or be degraded by\n  an overload of legitimate users. Limiting the number of concurrent sessions\n  per user is helpful in reducing these risks.\n  This requirement addresses concurrent session control for a single account.\n  It does not address concurrent sessions by a single user via multiple system\n  accounts; and it does not deal with the total number of sessions across all\n  accounts.\n  The capability to limit the number of concurrent sessions per user must be\n  configured in or added to PostgreSQL (for example, by use of a logon trigger),\n  when this is technically feasible. Note that it is not sufficient to limit\n  sessions via a web server or application server alone, because legitimate\n  users and adversaries can potentially connect to PostgreSQL by other means.\n  The organization will need to define the maximum number of concurrent sessions\n  by account type, by account, or a combination thereof. In deciding on the\n  appropriate number, it is important to consider the work requirements of the\n  various types of users. For example, 2 might be an acceptable limit for\n  general users accessing the database via an application; but 10 might be too\n  few for a database administrator using a database management GUI tool, where\n  each query tab and navigation pane may count as a separate session.\n  (Sessions may also be referred to as connections or logons, which for the\n  purposes of this requirement are synonyms..",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000001-DB-000031",
            "gid": "V-72863",
            "rid": "SV-87515r1_rule",
            "stig_id": "PGS9-00-001200",
            "cci": "CCI-000054",
            "nist": [
              "AC-10",
              "Rev_4"
            ],
            "check": "To check the total amount of connections allowed by the database,\n                as the database administrator, run the following SQL:\n                $ sudo su - postgres\n                $ psql -c \"SHOW max_connections\"\n                If the total amount of connections is greater than documented by\n                an organization, this is a finding.\n                To check the amount of connections allowed for each role, as the\n                database administrator, run the following SQL:\n                $ sudo su - postgres\n                $ psql -c \"SELECT rolname, rolconnlimit from pg_authid\"\n                If any roles have more connections configured than documented,\n                this is a finding. A value of -1 indicates Unlimited, this is a\n                finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\n      See supplementary content APPENDIX-F for instructions on\n      configuring PGDATA.\n\n      To configure the maximum amount of connections allowed to the\n      database, as the database administrator (shown here as \"postgres\")\n      change the following in postgresql.conf\n\n      (the value 10 is an example; set the value to suit local conditions):\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n      max_connections = 10\n\n      Next, restart the database:\n\n      # SYSTEMD SERVER ONLY\n      $ sudo systemctl restart postgresql-9.5\n\n      # INITD SERVER ONLY\n      $ sudo service postgresql-9.5 restart\n\n      To limit the amount of connections allowed by a specific role,\n      as the database administrator, run the following SQL:\n\n      $ psql -c \"ALTER ROLE <rolname> CONNECTION LIMIT 1\";"
          },
          "code": "control \"V-72863\" do\n  title \"PostgreSQL must limit the number of concurrent sessions to an\n  organization-defined number per user for all accounts and/or account types.\"\n  desc  \"Database management includes the ability to control the number of users\n  and user sessions utilizing PostgreSQL. Unlimited concurrent connections to\n  PostgreSQL could allow a successful Denial of Service (DoS) attack by\n  exhausting connection resources; and a system can also fail or be degraded by\n  an overload of legitimate users. Limiting the number of concurrent sessions\n  per user is helpful in reducing these risks.\n  This requirement addresses concurrent session control for a single account.\n  It does not address concurrent sessions by a single user via multiple system\n  accounts; and it does not deal with the total number of sessions across all\n  accounts.\n  The capability to limit the number of concurrent sessions per user must be\n  configured in or added to PostgreSQL (for example, by use of a logon trigger),\n  when this is technically feasible. Note that it is not sufficient to limit\n  sessions via a web server or application server alone, because legitimate\n  users and adversaries can potentially connect to PostgreSQL by other means.\n  The organization will need to define the maximum number of concurrent sessions\n  by account type, by account, or a combination thereof. In deciding on the\n  appropriate number, it is important to consider the work requirements of the\n  various types of users. For example, 2 might be an acceptable limit for\n  general users accessing the database via an application; but 10 might be too\n  few for a database administrator using a database management GUI tool, where\n  each query tab and navigation pane may count as a separate session.\n  (Sessions may also be referred to as connections or logons, which for the\n  purposes of this requirement are synonyms..\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000001-DB-000031\"\n  tag \"gid\": \"V-72863\"\n  tag \"rid\": \"SV-87515r1_rule\"\n  tag \"stig_id\": \"PGS9-00-001200\"\n  tag \"cci\": \"CCI-000054\"\n  tag \"nist\": [\"AC-10\", \"Rev_4\"]\n  tag \"check\": 'To check the total amount of connections allowed by the database,\n                as the database administrator, run the following SQL:\n                $ sudo su - postgres\n                $ psql -c \"SHOW max_connections\"\n                If the total amount of connections is greater than documented by\n                an organization, this is a finding.\n                To check the amount of connections allowed for each role, as the\n                database administrator, run the following SQL:\n                $ sudo su - postgres\n                $ psql -c \"SELECT rolname, rolconnlimit from pg_authid\"\n                If any roles have more connections configured than documented,\n                this is a finding. A value of -1 indicates Unlimited, this is a\n                finding.'\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\n      See supplementary content APPENDIX-F for instructions on\n      configuring PGDATA.\n\n      To configure the maximum amount of connections allowed to the\n      database, as the database administrator (shown here as \\\"postgres\\\")\n      change the following in postgresql.conf\n\n      (the value 10 is an example; set the value to suit local conditions):\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n      max_connections = 10\n\n      Next, restart the database:\n\n      # SYSTEMD SERVER ONLY\n      $ sudo systemctl restart postgresql-9.5\n\n      # INITD SERVER ONLY\n      $ sudo service postgresql-9.5 restart\n\n      To limit the amount of connections allowed by a specific role,\n      as the database administrator, run the following SQL:\n\n      $ psql -c \\\"ALTER ROLE <rolname> CONNECTION LIMIT 1\\\";\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW max_connections;', [PG_DB]) do\n    its('output.strip') { should be <= PG_MAX_CONNECTIONS }\n  end\n\n  describe sql.query('SELECT rolname, rolconnlimit from pg_authid;', [PG_DB]) do\n    its('output') { should_not contain '-1' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72863.rb",
            "line": 51
          },
          "id": "V-72863",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW max_connections; output.strip should be <= 100",
              "run_time": 0.000328597,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "failed",
              "code_desc": "PostgreSQL query: SELECT rolname, rolconnlimit from pg_authid; output should not contain \"-1\"",
              "run_time": 0.001242759,
              "start_time": "2017-06-30 21:54:51 +0000",
              "message": "expected \"vcap|-1\\nhaproxy|-1\\nreplication|-1\\ncrunchy|-1\\njesse|-1\" not to contain \"-1\""
            }
          ]
        },
        {
          "title": "PostgreSQL must use NIST FIPS 140-2 validated cryptographic modules for\n        cryptographic operations.",
          "desc": "Use of weak or not validated cryptographic algorithms undermines the\n        purposes of utilizing encryption and digital signatures to protect data.\n        Weak algorithms can be easily broken and not validated cryptographic\n        modules may not implement algorithms correctly. Unapproved cryptographic\n        modules or algorithms should not be relied on for authentication,\n        confidentiality or integrity. Weak cryptography could allow an attacker\n        to gain access to and modify data stored in the database as well as the\n        administration settings of the DBMS.\n\n        Applications, including DBMSs, utilizing cryptography are required to use\n        approved NIST FIPS 140-2 validated cryptographic modules that meet the\n        requirements of applicable federal laws, Executive Orders, directives,\n        policies, regulations, standards, and guidance.\n\n        The security functions validated as part of FIPS 140-2 for cryptographic\n        modules are described in FIPS 140-2 Annex A.\n\n        NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based\n        encryption modules.",
          "impact": 0.7,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000179-DB-000114",
            "gid": "V-73063",
            "rid": "SV-87715r1_rule",
            "stig_id": "PGS9-00-012300",
            "cci": "CCI-000803",
            "nist": [
              "IA-7",
              "Rev_4"
            ],
            "check": "As the system administrator, run the following:\n\n      $ openssl version\n      If \"fips\" is not included in the openssl version, this is a finding.",
            "fix": "Configure OpenSSL to meet FIPS Compliance using the following\n      documentation in section 9.1:\n\n      http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp1758.pdf\n\n      For more information on configuring PostgreSQL to use SSL, see supplementary\n      content APPENDIX-G."
          },
          "code": "control \"V-73063\" do\n  title \"PostgreSQL must use NIST FIPS 140-2 validated cryptographic modules for\n        cryptographic operations.\"\n  desc  \"Use of weak or not validated cryptographic algorithms undermines the\n        purposes of utilizing encryption and digital signatures to protect data.\n        Weak algorithms can be easily broken and not validated cryptographic\n        modules may not implement algorithms correctly. Unapproved cryptographic\n        modules or algorithms should not be relied on for authentication,\n        confidentiality or integrity. Weak cryptography could allow an attacker\n        to gain access to and modify data stored in the database as well as the\n        administration settings of the DBMS.\n\n        Applications, including DBMSs, utilizing cryptography are required to use\n        approved NIST FIPS 140-2 validated cryptographic modules that meet the\n        requirements of applicable federal laws, Executive Orders, directives,\n        policies, regulations, standards, and guidance.\n\n        The security functions validated as part of FIPS 140-2 for cryptographic\n        modules are described in FIPS 140-2 Annex A.\n\n        NSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based\n        encryption modules.\"\n  impact 0.7\n  tag \"severity\": \"high\"\n\n  tag \"gtitle\": \"SRG-APP-000179-DB-000114\"\n  tag \"gid\": \"V-73063\"\n  tag \"rid\": \"SV-87715r1_rule\"\n  tag \"stig_id\": \"PGS9-00-012300\"\n  tag \"cci\": \"CCI-000803\"\n  tag \"nist\": [\"IA-7\", \"Rev_4\"]\n\n  tag \"check\": \"As the system administrator, run the following:\n\n      $ openssl version\n      If \\\"fips\\\" is not included in the openssl version, this is a finding.\"\n\n  tag \"fix\": \"Configure OpenSSL to meet FIPS Compliance using the following\n      documentation in section 9.1:\n\n      http://csrc.nist.gov/groups/STM/cmvp/documents/140-1/140sp/140sp1758.pdf\n\n      For more information on configuring PostgreSQL to use SSL, see supplementary\n      content APPENDIX-G.\"\n\n  only_if do\n    package('openssl').installed?\n  end\n\n  openssl_bin = command('which openssl').stdout.strip\n\n  describe command(\"#{openssl_bin} version\") do\n    its('stdout.strip') { should include 'fips' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73063.rb",
            "line": 104
          },
          "id": "V-73063",
          "results": [
            {
              "status": "failed",
              "code_desc": "Command /usr/bin/openssl version stdout.strip should include \"fips\"",
              "run_time": 0.093445598,
              "start_time": "2017-06-30 21:54:51 +0000",
              "message": "expected \"OpenSSL 1.0.1f 6 Jan 2014\" to include \"fips\""
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when successful accesses to\n        objects occur.",
          "desc": "Without tracking all or selected types of access to all or selected\n        objects (tables, views, procedures, functions, etc.), it would be\n        difficult to establish, correlate, and investigate the events relating\n        to an incident, or identify those responsible for one.\n\n        In an SQL environment, types of access include, but are not necessarily\n        limited to:\n\n        SELECT\n        INSERT\n        UPDATE\n        DELETE\n        EXECUT.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000507-DB-000356",
            "gid": "V-73067",
            "rid": "SV-87719r1_rule",
            "stig_id": "PGS9-00-012600",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "As the database administrator, verify pgaudit is enabled by\n      running the following SQL:\n\n      $ sudo su - postgres\n      $ psql -c \"SHOW shared_preload_libraries\"\n\n      If the output does not contain \"pgaudit\", this is a finding.\n\n      Verify that role, read, write, and ddl auditing are enabled:\n\n      $ psql -c \"SHOW pgaudit.log\"\n\n      If the output does not contain read and write, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\n      See supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\n      To ensure that logging is enabled, review supplementary content APPENDIX-C\n      for instructions on enabling logging.\n\n      If logging is enabled the following configurations must be made to log\n      unsuccessful connections, date/time, username and session identifier.\n\n      As the database administrator (shown here as \"postgres\"),\n      edit postgresql.conf:\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n\n      Edit the following parameters:\n\n      log_connections = on\n      log_line_prefix = '< %m %u %c: >'\n      pgaudit.log = 'read, write'\n\n      Where:\n      * %m is the time and date\n      * %u is the username\n      * %c is the session ID for the connection\n\n      Now, as the system administrator, reload the server with the new\n      configuration:\n\n      # SYSTEMD SERVER ONLY\n      $ sudo systemctl reload postgresql-9.5\n\n      # INITD SERVER ONLY\n      $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-73067\" do\n  title \"PostgreSQL must generate audit records when successful accesses to\n        objects occur.\"\n  desc  \"Without tracking all or selected types of access to all or selected\n        objects (tables, views, procedures, functions, etc.), it would be\n        difficult to establish, correlate, and investigate the events relating\n        to an incident, or identify those responsible for one.\n\n        In an SQL environment, types of access include, but are not necessarily\n        limited to:\n\n        SELECT\n        INSERT\n        UPDATE\n        DELETE\n        EXECUT.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n\n  tag \"gtitle\": \"SRG-APP-000507-DB-000356\"\n  tag \"gid\": \"V-73067\"\n  tag \"rid\": \"SV-87719r1_rule\"\n  tag \"stig_id\": \"PGS9-00-012600\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n\n  tag \"check\": \"As the database administrator, verify pgaudit is enabled by\n      running the following SQL:\n\n      $ sudo su - postgres\n      $ psql -c \\\"SHOW shared_preload_libraries\\\"\n\n      If the output does not contain \\\"pgaudit\\\", this is a finding.\n\n      Verify that role, read, write, and ddl auditing are enabled:\n\n      $ psql -c \\\"SHOW pgaudit.log\\\"\n\n      If the output does not contain read and write, this is a finding.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\n      See supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\n      To ensure that logging is enabled, review supplementary content APPENDIX-C\n      for instructions on enabling logging.\n\n      If logging is enabled the following configurations must be made to log\n      unsuccessful connections, date/time, username and session identifier.\n\n      As the database administrator (shown here as \\\"postgres\\\"),\n      edit postgresql.conf:\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n\n      Edit the following parameters:\n\n      log_connections = on\n      log_line_prefix = '< %m %u %c: >'\n      pgaudit.log = 'read, write'\n\n      Where:\n      * %m is the time and date\n      * %u is the username\n      * %c is the session ID for the connection\n\n      Now, as the system administrator, reload the server with the new\n      configuration:\n\n      # SYSTEMD SERVER ONLY\n      $ sudo systemctl reload postgresql-9.5\n\n      # INITD SERVER ONLY\n      $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'read' }\n    its('output') { should include 'write' }\n  end\nend",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73067.rb",
            "line": 104
          },
          "id": "V-73067",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.002565997,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
              "run_time": 0.001270009,
              "start_time": "2017-06-30 21:54:51 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 0.000420641,
              "start_time": "2017-06-30 21:54:52 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must associate organization-defined types of security labels\n  having organization-defined security label values with information in storage.",
          "desc": "It is ISO responsibility to utilize PostgreSQL RLS capabilities. No\n        security labeling requirements have been specified.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000311-DB-000308",
            "gid": "V-72869",
            "rid": "SV-87521r1_rule",
            "stig_id": "PGS9-00-001700",
            "cci": "CCI-002262",
            "nist": [
              "AC-16 a",
              "Rev_4"
            ],
            "check": "If security labeling is not required, this is not a finding.\n  First, as the database administrator (shown here as \"postgres\"), run the\n  following SQL against each table that requires security labels:\n\n  $ sudo su - postgres\n$ psql -c \"\\d+ <schema_name>.<table_name>\"\n\n  If security labeling is required and the results of the SQL above do not show\n  a policy attached to the table, this is a finding.\n\n  If security labeling is required and not implemented according to the system\n  documentation, such as SSP, this is a finding.\n\n  If security labeling requirements have been specified, but the security\n  labeling is not implemented or does not reliably maintain labels on\n  information in storage, this is a finding.",
            "fix": "In addition to the SQL-standard privilege system available through\n  GRANT, tables can have row security policies that restrict, on a per-user\n  basis, which rows can be returned by normal queries or inserted, updated, or\n  deleted by data modification commands. This feature is also known as Row-Level\n  Security (RLS).\n\n  RLS policies can be very different depending on their use case. For one example\n  of using RLS for Security Labels, see supplementary content APPENDIX-D."
          },
          "code": "control \"V-72869\" do\n  title \"PostgreSQL must associate organization-defined types of security labels\n  having organization-defined security label values with information in storage.\"\n  desc  \"Without the association of security labels to information, there is no\n  basis for PostgreSQL to make security-related access-control decisions.\n  Security labels are abstractions representing the basic properties or\n  characteristics of an entity (e.g., subjects and objects) with respect to\n  safeguarding information.\n  These labels are typically associated with internal data structures (e.g.,\n  tables, rows) within the database and are used to enable the implementation of\n  access control and flow control policies, reflect special dissemination,\n  handling or distribution instructions, or support other aspects of the\n  information security policy.\n  One example includes marking data as classified or FOUO. These security labels\n  may be assigned manually or during data processing, but, either way, it is\n  imperative these assignments are maintained while the data is in storage. If\n  the security labels are lost when the data is stored, there is the risk of a\n  data compromise.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000311-DB-000308\"\n  tag \"gid\": \"V-72869\"\n  tag \"rid\": \"SV-87521r1_rule\"\n  tag \"stig_id\": \"PGS9-00-001700\"\n  tag \"cci\": \"CCI-002262\"\n  tag \"nist\": [\"AC-16 a\", \"Rev_4\"]\n  tag \"check\": \"If security labeling is not required, this is not a finding.\n  First, as the database administrator (shown here as \\\"postgres\\\"), run the\n  following SQL against each table that requires security labels:\n\n  $ sudo su - postgres\n$ psql -c \\\"\\\\d+ <schema_name>.<table_name>\\\"\n\n  If security labeling is required and the results of the SQL above do not show\n  a policy attached to the table, this is a finding.\n\n  If security labeling is required and not implemented according to the system\n  documentation, such as SSP, this is a finding.\n\n  If security labeling requirements have been specified, but the security\n  labeling is not implemented or does not reliably maintain labels on\n  information in storage, this is a finding.\"\n\n  tag \"fix\": \"In addition to the SQL-standard privilege system available through\n  GRANT, tables can have row security policies that restrict, on a per-user\n  basis, which rows can be returned by normal queries or inserted, updated, or\n  deleted by data modification commands. This feature is also known as Row-Level\n  Security (RLS).\n\n  RLS policies can be very different depending on their use case. For one example\n  of using RLS for Security Labels, see supplementary content APPENDIX-D.\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72869.rb",
            "line": 23
          },
          "id": "V-72869",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 1.7683e-05,
              "start_time": "2017-06-30 21:54:52 +0000"
            }
          ]
        },
        {
          "title": "Privileges to change PostgreSQL software modules must be limited.",
          "desc": "If the system were to allow any user to make changes to software\n  libraries, those changes might be implemented without undergoing the\n  appropriate testing and approvals that are part of a robust change management\n  process.  Accordingly, only qualified and authorized individuals must be\n  allowed to obtain access to information system components for purposes of\n  initiating changes, including upgrades and modifications.  Unmanaged changes\n  that occur to the database software libraries or configuration can lead to\n  unauthorized or compromised installations.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000133-DB-000179",
            "gid": "V-72853",
            "rid": "SV-87505r1_rule",
            "stig_id": "PGS9-00-000700",
            "cci": "CCI-001499",
            "nist": [
              "CM-5 (6)",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  As the database administrator (shown here as \"postgres\"), check the\n  permissions of configuration files for the database:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}\n\n  If any files are not owned by the database owner or have permissions allowing\n  others to modify (write) configuration files, this is a finding.\n\n  As the server administrator, check the permissions on the shared libraries for\n  PostgreSQL:\n\n  $ sudo ls -la /usr/pgsql-9.5\n  $ sudo ls -la /usr/pgsql-9.5/bin\n  $ sudo ls -la /usr/pgsql-9.5/include\n  $ sudo ls -la /usr/pgsql-9.5/lib\n  $ sudo ls -la /usr/pgsql-9.5/share\n\n  If any files are not owned by root or have permissions allowing others to\n  modify (write) configuration files, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  As the database administrator (shown here as \"postgres\"), change\n  the ownership and permissions of configuration files in PGDATA:\n\n  $ sudo su - postgres\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\n  $ chmod 0600 ${PGDATA?}/postgresql.conf\n\n  As the server administrator, change the ownership and permissions of shared\n  objects in /usr/pgsql-9.5/*.so\n\n  $ sudo chown root:root /usr/pgsql-9.5/lib/*.so\n  $ sudo chmod 0755 /usr/pgsql-9.5/lib/*.so\n\n  As the service administrator, change the ownership and permissions of\n  executables in /usr/pgsql-9.5/bin:\n\n  $ sudo chown root:root /usr/pgsql-9.5/bin/*\n  $ sudo chmod 0755 /usr/pgsql-9.5/bin/*"
          },
          "code": "control \"V-72853\" do\n  title \"Privileges to change PostgreSQL software modules must be limited.\"\n  desc  \"If the system were to allow any user to make changes to software\n  libraries, those changes might be implemented without undergoing the\n  appropriate testing and approvals that are part of a robust change management\n  process.  Accordingly, only qualified and authorized individuals must be\n  allowed to obtain access to information system components for purposes of\n  initiating changes, including upgrades and modifications.  Unmanaged changes\n  that occur to the database software libraries or configuration can lead to\n  unauthorized or compromised installations.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000133-DB-000179\"\n  tag \"gid\": \"V-72853\"\n  tag \"rid\": \"SV-87505r1_rule\"\n  tag \"stig_id\": \"PGS9-00-000700\"\n  tag \"cci\": \"CCI-001499\"\n  tag \"nist\": [\"CM-5 (6)\", \"Rev_4\"]\n\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  As the database administrator (shown here as \\\"postgres\\\"), check the\n  permissions of configuration files for the database:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}\n\n  If any files are not owned by the database owner or have permissions allowing\n  others to modify (write) configuration files, this is a finding.\n\n  As the server administrator, check the permissions on the shared libraries for\n  PostgreSQL:\n\n  $ sudo ls -la /usr/pgsql-9.5\n  $ sudo ls -la /usr/pgsql-9.5/bin\n  $ sudo ls -la /usr/pgsql-9.5/include\n  $ sudo ls -la /usr/pgsql-9.5/lib\n  $ sudo ls -la /usr/pgsql-9.5/share\n\n  If any files are not owned by root or have permissions allowing others to\n  modify (write) configuration files, this is a finding.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  As the database administrator (shown here as \\\"postgres\\\"), change\n  the ownership and permissions of configuration files in PGDATA:\n\n  $ sudo su - postgres\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\n  $ chmod 0600 ${PGDATA?}/postgresql.conf\n\n  As the server administrator, change the ownership and permissions of shared\n  objects in /usr/pgsql-9.5/*.so\n\n  $ sudo chown root:root /usr/pgsql-9.5/lib/*.so\n  $ sudo chmod 0755 /usr/pgsql-9.5/lib/*.so\n\n  As the service administrator, change the ownership and permissions of\n  executables in /usr/pgsql-9.5/bin:\n\n  $ sudo chown root:root /usr/pgsql-9.5/bin/*\n  $ sudo chmod 0755 /usr/pgsql-9.5/bin/*\"\n\n  describe directory(PG_DATA) do\n    it { should be_owned_by PG_OWNER }\n    its('mode') { should cmp '0700' }\n  end\n\n  describe command(\"find -L #{PG_DATA} -type f ! -user #{PG_OWNER} -or -perm -g=w -or -perm -o=w\") do\n    its('stdout') { should eq '' }\n    its('stderr') { should eq '' }\n  end\n\n  PG_SHARED_LIBS.each do |dir|\n    describe directory(dir) do\n      it { should be_owned_by 'root' }\n      its('mode') { should cmp '0755' }\n    end\n\n    describe command(\"find -L #{dir} -type f ! -user root -or -perm -g=w -or -perm -o=w\") do\n      its('stdout') { should eq '' }\n      its('stderr') { should eq '' }\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72853.rb",
            "line": 51
          },
          "id": "V-72853",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data should be owned by \"vcap\"",
              "run_time": 0.00031566,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data mode should cmp == \"0700\"",
              "run_time": 0.003721548,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /var/vcap/store/postgresql/data -type f ! -user vcap -or -perm -g=w -or -perm -o=w stdout should eq \"\"",
              "run_time": 0.043754813,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /var/vcap/store/postgresql/data -type f ! -user vcap -or -perm -g=w -or -perm -o=w stderr should eq \"\"",
              "run_time": 0.000346012,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/bin should be owned by \"root\"",
              "run_time": 0.035164297,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/bin mode should cmp == \"0755\"",
              "run_time": 0.000740978,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /usr/lib/postgresql/9.5/bin -type f ! -user root -or -perm -g=w -or -perm -o=w stdout should eq \"\"",
              "run_time": 0.051862572,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /usr/lib/postgresql/9.5/bin -type f ! -user root -or -perm -g=w -or -perm -o=w stderr should eq \"\"",
              "run_time": 0.000308799,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/lib should be owned by \"root\"",
              "run_time": 0.042230553,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/lib mode should cmp == \"0755\"",
              "run_time": 0.001868291,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /usr/lib/postgresql/9.5/lib -type f ! -user root -or -perm -g=w -or -perm -o=w stdout should eq \"\"",
              "run_time": 0.029079014,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /usr/lib/postgresql/9.5/lib -type f ! -user root -or -perm -g=w -or -perm -o=w stderr should eq \"\"",
              "run_time": 0.000357009,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/include/postgresql/9.5 should be owned by \"root\"",
              "run_time": 0.043295308,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/include/postgresql/9.5 mode should cmp == \"0755\"",
              "run_time": 0.000554887,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /usr/include/postgresql/9.5 -type f ! -user root -or -perm -g=w -or -perm -o=w stdout should eq \"\"",
              "run_time": 0.02480315,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /usr/include/postgresql/9.5 -type f ! -user root -or -perm -g=w -or -perm -o=w stderr should eq \"\"",
              "run_time": 0.000612031,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/share/postgresql/9.5 should be owned by \"root\"",
              "run_time": 0.04002891,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/share/postgresql/9.5 mode should cmp == \"0755\"",
              "run_time": 0.001621969,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /usr/share/postgresql/9.5 -type f ! -user root -or -perm -g=w -or -perm -o=w stdout should eq \"\"",
              "run_time": 0.035847287,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /usr/share/postgresql/9.5 -type f ! -user root -or -perm -g=w -or -perm -o=w stderr should eq \"\"",
              "run_time": 0.000410513,
              "start_time": "2017-06-30 21:54:52 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must produce audit records containing sufficient information\n  to establish the identity of any user/subject or process associated with the\n  event.",
          "desc": "Information system auditing capability is critical for accurate\n  forensic analysis. Without information that establishes the identity of the\n  subjects (i.e., users or processes acting on behalf of users) associated with\n  the events, security personnel cannot determine responsibility for the\n  potentially harmful event.\n  Identifiers (if authenticated or otherwise known) include, but are not limited\n  to, user database tables, primary key values, user names, or process identifiers.\n  1) Linux's sudo and su feature enables a user (with sufficient OS privileges)\n  to emulate another user, and it is the identity of the emulated user that is\n  seen by PostgreSQL and logged in the audit trail. Therefore, care must be\n  taken (outside of Postgresql) to restrict sudo/su to the minimum set of users\n  necessary.\n  2) PostgreSQL's SET ROLE feature enables a user (with sufficient PostgreSQL\n  privileges) to emulate another user running statements under the permission\n  set of the emulated user. In this case, it is the emulating user's identity,\n  and not that of the emulated user, that gets logged in the audit trail.\n  While this is definitely better than the other way around, ideally, both\n  identities would be recorded.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "check": "Check PostgreSQL settings and existing audit records to verify a\n  user name associated with the event is being captured and stored with the\n  audit records. If audit records exist without specific user information, this\n  is a finding.\n  First, as the database administrator (shown here as \"postgres\"), verify the\n  current setting of log_line_prefix by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_line_prefix\"\n  If log_line_prefix does not contain %m, %u, %d, %p, %r, %a, this is a finding.",
            "fix": "Logging must be enabled in order to capture the identity of any\n  user/subject or process associated with an event. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging.\n  To enable username, database name, process ID, remote host/port and\n  application name in logging, as the database administrator (shown here as\n  \"postgres\"), edit the following in postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_line_prefix = '< %m %u %d %p %r %a >'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72987\" do\n  title \"PostgreSQL must produce audit records containing sufficient information\n  to establish the identity of any user/subject or process associated with the\n  event.\"\n  desc  \"Information system auditing capability is critical for accurate\n  forensic analysis. Without information that establishes the identity of the\n  subjects (i.e., users or processes acting on behalf of users) associated with\n  the events, security personnel cannot determine responsibility for the\n  potentially harmful event.\n  Identifiers (if authenticated or otherwise known) include, but are not limited\n  to, user database tables, primary key values, user names, or process identifiers.\n  1) Linux's sudo and su feature enables a user (with sufficient OS privileges)\n  to emulate another user, and it is the identity of the emulated user that is\n  seen by PostgreSQL and logged in the audit trail. Therefore, care must be\n  taken (outside of Postgresql) to restrict sudo/su to the minimum set of users\n  necessary.\n  2) PostgreSQL's SET ROLE feature enables a user (with sufficient PostgreSQL\n  privileges) to emulate another user running statements under the permission\n  set of the emulated user. In this case, it is the emulating user's identity,\n  and not that of the emulated user, that gets logged in the audit trail.\n  While this is definitely better than the other way around, ideally, both\n  identities would be recorded.\"\n  tag \"check\": \"Check PostgreSQL settings and existing audit records to verify a\n  user name associated with the event is being captured and stored with the\n  audit records. If audit records exist without specific user information, this\n  is a finding.\n  First, as the database administrator (shown here as \\\"postgres\\\"), verify the\n  current setting of log_line_prefix by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW log_line_prefix\\\"\n  If log_line_prefix does not contain %m, %u, %d, %p, %r, %a, this is a finding.\"\n  tag \"fix\": \"Logging must be enabled in order to capture the identity of any\n  user/subject or process associated with an event. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging.\n  To enable username, database name, process ID, remote host/port and\n  application name in logging, as the database administrator (shown here as\n  \\\"postgres\\\"), edit the following in postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_line_prefix = '< %m %u %d %p %r %a >'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW log_line_prefix;', [PG_DB]) do\n    its('output') { should include '%m' }\n    its('output') { should include '%u' }\n    its('output') { should include '%d' }\n    its('output') { should include '%p' }\n    its('output') { should include '%r' }\n    its('output') { should include '%a' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72987.rb",
            "line": 46
          },
          "id": "V-72987",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%m\"",
              "run_time": 0.000847135,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%u\"",
              "run_time": 0.000344721,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%d\"",
              "run_time": 0.000382609,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "failed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%p\"",
              "run_time": 0.004496158,
              "start_time": "2017-06-30 21:54:52 +0000",
              "message": "expected \"< %m %a %u %d %c %s %r >\" to include \"%p\""
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%r\"",
              "run_time": 9.9646e-05,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%a\"",
              "run_time": 0.000134738,
              "start_time": "2017-06-30 21:54:52 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  access categorized information (e.g., classification levels/security levels)\n  occur.",
          "desc": "Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000494-DB-000345",
            "gid": "V-72955",
            "rid": "SV-87607r1_rule",
            "stig_id": "PGS9-00-005900",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator (shown here as\n  \"postgres\"), run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW pgaudit.log\"\n  If pgaudit.log does not contain, \"ddl, write, role\", this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access categories of information.\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging.\n  With `pgaudit` installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'ddl, write, role'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-$9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72955\" do\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\n  access categorized information (e.g., classification levels/security levels)\n  occur.\"\n  desc  \"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000494-DB-000345\"\n  tag \"gid\": \"V-72955\"\n  tag \"rid\": \"SV-87607r1_rule\"\n  tag \"stig_id\": \"PGS9-00-005900\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator (shown here as\n  \\\"postgres\\\"), run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW pgaudit.log\\\"\n  If pgaudit.log does not contain, \\\"ddl, write, role\\\", this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access categories of information.\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging.\n  With `pgaudit` installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'ddl, write, role'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-$9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'ddl' }\n    its('output') { should include 'role' }\n    its('output') { should include 'write' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72955.rb",
            "line": 46
          },
          "id": "V-72955",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
              "run_time": 0.002084305,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 0.000160124,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 0.000189373,
              "start_time": "2017-06-30 21:54:52 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must utilize centralized management of the content captured\n  in audit records generated by all components of PostgreSQL.",
          "desc": "The Crunchy DBaaS inherits this control from the Centralized Log\n        Monitoring Service (i.e., ArcSight) after configuring the systems/VMs\n        to audit all events as required in ICS 500-27 and NCD 8010.17.The Program\n        sends the system logs to the Centralized Log Monitoring Service (i.e. ArcSight)\n        via PaaS BOSH Logs Collector.  It is the responsibility of the ArcSight\n        Service Provider to coordinate security audit function with other\n        organization entities.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000356-DB-000314",
            "gid": "V-72909",
            "rid": "SV-87561r1_rule",
            "stig_id": "PGS9-00-003800",
            "cci": "CCI-001844",
            "nist": [
              "AU-3 (2)",
              "Rev_4"
            ],
            "check": "On UNIX systems, PostgreSQL can be configured to use stderr,\n  csvlog and syslog. To send logs to a centralized location, syslog should be\n  used.\n  As the database owner (shown here as \"postgres\"), ensure PostgreSQL uses\n  syslog by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_destination\"\n  As the database owner (shown here as \"postgres\"), check which log facility\n  PostgreSQL is configured by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW syslog_facility\"\n  Check with the organization to see how syslog facilities are defined in their\n  organization.\n  If PostgreSQL audit records are not written directly to or systematically\n  transferred to a centralized log management system, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  With logging enabled, as the database owner (shown here as \"postgres\"),\n  configure the follow parameters in postgresql.conf:\n  Note: Consult the organization on how syslog facilities are defined in the\n  syslog daemon configuration.\n  $ sudo su - postgres\n  $ vi 'log_destination' ${PGDATA?}/postgresql.conf\n  log_destination = 'syslog'\n  syslog_facility = 'LOCAL0'\n  syslog_ident = 'postgres'\n  Now, as the system administrator, reload the server with the new\n  configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72909\" do\n  title \"PostgreSQL must utilize centralized management of the content captured\n  in audit records generated by all components of PostgreSQL.\"\n  desc  \"Without the ability to centrally manage the content captured in the\n  audit records, identification, troubleshooting, and correlation of suspicious\n  behavior would be difficult and could lead to a delayed or incomplete analysis\n  of an ongoing attack.\n  The content captured in audit records must be managed from a central location\n  (necessitating automation). Centralized management of audit records and logs\n  provides for efficiency in maintenance and management of records, as well as\n  the backup and archiving of those records.\n  PostgreSQL may write audit records to database tables, to files in the file\n  system, to other kinds of local repository, or directly to a centralized log\n  management system. Whatever the method used, it must be compatible with\n  off-loading the records to the centralized system.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000356-DB-000314\"\n  tag \"gid\": \"V-72909\"\n  tag \"rid\": \"SV-87561r1_rule\"\n  tag \"stig_id\": \"PGS9-00-003800\"\n  tag \"cci\": \"CCI-001844\"\n  tag \"nist\": [\"AU-3 (2)\", \"Rev_4\"]\n  tag \"check\": \"On UNIX systems, PostgreSQL can be configured to use stderr,\n  csvlog and syslog. To send logs to a centralized location, syslog should be\n  used.\n  As the database owner (shown here as \\\"postgres\\\"), ensure PostgreSQL uses\n  syslog by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW log_destination\\\"\n  As the database owner (shown here as \\\"postgres\\\"), check which log facility\n  PostgreSQL is configured by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW syslog_facility\\\"\n  Check with the organization to see how syslog facilities are defined in their\n  organization.\n  If PostgreSQL audit records are not written directly to or systematically\n  transferred to a centralized log management system, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  With logging enabled, as the database owner (shown here as \\\"postgres\\\"),\n  configure the follow parameters in postgresql.conf:\n  Note: Consult the organization on how syslog facilities are defined in the\n  syslog daemon configuration.\n  $ sudo su - postgres\n  $ vi 'log_destination' ${PGDATA?}/postgresql.conf\n  log_destination = 'syslog'\n  syslog_facility = 'LOCAL0'\n  syslog_ident = 'postgres'\n  Now, as the system administrator, reload the server with the new\n  configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW log_destination;', [PG_DB]) do\n    its('output') { should match /syslog/i }\n  end\n\n  describe sql.query('SHOW syslog_facility;', [PG_DB]) do\n    its('output') { should match /local[0-7]/i }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72909.rb",
            "line": 45
          },
          "id": "V-72909",
          "results": [
            {
              "status": "failed",
              "code_desc": "PostgreSQL query: SHOW log_destination; output should match /syslog/i",
              "run_time": 0.000670296,
              "start_time": "2017-06-30 21:54:52 +0000",
              "message": "expected \"stderr\" to match /syslog/i\nDiff:\n@@ -1,2 +1,2 @@\n-/syslog/i\n+\"stderr\"\n"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW syslog_facility; output should match /local[0-7]/i",
              "run_time": 0.000292907,
              "start_time": "2017-06-30 21:54:52 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must implement NIST FIPS 140-2 validated cryptographic\n  modules to generate and validate cryptographic hashes.",
          "desc": "Use of weak or untested encryption algorithms undermines the purposes\n  of utilizing encryption to protect data. The application must implement\n  cryptographic modules adhering to the higher standards approved by the federal\n  government since this provides assurance they have been tested and validated.\n  For detailed information, refer to NIST FIPS Publication 140-2, Security\n  Requirements For Cryptographic Modules. Note that the product's cryptographic\n  modules must be validated and certified by NIST as FIPS-compliant.",
          "impact": 0.7,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000514-DB-000381",
            "gid": "V-72989",
            "rid": "SV-87641r1_rule",
            "stig_id": "PGS9-00-008000",
            "cci": "CCI-002450",
            "nist": [
              "SC-13",
              "Rev_4"
            ],
            "check": "First, as the system administrator, run the following to see if FIPS\nis enabled:\n\n$ cat /proc/sys/crypto/fips_enabled\n\nIf fips_enabled is not 1, this is a finding.",
            "fix": "Configure OpenSSL to be FIPS compliant.\n\nPostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS\n140-2 compliant, see the official RHEL Documentation:\nhttps://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Securit\ny_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Pro\ncessing_Standard.html\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G."
          },
          "code": "control \"V-72989\" do\n  title \"PostgreSQL must implement NIST FIPS 140-2 validated cryptographic\n  modules to generate and validate cryptographic hashes.\"\n  desc  \"Use of weak or untested encryption algorithms undermines the purposes\n  of utilizing encryption to protect data. The application must implement\n  cryptographic modules adhering to the higher standards approved by the federal\n  government since this provides assurance they have been tested and validated.\n  For detailed information, refer to NIST FIPS Publication 140-2, Security\n  Requirements For Cryptographic Modules. Note that the product's cryptographic\n  modules must be validated and certified by NIST as FIPS-compliant.\"\n\n  impact 0.7\n  tag \"severity\": \"high\"\n  tag \"gtitle\": \"SRG-APP-000514-DB-000381\"\n  tag \"gid\": \"V-72989\"\n  tag \"rid\": \"SV-87641r1_rule\"\n  tag \"stig_id\": \"PGS9-00-008000\"\n  tag \"cci\": \"CCI-002450\"\n  tag \"nist\": [\"SC-13\", \"Rev_4\"]\n\n  tag \"check\": \"First, as the system administrator, run the following to see if FIPS\nis enabled:\n\n$ cat /proc/sys/crypto/fips_enabled\n\nIf fips_enabled is not 1, this is a finding.\"\n  tag \"fix\": \"Configure OpenSSL to be FIPS compliant.\n\nPostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS\n140-2 compliant, see the official RHEL Documentation:\nhttps://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Securit\ny_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Pro\ncessing_Standard.html\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G.\"\n\n  describe file('/proc/sys/crypto/fips_enabled') do\n    its('content.strip') { should cmp 1 }\n  end\n  \nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72989.rb",
            "line": 23
          },
          "id": "V-72989",
          "results": [
            {
              "status": "failed",
              "code_desc": "File /proc/sys/crypto/fips_enabled content.strip ",
              "run_time": 0.000297855,
              "start_time": "2017-06-30 21:54:52 +0000",
              "message": "undefined method `strip' for nil:NilClass",
              "exception": "NoMethodError",
              "backtrace": [
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:115:in `block (3 levels) in its'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:114:in `each'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:114:in `inject'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:114:in `block (2 levels) in its'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:298:in `block (2 levels) in let'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:157:in `block (3 levels) in fetch_or_store'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:157:in `fetch'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:157:in `block (2 levels) in fetch_or_store'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-support-3.6.0/lib/rspec/support/reentrant_mutex.rb:23:in `synchronize'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:156:in `block in fetch_or_store'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:155:in `fetch'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:155:in `fetch_or_store'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:298:in `block in let'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:126:in `should'",
                "/var/vcap/packages/postgresql-baseline/controls/V-72989.rb:61:in `block (3 levels) in load_with_context'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:254:in `instance_exec'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:254:in `block in run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:500:in `block in with_around_and_singleton_context_hooks'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:457:in `block in with_around_example_hooks'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/hooks.rb:464:in `block in run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/hooks.rb:602:in `run_around_example_hooks_for'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/hooks.rb:464:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:457:in `with_around_example_hooks'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:500:in `with_around_and_singleton_context_hooks'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:251:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:627:in `block in run_examples'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:623:in `map'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:623:in `run_examples'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:589:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:590:in `block in run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:590:in `map'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:590:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:118:in `block (3 levels) in run_specs'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:118:in `map'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:118:in `block (2 levels) in run_specs'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/configuration.rb:1894:in `with_suite_hooks'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:113:in `block in run_specs'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/reporter.rb:79:in `report'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:112:in `run_specs'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/runner_rspec.rb:77:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/runner.rb:117:in `run_tests'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/runner.rb:101:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/base_cli.rb:83:in `run_tests'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/cli.rb:159:in `exec'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/command.rb:27:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/invocation.rb:126:in `invoke_command'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor.rb:359:in `dispatch'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/base.rb:440:in `start'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/bin/inspec:12:in `<top (required)>'",
                "/opt/inspec/bin/inspec:59:in `load'",
                "/opt/inspec/bin/inspec:59:in `<main>'"
              ]
            }
          ]
        },
        {
          "title": "PostgreSQL must enforce discretionary access control policies, as\n  defined by the data owner, over defined subjects and objects.",
          "desc": "Discretionary Access Control (DAC) is based on the notion that\n  individual users are \"owners\" of objects and therefore have discretion over\n  who should be authorized to access the object and in which mode (e.g., read or\n  write). Ownership is usually acquired as a consequence of creating the object\n  or via specified ownership assignment. DAC allows the owner to determine who\n  will have access to objects they control. An example of DAC includes\n  user-controlled table permissions.\n  When discretionary access control policies are implemented, subjects are not\n  constrained with regard to what actions they can take with information for\n  which they have already been granted access. Thus, subjects that have been\n  granted access to information are not prevented from passing (i.e., the\n  subjects have the discretion to pass) the information to other subjects or\n  objects.\n  A subject that is constrained in its operation by Mandatory Access Control\n  policies is still able to operate under the less rigorous constraints of this\n  requirement. Thus, while Mandatory Access Control imposes constraints\n  preventing a subject from passing information to another subject operating at\n  a different sensitivity level, this requirement permits the subject to pass\n  the information to any subject at the same sensitivity level.\n  The policy is bounded by the information system boundary. Once the information\n  is passed outside of the control of the information system, additional means\n  may be required to ensure the constraints remain in effect. While the older,\n  more traditional definitions of discretionary access control require i\n  dentity-based access control, that limitation is not required for this use of\n  discretionary access control.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000328-DB-000301",
            "gid": "V-72883",
            "rid": "SV-87535r1_rule",
            "stig_id": "PGS9-00-002200",
            "cci": "CCI-002165",
            "nist": [
              "AC-3 (4)",
              "Rev_4"
            ],
            "check": "Review system documentation to identify the required\n  discretionary access control (DAC).\n\n  Review the security configuration of the database and PostgreSQL. If\n  applicable, review the security configuration of the application(s) using the\n  database.\n\n  If the discretionary access control defined in the documentation is not\n  implemented in the security configuration, this is a finding.\n\n  If any database objects are found to be owned by users not authorized to own\n  database objects, this is a finding.\n\n  To check the ownership of objects in the database, as the database\n  administrator, run the following:\n  $ sudo su - postgres\n  $ psql -c \"\\dn *.*\"\n  $ psql -c \"\\dt *.*\"\n  $ psql -c \"\\ds *.*\"\n  $ psql -c \"\\dv *.*\"\n  $ psql -c \"\\df+ *.*\"\n  If any role is given privileges to objects it should not have, this is a\n  finding.",
            "fix": "Implement the organization's DAC policy in the security\n  configuration of the database and PostgreSQL, and, if applicable, the security\n  configuration of the application(s) using the database.\n  To GRANT privileges to roles, as the database administrator (shown here as\n  \"postgres\"), run statements like the following examples:\n  $ sudo su - postgres\n  $ psql -c \"CREATE SCHEMA test\"\n  $ psql -c \"GRANT CREATE ON SCHEMA test TO bob\"\n  $ psql -c \"CREATE TABLE test.test_table(id INT)\"\n  $ psql -c \"GRANT SELECT ON TABLE test.test_table TO bob\"\n  To REVOKE privileges to roles, as the database administrator (shown here as\n  \"postgres\"), run statements like the following examples:\n  $ psql -c \"REVOKE SELECT ON TABLE test.test_table FROM bob\"\n  $ psql -c \"REVOKE CREATE ON SCHEMA test FROM bob\""
          },
          "code": "control \"V-72883\" do\n  title \"PostgreSQL must enforce discretionary access control policies, as\n  defined by the data owner, over defined subjects and objects.\"\n  desc  \"Discretionary Access Control (DAC) is based on the notion that\n  individual users are \\\"owners\\\" of objects and therefore have discretion over\n  who should be authorized to access the object and in which mode (e.g., read or\n  write). Ownership is usually acquired as a consequence of creating the object\n  or via specified ownership assignment. DAC allows the owner to determine who\n  will have access to objects they control. An example of DAC includes\n  user-controlled table permissions.\n  When discretionary access control policies are implemented, subjects are not\n  constrained with regard to what actions they can take with information for\n  which they have already been granted access. Thus, subjects that have been\n  granted access to information are not prevented from passing (i.e., the\n  subjects have the discretion to pass) the information to other subjects or\n  objects.\n  A subject that is constrained in its operation by Mandatory Access Control\n  policies is still able to operate under the less rigorous constraints of this\n  requirement. Thus, while Mandatory Access Control imposes constraints\n  preventing a subject from passing information to another subject operating at\n  a different sensitivity level, this requirement permits the subject to pass\n  the information to any subject at the same sensitivity level.\n  The policy is bounded by the information system boundary. Once the information\n  is passed outside of the control of the information system, additional means\n  may be required to ensure the constraints remain in effect. While the older,\n  more traditional definitions of discretionary access control require i\n  dentity-based access control, that limitation is not required for this use of\n  discretionary access control.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000328-DB-000301\"\n  tag \"gid\": \"V-72883\"\n  tag \"rid\": \"SV-87535r1_rule\"\n  tag \"stig_id\": \"PGS9-00-002200\"\n  tag \"cci\": \"CCI-002165\"\n  tag \"nist\": [\"AC-3 (4)\", \"Rev_4\"]\n  tag \"check\": \"Review system documentation to identify the required\n  discretionary access control (DAC).\n\n  Review the security configuration of the database and PostgreSQL. If\n  applicable, review the security configuration of the application(s) using the\n  database.\n\n  If the discretionary access control defined in the documentation is not\n  implemented in the security configuration, this is a finding.\n\n  If any database objects are found to be owned by users not authorized to own\n  database objects, this is a finding.\n\n  To check the ownership of objects in the database, as the database\n  administrator, run the following:\n  $ sudo su - postgres\n  $ psql -c \\\"\\\\dn *.*\\\"\n  $ psql -c \\\"\\\\dt *.*\\\"\n  $ psql -c \\\"\\\\ds *.*\\\"\n  $ psql -c \\\"\\\\dv *.*\\\"\n  $ psql -c \\\"\\\\df+ *.*\\\"\n  If any role is given privileges to objects it should not have, this is a\n  finding.\"\n  tag \"fix\": \"Implement the organization's DAC policy in the security\n  configuration of the database and PostgreSQL, and, if applicable, the security\n  configuration of the application(s) using the database.\n  To GRANT privileges to roles, as the database administrator (shown here as\n  \\\"postgres\\\"), run statements like the following examples:\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE SCHEMA test\\\"\n  $ psql -c \\\"GRANT CREATE ON SCHEMA test TO bob\\\"\n  $ psql -c \\\"CREATE TABLE test.test_table(id INT)\\\"\n  $ psql -c \\\"GRANT SELECT ON TABLE test.test_table TO bob\\\"\n  To REVOKE privileges to roles, as the database administrator (shown here as\n  \\\"postgres\\\"), run statements like the following examples:\n  $ psql -c \\\"REVOKE SELECT ON TABLE test.test_table FROM bob\\\"\n  $ psql -c \\\"REVOKE CREATE ON SCHEMA test FROM bob\\\"\"\n\n  commands = [\n    '\\dn *.*',\n    '\\dt *.*',\n    '\\ds *.*',\n    '\\dv *.*'\n  ] # owner is the last column in output for these commands\n  object_owners = []\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  commands.each do |command|\n    sql.query(command, [PG_DB]).output.split(\"\\n\").each do |row|\n      unless row == 'No matching relations found.'\n        object_owners.push(row.split('|').last)\n      end\n    end\n  end\n\n  sql.query('\\df+', [PG_DB]).output.split(\"\\n\").each do |row|\n    object_owners.push(row.split('|')[7])\n  end\n\n  object_owners.uniq.each do |owner|\n    describe PG_OBJECT_OWNERS do\n      it { should include owner }\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72883.rb",
            "line": 57
          },
          "id": "V-72883",
          "results": [
            {
              "status": "passed",
              "code_desc": "[\"jesse\", \"vcap\", \"crunchy\", \"replication\"] should include \"vcap\"",
              "run_time": 0.001846445,
              "start_time": "2017-06-30 21:54:52 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must implement NIST FIPS 140-2 validated cryptographic modules\nto protect unclassified information requiring confidentiality and cryptographic\nprotection, in accordance with the data owners requirements.",
          "desc": "Use of weak or untested encryption algorithms undermines the purposes of\nutilizing encryption to protect data. The application must implement cryptographic\nmodules adhering to the higher standards approved by the federal government since\nthis provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements\nin light of applicable federal laws, Executive Orders, directives, policies,\nregulations, and standards.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security\nRequirements For Cryptographic Modules. Note that the product's cryptographic\nmodules must be validated and certified by NIST as FIPS-compliant.",
          "impact": 0.7,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000514-DB-000383",
            "gid": "V-72993",
            "rid": "SV-87645r1_rule",
            "stig_id": "PGS9-00-008200",
            "cci": "CCI-002450",
            "nist": [
              "SC-13",
              "Rev_4"
            ],
            "check": "First, as the system administrator, run the following to see if FIPS\nis enabled:\n\n$ cat /proc/sys/crypto/fips_enabled\n\nIf fips_enabled is not 1, this is a finding.",
            "fix": "Configure OpenSSL to be FIPS compliant.\n\nPostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS\n140-2 compliant, see the official RHEL Documentation:\nhttps://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Securit\ny_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Pro\ncessing_Standard.html\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G."
          },
          "code": "control \"V-72993\" do\n\n  title \"PostgreSQL must implement NIST FIPS 140-2 validated cryptographic modules\nto protect unclassified information requiring confidentiality and cryptographic\nprotection, in accordance with the data owners requirements.\"\n  desc  \"Use of weak or untested encryption algorithms undermines the purposes of\nutilizing encryption to protect data. The application must implement cryptographic\nmodules adhering to the higher standards approved by the federal government since\nthis provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements\nin light of applicable federal laws, Executive Orders, directives, policies,\nregulations, and standards.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security\nRequirements For Cryptographic Modules. Note that the product's cryptographic\nmodules must be validated and certified by NIST as FIPS-compliant.\"\n\n  impact 0.7\n  tag \"severity\": \"high\"\n  tag \"gtitle\": \"SRG-APP-000514-DB-000383\"\n  tag \"gid\": \"V-72993\"\n  tag \"rid\": \"SV-87645r1_rule\"\n  tag \"stig_id\": \"PGS9-00-008200\"\n  tag \"cci\": \"CCI-002450\"\n  tag \"nist\": [\"SC-13\", \"Rev_4\"]\n\n  tag \"check\": \"First, as the system administrator, run the following to see if FIPS\nis enabled:\n\n$ cat /proc/sys/crypto/fips_enabled\n\nIf fips_enabled is not 1, this is a finding.\"\n\n  tag \"fix\": \"Configure OpenSSL to be FIPS compliant.\n\nPostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS\n140-2 compliant, see the official RHEL Documentation:\nhttps://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Securit\ny_Guide/sect-Security_Guide-Federal_Standards_And_Regulations-Federal_Information_Pro\ncessing_Standard.html\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G.\"\n  \n  describe file('/proc/sys/crypto/fips_enabled') do\n    its('content.strip') { should cmp 1 }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72993.rb",
            "line": 26
          },
          "id": "V-72993",
          "results": [
            {
              "status": "failed",
              "code_desc": "File /proc/sys/crypto/fips_enabled content.strip ",
              "run_time": 0.000457882,
              "start_time": "2017-06-30 21:54:52 +0000",
              "message": "undefined method `strip' for nil:NilClass",
              "exception": "NoMethodError",
              "backtrace": [
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:115:in `block (3 levels) in its'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:114:in `each'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:114:in `inject'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:114:in `block (2 levels) in its'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:298:in `block (2 levels) in let'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:157:in `block (3 levels) in fetch_or_store'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:157:in `fetch'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:157:in `block (2 levels) in fetch_or_store'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-support-3.6.0/lib/rspec/support/reentrant_mutex.rb:23:in `synchronize'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:156:in `block in fetch_or_store'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:155:in `fetch'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:155:in `fetch_or_store'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/memoized_helpers.rb:298:in `block in let'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-its-1.2.0/lib/rspec/its.rb:126:in `should'",
                "/var/vcap/packages/postgresql-baseline/controls/V-72993.rb:72:in `block (3 levels) in load_with_context'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:254:in `instance_exec'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:254:in `block in run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:500:in `block in with_around_and_singleton_context_hooks'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:457:in `block in with_around_example_hooks'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/hooks.rb:464:in `block in run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/hooks.rb:602:in `run_around_example_hooks_for'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/hooks.rb:464:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:457:in `with_around_example_hooks'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:500:in `with_around_and_singleton_context_hooks'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example.rb:251:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:627:in `block in run_examples'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:623:in `map'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:623:in `run_examples'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:589:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:590:in `block in run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:590:in `map'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/example_group.rb:590:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:118:in `block (3 levels) in run_specs'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:118:in `map'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:118:in `block (2 levels) in run_specs'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/configuration.rb:1894:in `with_suite_hooks'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:113:in `block in run_specs'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/reporter.rb:79:in `report'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/rspec-core-3.6.0/lib/rspec/core/runner.rb:112:in `run_specs'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/runner_rspec.rb:77:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/runner.rb:117:in `run_tests'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/runner.rb:101:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/base_cli.rb:83:in `run_tests'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/lib/inspec/cli.rb:159:in `exec'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/command.rb:27:in `run'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/invocation.rb:126:in `invoke_command'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor.rb:359:in `dispatch'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/thor-0.19.1/lib/thor/base.rb:440:in `start'",
                "/opt/inspec/embedded/lib/ruby/gems/2.3.0/gems/inspec-1.29.0/bin/inspec:12:in `<top (required)>'",
                "/opt/inspec/bin/inspec:59:in `load'",
                "/opt/inspec/bin/inspec:59:in `<main>'"
              ]
            }
          ]
        },
        {
          "title": "PostgreSQL must implement cryptographic mechanisms to prevent unauthorized\nmodification of organization-defined information at rest (to include, at a minimum,\nPII and classified information) on organization-defined information system\ncomponents.",
          "desc": "PostgreSQLs handling data requiring \"data at rest\" protections must\nemploy cryptographic mechanisms to prevent unauthorized disclosure and modification\nof the information at rest. These cryptographic mechanisms may be native to\nPostgreSQL or implemented via additional software or operating system/file system\nsettings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity\nof organizational information. The strength of the mechanism is commensurate with\nthe security category and/or classification of the information. Organizations have\nthe flexibility to either encrypt all information on storage devices (i.e., full\ndisk encryption) or encrypt specific data structures (e.g., files, records, or\nfields).\n\nThe decision whether and what to encrypt rests with the data owner and is also\ninfluenced by the physical measures taken to secure the equipment and media on which\nthe information resides.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000428-DB-000386",
            "gid": "V-73003",
            "rid": "SV-87655r1_rule",
            "stig_id": "PGS9-00-008700",
            "cci": "CCI-002475",
            "nist": [
              "SC-28 (1)",
              "Rev_4"
            ],
            "check": "Review the system documentation to determine whether the\norganization has defined the information at rest that is to be protected from\nmodification, which must include, at a minimum, PII and classified information.\n\nIf no information is identified as requiring such protection, this is not a finding.\n\nReview the configuration of PostgreSQL, operating system/file system, and additional\nsoftware as relevant.\n\nIf any of the information defined as requiring cryptographic protection from\nmodification is not encrypted in a manner that provides the required level of\nprotection, this is a finding.\n\nOne possible way to encrypt data within PostgreSQL is to use pgcrypto extension.\n\nTo check if pgcrypto is installed on PostgreSQL, as a database administrator (shown\nhere as \"postgres\"), run the following command:\n\n$ sudo su - postgres\n$ psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a\nfinding.\n\nIf disk or filesystem requires encryption, ask the system owner, DBA, and SA to\ndemonstrate filesystem or disk level encryption.\n\nIf this is required and is not found, this is a finding.",
            "fix": "Configure PostgreSQL, operating system/file system, and additional\nsoftware as relevant, to provide the required level of cryptographic protection.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See\nsupplementary content APPENDIX-E for documentation on installing pgcrypto.\n\nWith pgcrypto installed, it's possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('a_secure_password',\ngen_salt('md5')));"
          },
          "code": "control \"V-73003\" do\n  title \"PostgreSQL must implement cryptographic mechanisms to prevent unauthorized\nmodification of organization-defined information at rest (to include, at a minimum,\nPII and classified information) on organization-defined information system\ncomponents.\"\n  desc  \"PostgreSQLs handling data requiring \\\"data at rest\\\" protections must\nemploy cryptographic mechanisms to prevent unauthorized disclosure and modification\nof the information at rest. These cryptographic mechanisms may be native to\nPostgreSQL or implemented via additional software or operating system/file system\nsettings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity\nof organizational information. The strength of the mechanism is commensurate with\nthe security category and/or classification of the information. Organizations have\nthe flexibility to either encrypt all information on storage devices (i.e., full\ndisk encryption) or encrypt specific data structures (e.g., files, records, or\nfields).\n\nThe decision whether and what to encrypt rests with the data owner and is also\ninfluenced by the physical measures taken to secure the equipment and media on which\nthe information resides.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000428-DB-000386\"\n  tag \"gid\": \"V-73003\"\n  tag \"rid\": \"SV-87655r1_rule\"\n  tag \"stig_id\": \"PGS9-00-008700\"\n  tag \"cci\": \"CCI-002475\"\n  tag \"nist\": [\"SC-28 (1)\", \"Rev_4\"]\n\n  tag \"check\": \"Review the system documentation to determine whether the\norganization has defined the information at rest that is to be protected from\nmodification, which must include, at a minimum, PII and classified information.\n\nIf no information is identified as requiring such protection, this is not a finding.\n\nReview the configuration of PostgreSQL, operating system/file system, and additional\nsoftware as relevant.\n\nIf any of the information defined as requiring cryptographic protection from\nmodification is not encrypted in a manner that provides the required level of\nprotection, this is a finding.\n\nOne possible way to encrypt data within PostgreSQL is to use pgcrypto extension.\n\nTo check if pgcrypto is installed on PostgreSQL, as a database administrator (shown\nhere as \\\"postgres\\\"), run the following command:\n\n$ sudo su - postgres\n$ psql -c \\\"SELECT * FROM pg_available_extensions where name='pgcrypto'\\\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a\nfinding.\n\nIf disk or filesystem requires encryption, ask the system owner, DBA, and SA to\ndemonstrate filesystem or disk level encryption.\n\nIf this is required and is not found, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL, operating system/file system, and additional\nsoftware as relevant, to provide the required level of cryptographic protection.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See\nsupplementary content APPENDIX-E for documentation on installing pgcrypto.\n\nWith pgcrypto installed, it's possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('a_secure_password',\ngen_salt('md5')));\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query(\"SELECT name FROM pg_available_extensions where name='pgcrypto';\", [PG_DB]) do\n    its('output') { should eq 'pgcrypto' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73003.rb",
            "line": 45
          },
          "id": "V-73003",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SELECT name FROM pg_available_extensions where name='pgcrypto'; output should eq \"pgcrypto\"",
              "run_time": 0.000407628,
              "start_time": "2017-06-30 21:54:52 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  delete security objects occur.",
          "desc": "The removal of security objects from the database/PostgreSQL would\n  seriously degrade a system's information assurance posture. If such an action\n  is attempted, it must be logged.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000501-DB-000337",
            "gid": "V-72963",
            "rid": "SV-87615r1_rule",
            "stig_id": "PGS9-00-006300",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator, verify pgaudit is enabled by running the\n  following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Configure PostgreSQL to produce audit records when unsuccessful attempts to\n  delete security objects occur.\n  All errors and denials are logged if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72963\" do\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\n  delete security objects occur.\"\n  desc  \"The removal of security objects from the database/PostgreSQL would\n  seriously degrade a system's information assurance posture. If such an action\n  is attempted, it must be logged.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000501-DB-000337\"\n  tag \"gid\": \"V-72963\"\n  tag \"rid\": \"SV-87615r1_rule\"\n  tag \"stig_id\": \"PGS9-00-006300\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator, verify pgaudit is enabled by running the\n  following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \\\"SHOW pgaudit.log\\\"\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Configure PostgreSQL to produce audit records when unsuccessful attempts to\n  delete security objects occur.\n  All errors and denials are logged if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'ddl' }\n    its('output') { should include 'read' }\n    its('output') { should include 'role' }\n    its('output') { should include 'write' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72963.rb",
            "line": 46
          },
          "id": "V-72963",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000439245,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
              "run_time": 0.00011812,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
              "run_time": 9.2322e-05,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 9.0281e-05,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 8.9362e-05,
              "start_time": "2017-06-30 21:54:52 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  add privileges/permissions occur.",
          "desc": "Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n  In an SQL environment, adding permissions is typically done via the GRANT\n  command, or, in the negative, the REVOKE command.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000495-DB-000327",
            "gid": "V-72977",
            "rid": "SV-87629r1_rule",
            "stig_id": "PGS9-00-006900",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator (shown here as\n  \"postgres\"), create a role 'bob' and a test table by running the following\n  SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob; CREATE TABLE test(id INT)\"\n  Next, set current role to bob and attempt to modify privileges:\n  $ psql -c \"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\"\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  unsuccessful attempt was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  2016-07-14 18:12:23.208 EDT postgres postgres ERROR: permission denied for\n  relation test\n  2016-07-14 18:12:23.208 EDT postgres postgres STATEMENT: GRANT ALL PRIVILEGES\n  ON test TO bob;\n  If audit logs are not generated when unsuccessful attempts to add\n  privileges/permissions occur, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to add privileges occur.\n  All denials are logged by default if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging."
          },
          "code": "control \"V-72977\" do\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\n  add privileges/permissions occur.\"\n  desc  \"Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n  In an SQL environment, adding permissions is typically done via the GRANT\n  command, or, in the negative, the REVOKE command.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000495-DB-000327\"\n  tag \"gid\": \"V-72977\"\n  tag \"rid\": \"SV-87629r1_rule\"\n  tag \"stig_id\": \"PGS9-00-006900\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator (shown here as\n  \\\"postgres\\\"), create a role 'bob' and a test table by running the following\n  SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE ROLE bob; CREATE TABLE test(id INT)\\\"\n  Next, set current role to bob and attempt to modify privileges:\n  $ psql -c \\\"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\\\"\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\n  unsuccessful attempt was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  2016-07-14 18:12:23.208 EDT postgres postgres ERROR: permission denied for\n  relation test\n  2016-07-14 18:12:23.208 EDT postgres postgres STATEMENT: GRANT ALL PRIVILEGES\n  ON test TO bob;\n  If audit logs are not generated when unsuccessful attempts to add\n  privileges/permissions occur, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to add privileges occur.\n  All denials are logged by default if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging.\"\n\n  setup = 'CREATE ROLE bob; CREATE TABLE test(id INT);'\n  set_role = 'SET ROLE bob;'\n  teardown = 'DROP TABLE test; DROP ROLE bob;'\n\n  grant = \"#{set_role} GRANT ALL PRIVILEGES ON test TO bob;\"\n  error = 'permission denied for relation test'\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  sql.query(setup, [PG_DB])\n  sql.query(grant, [PG_DB])\n  sql.query(teardown, [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(error)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(grant)}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72977.rb",
            "line": 46
          },
          "id": "V-72977",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ test/",
              "run_time": 0.004526974,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ GRANT\\ ALL\\ PRIVILEGES\\ ON\\ test\\ TO\\ bob;/",
              "run_time": 0.005719873,
              "start_time": "2017-06-30 21:54:52 +0000"
            }
          ]
        },
        {
          "title": "Database software, including PostgreSQL configuration files, must be\n  stored in dedicated directories separate from the host OS and other\n  applications.",
          "desc": "Once released as BOSH package software libraries can not be changed.\n        Any changes to the software libriaries can ONLY be done by creating and\n        deploying a new BOSH release. This is Software-Defined-Infrastructure",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000133-DB-000199",
            "gid": "V-72901",
            "rid": "SV-87553r1_rule",
            "stig_id": "PGS9-00-003300",
            "cci": "CCI-001499",
            "nist": [
              "CM-5 (6)",
              "Rev_4"
            ],
            "check": "Review the PostgreSQL software library directory and any\n  subdirectories.\n  If any non-PostgreSQL software directories exist on the disk directory,\n  examine or investigate their use. If any of the directories are used by other\n  applications, including third-party applications that use the PostgreSQL, this\n  is a finding.\n  Only applications that are required for the functioning and administration,\n  not use, of the PostgreSQL should be located in the same disk directory as\n  the PostgreSQL software libraries.\n  If other applications are located in the same directory as PostgreSQL, this\n  is a finding.",
            "fix": "Install all applications on directories separate from the\n  PostgreSQL software library directory. Relocate any directories or reinstall\n  other application software that currently shares the PostgreSQL software\n  library directory."
          },
          "code": "control \"V-72901\" do\n  title \"Database software, including PostgreSQL configuration files, must be\n  stored in dedicated directories separate from the host OS and other\n  applications.\"\n  desc  \"When dealing with change control issues, it should be noted, any\n  changes to the hardware, software, and/or firmware components of the\n  information system and/or application can potentially have significant effects\n  on the overall security of the system.\n  Multiple applications can provide a cumulative negative effect. A\n  vulnerability and subsequent exploit to one application can lead to an exploit\n  of other applications sharing the same security context. For example, an\n  exploit to a web server process that leads to unauthorized administrative\n  access to host system directories can most likely lead to a compromise of all\n  applications hosted by the same system. Database software not installed using\n  dedicated directories both threatens and is threatened by other hosted\n  applications. Access controls defined for one application may by default\n  provide access to the other application's database objects or directories. Any\n  method that provides any level of separation of security context assists in\n  the protection between applications.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000133-DB-000199\"\n  tag \"gid\": \"V-72901\"\n  tag \"rid\": \"SV-87553r1_rule\"\n  tag \"stig_id\": \"PGS9-00-003300\"\n  tag \"cci\": \"CCI-001499\"\n  tag \"nist\": [\"CM-5 (6)\", \"Rev_4\"]\n  tag \"check\": \"Review the PostgreSQL software library directory and any\n  subdirectories.\n  If any non-PostgreSQL software directories exist on the disk directory,\n  examine or investigate their use. If any of the directories are used by other\n  applications, including third-party applications that use the PostgreSQL, this\n  is a finding.\n  Only applications that are required for the functioning and administration,\n  not use, of the PostgreSQL should be located in the same disk directory as\n  the PostgreSQL software libraries.\n  If other applications are located in the same directory as PostgreSQL, this\n  is a finding.\"\n  tag \"fix\": \"Install all applications on directories separate from the\n  PostgreSQL software library directory. Relocate any directories or reinstall\n  other application software that currently shares the PostgreSQL software\n  library directory.\"\n\n  PG_SHARED_LIBS.each do |dir|\n    describe directory(dir) do\n      it { should be_owned_by 'root' }\n      it { should be_grouped_into 'root' }\n      its('mode') { should cmp '0755' }\n    end\n\n    describe command(\"lsof | awk '$9 ~ \\\"#{dir}\\\" {print $1}'\") do\n      its('stdout') { should match /(^$|postgres|postmaster)/ }\n      its('stderr') { should eq '' }\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72901.rb",
            "line": 39
          },
          "id": "V-72901",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/bin should be owned by \"root\"",
              "run_time": 0.000294481,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/bin should be grouped into \"root\"",
              "run_time": 0.000410406,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/bin mode should cmp == \"0755\"",
              "run_time": 0.000580975,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command lsof | awk '$9 ~ \"/usr/lib/postgresql/9.5/bin\" {print $1}' stdout should match /(^$|postgres|postmaster)/",
              "run_time": 0.177334028,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command lsof | awk '$9 ~ \"/usr/lib/postgresql/9.5/bin\" {print $1}' stderr should eq \"\"",
              "run_time": 0.000697236,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/lib should be owned by \"root\"",
              "run_time": 0.002449442,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/lib should be grouped into \"root\"",
              "run_time": 0.000638098,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/lib mode should cmp == \"0755\"",
              "run_time": 0.000530441,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command lsof | awk '$9 ~ \"/usr/lib/postgresql/9.5/lib\" {print $1}' stdout should match /(^$|postgres|postmaster)/",
              "run_time": 0.231351452,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command lsof | awk '$9 ~ \"/usr/lib/postgresql/9.5/lib\" {print $1}' stderr should eq \"\"",
              "run_time": 0.000398788,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/include/postgresql/9.5 should be owned by \"root\"",
              "run_time": 0.00031903,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/include/postgresql/9.5 should be grouped into \"root\"",
              "run_time": 0.000230892,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/include/postgresql/9.5 mode should cmp == \"0755\"",
              "run_time": 0.000188221,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command lsof | awk '$9 ~ \"/usr/include/postgresql/9.5\" {print $1}' stdout should match /(^$|postgres|postmaster)/",
              "run_time": 0.408688821,
              "start_time": "2017-06-30 21:54:52 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command lsof | awk '$9 ~ \"/usr/include/postgresql/9.5\" {print $1}' stderr should eq \"\"",
              "run_time": 0.000176479,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/share/postgresql/9.5 should be owned by \"root\"",
              "run_time": 0.000107204,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/share/postgresql/9.5 should be grouped into \"root\"",
              "run_time": 0.000661824,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/share/postgresql/9.5 mode should cmp == \"0755\"",
              "run_time": 0.005049475,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command lsof | awk '$9 ~ \"/usr/share/postgresql/9.5\" {print $1}' stdout should match /(^$|postgres|postmaster)/",
              "run_time": 0.431437553,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command lsof | awk '$9 ~ \"/usr/share/postgresql/9.5\" {print $1}' stderr should eq \"\"",
              "run_time": 0.000420968,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful accesses to\n  objects occur.",
          "desc": "Without tracking all or selected types of access to all or selected\n  objects (tables, views, procedures, functions, etc.), it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n  SELECT\n  INSERT\n  UPDATE\n  DROP\n  EXECUTE\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000507-DB-000357",
            "gid": "V-72951",
            "rid": "SV-87603r1_rule",
            "stig_id": "PGS9-00-005700",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), create a\n  schema, test_schema, create a table, test_table, within test_schema, and\n  insert a value:\n  $ sudo su - postgres\n  $ psql -c \"CREATE SCHEMA test_schema\"\n  $ psql -c \"CREATE TABLE test_schema.test_table(id INT)\"\n  $ psql -c \"INSERT INTO test_schema.test_table(id) VALUES (0)\"\n  Next, create a role 'bob' and attempt to SELECT, INSERT, UPDATE, and DROP from\n  the test table:\n  $ psql -c \"CREATE ROLE BOB\"\n  $ psql -c \"SELECT * FROM test_schema.test_table\"\n  $ psql -c \"INSERT INTO test_schema.test_table VALUES (0)\"\n  $ psql -c \"UPDATE test_schema.test_table SET id = 1 WHERE id = 0\"\n  $ psql -c \"DROP TABLE test_schema.test_table\"\n  $ psql -c \"DROP SCHEMA test_schema\"\n  Now, as the database administrator (shown here as \"postgres\"), review\n  PostgreSQL/database security and audit settings to verify that audit records\n  are created for unsuccessful attempts at the specified access to the specified\n  objects:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>2016-03-30 17:23:41.254 EDT postgres\n  postgres ERROR: permission denied for schema test_schema at character 15\n  2016-03-30 17:23:41.254 EDT postgres postgres STATEMENT: SELECT *\n  FROM test_schema.test_table;\n  2016-03-30 17:23:53.973 EDT postgres postgres ERROR: permission denied for\n  schema test_schema at character 13\n  2016-03-30 17:23:53.973 EDT postgres postgres STATEMENT: INSERT INTO\n  test_schema.test_table VALUES (0);\n2016-03-30 17:24:32.647 EDT postgres\n  postgres ERROR: permission denied for schema test_schema at character 8\n  2016-03-30 17:24:32.647 EDT postgres postgres STATEMENT:\n  UPDATE test_schema.test_table SET id = 1 WHERE id = 0;\n  2016-03-30 17:24:46.197 EDT postgres postgres ERROR: permission denied for\n  schema test_schema\n  2016-03-30 17:24:46.197 EDT postgres postgres STATEMENT: DROP\n  TABLE test_schema.test_table;\n  2016-03-30 17:24:51.582 EDT postgres postgres ERROR: must be owner of schema\n  test_schema\n  2016-03-30 17:24:51.582 EDT postgres postgres STATEMENT: DROP SCHEMA\n  test_schema;\n  If any of the above steps did not create audit records for SELECT, INSERT,\n  UPDATE, and DROP, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access objects occur.\n  All errors and denials are logged if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging."
          },
          "code": "control \"V-72951\" do\n  title \"PostgreSQL must generate audit records when unsuccessful accesses to\n  objects occur.\"\n  desc  \"Without tracking all or selected types of access to all or selected\n  objects (tables, views, procedures, functions, etc.), it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n  SELECT\n  INSERT\n  UPDATE\n  DROP\n  EXECUTE\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000507-DB-000357\"\n  tag \"gid\": \"V-72951\"\n  tag \"rid\": \"SV-87603r1_rule\"\n  tag \"stig_id\": \"PGS9-00-005700\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \\\"postgres\\\"), create a\n  schema, test_schema, create a table, test_table, within test_schema, and\n  insert a value:\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE SCHEMA test_schema\\\"\n  $ psql -c \\\"CREATE TABLE test_schema.test_table(id INT)\\\"\n  $ psql -c \\\"INSERT INTO test_schema.test_table(id) VALUES (0)\\\"\n  Next, create a role 'bob' and attempt to SELECT, INSERT, UPDATE, and DROP from\n  the test table:\n  $ psql -c \\\"CREATE ROLE BOB\\\"\n  $ psql -c \\\"SELECT * FROM test_schema.test_table\\\"\n  $ psql -c \\\"INSERT INTO test_schema.test_table VALUES (0)\\\"\n  $ psql -c \\\"UPDATE test_schema.test_table SET id = 1 WHERE id = 0\\\"\n  $ psql -c \\\"DROP TABLE test_schema.test_table\\\"\n  $ psql -c \\\"DROP SCHEMA test_schema\\\"\n  Now, as the database administrator (shown here as \\\"postgres\\\"), review\n  PostgreSQL/database security and audit settings to verify that audit records\n  are created for unsuccessful attempts at the specified access to the specified\n  objects:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>2016-03-30 17:23:41.254 EDT postgres\n  postgres ERROR: permission denied for schema test_schema at character 15\n  2016-03-30 17:23:41.254 EDT postgres postgres STATEMENT: SELECT *\n  FROM test_schema.test_table;\n  2016-03-30 17:23:53.973 EDT postgres postgres ERROR: permission denied for\n  schema test_schema at character 13\n  2016-03-30 17:23:53.973 EDT postgres postgres STATEMENT: INSERT INTO\n  test_schema.test_table VALUES (0);\n2016-03-30 17:24:32.647 EDT postgres\n  postgres ERROR: permission denied for schema test_schema at character 8\n  2016-03-30 17:24:32.647 EDT postgres postgres STATEMENT:\n  UPDATE test_schema.test_table SET id = 1 WHERE id = 0;\n  2016-03-30 17:24:46.197 EDT postgres postgres ERROR: permission denied for\n  schema test_schema\n  2016-03-30 17:24:46.197 EDT postgres postgres STATEMENT: DROP\n  TABLE test_schema.test_table;\n  2016-03-30 17:24:51.582 EDT postgres postgres ERROR: must be owner of schema\n  test_schema\n  2016-03-30 17:24:51.582 EDT postgres postgres STATEMENT: DROP SCHEMA\n  test_schema;\n  If any of the above steps did not create audit records for SELECT, INSERT,\n  UPDATE, and DROP, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access objects occur.\n  All errors and denials are logged if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging.\"\n\n  create_schema = 'CREATE SCHEMA test_schema;' \n  create_table = 'CREATE TABLE test_schema.test_table(id INT);'\n  insert = 'INSERT INTO test_schema.test_table(id) VALUES (0);'\n  create_role = 'CREATE ROLE bob;'\n  set_role = 'SET ROLE bob;'\n  drop_role = 'DROP ROLE bob;'\n\n  role_select = \"#{set_role} SELECT * FROM test_schema.test_table;\"\n  role_insert = \"#{set_role} INSERT INTO test_schema.test_table VALUES (0);\"\n  role_update = \"#{set_role} UPDATE test_schema.test_table SET id = 1 WHERE id = 0\"\n  drop_table = 'DROP TABLE test_schema.test_table;'\n  role_drop_table = \"#{set_role} #{drop_table}\"\n  drop_schema = 'DROP SCHEMA test_schema;'\n  role_drop_schema = \"#{set_role} #{drop_schema}\"\n\n  permission_denied = 'permission denied for schema test_schema'\n  must_be_owner = 'must be owner of schema test_schema'\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  sql.query(create_schema, [PG_DB])\n  sql.query(create_table, [PG_DB])\n  sql.query(insert, [PG_DB])\n  sql.query(create_role, [PG_DB])\n  sql.query(role_select, [PG_DB])\n  sql.query(role_insert, [PG_DB])\n  sql.query(role_update, [PG_DB])\n  sql.query(role_drop_table, [PG_DB])\n  sql.query(role_drop_schema, [PG_DB])\n  sql.query(drop_table, [PG_DB])\n  sql.query(drop_schema, [PG_DB])\n  sql.query(drop_role, [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(permission_denied)}/ }\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(must_be_owner)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(role_select)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(role_insert)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(role_update)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(role_drop_table)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(role_drop_schema)}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72951.rb",
            "line": 46
          },
          "id": "V-72951",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ schema\\ test_schema/",
              "run_time": 0.006950553,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*must\\ be\\ owner\\ of\\ schema\\ test_schema/",
              "run_time": 0.006689262,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ SELECT\\ \\*\\ FROM\\ test_schema\\.test_table;/",
              "run_time": 0.006359062,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ INSERT\\ INTO\\ test_schema\\.test_table\\ VALUES\\ \\(0\\);/",
              "run_time": 0.011102447,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ UPDATE\\ test_schema\\.test_table\\ SET\\ id\\ =\\ 1\\ WHERE\\ id\\ =\\ 0/",
              "run_time": 0.016785455,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ DROP\\ TABLE\\ test_schema\\.test_table;/",
              "run_time": 0.021501939,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ DROP\\ SCHEMA\\ test_schema;/",
              "run_time": 0.012782568,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must enforce access restrictions associated with changes to the\nconfiguration of PostgreSQL or database(s).",
          "desc": "Failure to provide logical access restrictions associated with changes to\nconfiguration may have significant effects on the overall security of the system.\n\nWhen dealing with access restrictions pertaining to change control, it should be\nnoted that any changes to the hardware, software, and/or firmware components of the\ninformation system can potentially have significant effects on the overall security\nof the system.\n\nAccordingly, only qualified and authorized individuals should be allowed to obtain\naccess to system components for the purposes of initiating changes, including\nupgrades and modifications.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000380-DB-000360",
            "gid": "V-73017",
            "rid": "SV-87669r1_rule",
            "stig_id": "PGS9-00-009600",
            "cci": "CCI-001813",
            "nist": [
              "CM-5 (1)",
              "Rev_4"
            ],
            "check": "To list all the permissions of individual roles, as the database\nadministrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"\\du\n\nIf any role has SUPERUSER that should not, this is a finding.\n\nNext, list all the permissions of databases and schemas by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"\\l\"\n$ psql -c \"\\dn+\"\n\nIf any database or schema has update (\"W\") or create (\"C\") privileges and should\nnot, this is a finding.",
            "fix": "Configure PostgreSQL to enforce access restrictions associated with\nchanges to the configuration of PostgreSQL or database(s).\n\nUse ALTER ROLE to remove accesses from roles:\n\n$ psql -c \"ALTER ROLE <role_name> NOSUPERUSER\"\n\nUse REVOKE to remove privileges from databases and schemas:\n\n$ psql -c \"REVOKE ALL PRIVILEGES ON <table> FROM <role_name>;"
          },
          "code": "control \"V-73017\" do\n  title \"PostgreSQL must enforce access restrictions associated with changes to the\nconfiguration of PostgreSQL or database(s).\"\n  desc  \"Failure to provide logical access restrictions associated with changes to\nconfiguration may have significant effects on the overall security of the system.\n\nWhen dealing with access restrictions pertaining to change control, it should be\nnoted that any changes to the hardware, software, and/or firmware components of the\ninformation system can potentially have significant effects on the overall security\nof the system.\n\nAccordingly, only qualified and authorized individuals should be allowed to obtain\naccess to system components for the purposes of initiating changes, including\nupgrades and modifications.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000380-DB-000360\"\n  tag \"gid\": \"V-73017\"\n  tag \"rid\": \"SV-87669r1_rule\"\n  tag \"stig_id\": \"PGS9-00-009600\"\n  tag \"cci\": \"CCI-001813\"\n  tag \"nist\": [\"CM-5 (1)\", \"Rev_4\"]\n  tag \"check\": \"To list all the permissions of individual roles, as the database\nadministrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"\\\\du\n\nIf any role has SUPERUSER that should not, this is a finding.\n\nNext, list all the permissions of databases and schemas by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"\\\\l\\\"\n$ psql -c \\\"\\\\dn+\\\"\n\nIf any database or schema has update (\\\"W\\\") or create (\\\"C\\\") privileges and should\nnot, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to enforce access restrictions associated with\nchanges to the configuration of PostgreSQL or database(s).\n\nUse ALTER ROLE to remove accesses from roles:\n\n$ psql -c \\\"ALTER ROLE <role_name> NOSUPERUSER\\\"\n\nUse REVOKE to remove privileges from databases and schemas:\n\n$ psql -c \\\"REVOKE ALL PRIVILEGES ON <table> FROM <role_name>;\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  sql.query('\\du', [PG_DB]).output.split(\"\\n\").each do |row|\n    role, attributes, member_of = row.split('|')\n    unless PG_SUPERUSERS.include?(role)\n      describe attributes do\n        it { should_not match /Superuser/ }\n      end\n    end\n  end\n\n  sql.query('SELECT datname, datacl FROM pg_catalog.pg_database;', [PG_DB]).output.split(\"\\n\").each do |row|\n    database, acls = row.split('|')\n    unless acls.nil?\n      describe acls do\n        it { should_not match /\\{=[CTc]{2,}\\/\\w+/ }\n      end\n      acls.split(',').each do |acl|\n        describe acl do\n          it { should match /\\{?((#{PG_OBJECT_OWNERS.join('|')})=[CTc]+|=c)\\/\\w+\\}?/ }\n        end\n      end\n    end\n    rows = sql.query('\\dn+', [database])\n    if rows.methods.include?(:output) # Handle connection disabled on database\n      rows.output.split(\"\\n\").each do |row|\n        describe row do\n          it { should_not match %r{(^|\\|)\\s*=[UC]+/\\w+} }\n        end\n        columns = row.split('|')\n        acl = ''\n        if columns.length < 2\n          acl = columns[0]\n        else\n          acl = columns[2]\n        end\n        unless acl.nil?\n          describe acl do\n            it { should match %r{^\\s*(#{PG_OBJECT_OWNERS.join('|')})\\w*=[UC]+/\\w+} }\n          end\n        end\n      end\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73017.rb",
            "line": 63
          },
          "id": "V-73017",
          "results": [
            {
              "status": "passed",
              "code_desc": "Cannot login should not match /Superuser/",
              "run_time": 0.000320476,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Create role, Create DB, Cannot login should not match /Superuser/",
              "run_time": 0.001021165,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Replication should not match /Superuser/",
              "run_time": 0.001063878,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "{=c/vcap,vcap=CTc/vcap} should not match /\\{=[CTc]{2,}\\/\\w+/",
              "run_time": 0.000447459,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "{=c/vcap should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
              "run_time": 0.00110505,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=CTc/vcap} should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
              "run_time": 0.000359659,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.00026512,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.00045523,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "crunchy=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000422857,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000290145,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.00030307,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "failed",
              "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.001279723,
              "start_time": "2017-06-30 21:54:53 +0000",
              "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
            },
            {
              "status": "passed",
              "code_desc": "broker|crunchy|crunchy=UC/crunchy| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.00014068,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "crunchy=UC/crunchy should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 6.3152e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000253779,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.000365571,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "failed",
              "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 5.2e-08,
              "start_time": "2017-06-30 21:54:53 +0000",
              "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
            },
            {
              "status": "passed",
              "code_desc": "{vcap=CTc/vcap,crunchy=CTc/vcap} should not match /\\{=[CTc]{2,}\\/\\w+/",
              "run_time": 0.000177728,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "{vcap=CTc/vcap should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
              "run_time": 0.00053036,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "crunchy=CTc/vcap} should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
              "run_time": 0.000534664,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.00024879,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.000245116,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "failed",
              "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000636442,
              "start_time": "2017-06-30 21:54:53 +0000",
              "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
            },
            {
              "status": "passed",
              "code_desc": "{vcap=CTc/vcap,crunchy=c/vcap} should not match /\\{=[CTc]{2,}\\/\\w+/",
              "run_time": 0.000262846,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "{vcap=CTc/vcap should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
              "run_time": 0.000165154,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "crunchy=c/vcap} should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
              "run_time": 0.000146064,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000211691,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.000357021,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "failed",
              "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.001167641,
              "start_time": "2017-06-30 21:54:53 +0000",
              "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
            },
            {
              "status": "passed",
              "code_desc": "{jesse=CTc/jesse} should not match /\\{=[CTc]{2,}\\/\\w+/",
              "run_time": 0.000217811,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "{jesse=CTc/jesse} should match /\\{?((jesse|vcap|crunchy|replication)=[CTc]+|=c)\\/\\w+\\}?/",
              "run_time": 0.000616585,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000214692,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.000335556,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "failed",
              "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.001072563,
              "start_time": "2017-06-30 21:54:53 +0000",
              "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
            },
            {
              "status": "passed",
              "code_desc": "tiger|vcap|| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000219604,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger_data|vcap|| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000225012,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "topology|vcap|| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000193307,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must produce audit records containing sufficient information\n  to establish where the events occurred.",
          "desc": "Information system auditing capability is critical for accurate forensic\n  analysis. Without establishing where events occurred, it is impossible to\n  establish, correlate, and investigate the events relating to an incident.\n  In order to compile an accurate risk assessment and provide forensic analysis,\n  it is essential for security personnel to know where events occurred, such as\n  application components, modules, session identifiers, filenames, host names,\n  and functionality.\n  Associating information about where the event occurred within the application\n  provides a means of investigating an attack; recognizing resource utilization\n  or capacity thresholds; or identifying an improperly configured application.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000097-DB-000041",
            "gid": "V-73123",
            "rid": "SV-87775r1_rule",
            "stig_id": "PGS9-00-007100",
            "cci": "CCI-000132",
            "nist": [
              "AU-3",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment variable.\n  See supplementary content APPENDIX-F for instructions on configuring PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), check the\n  current log_line_prefix setting by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_line_prefix\"\n\n  If log_line_prefix does not contain %m %u %d %s, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\n  See supplementary content APPENDIX-F for instructions on configuring PGDATA.\n  To check that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  First edit the postgresql.conf file as the database administrator (shown here\n  as \"postgres\"):\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n\n  Extra parameters can be added to the setting log_line_prefix to log application\n  related information:\n\n  # %a = application name\n  # %u = user name\n  # %d = database name\n  # %r = remote host and port\n  # %p = process ID\n  # %m = timestamp with milliseconds\n  # %i = command tag\n  # %s = session startup\n  # %e = SQL state\n\n  For example:\n  log_line_prefix = '<%m %a %u %d %r %p %i %e %s>’\n\n  Now, as the system administrator, reload the server with the new configuration:\n\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-73123\" do\n  title \"PostgreSQL must produce audit records containing sufficient information\n  to establish where the events occurred.\"\n  desc  \"Information system auditing capability is critical for accurate forensic\n  analysis. Without establishing where events occurred, it is impossible to\n  establish, correlate, and investigate the events relating to an incident.\n  In order to compile an accurate risk assessment and provide forensic analysis,\n  it is essential for security personnel to know where events occurred, such as\n  application components, modules, session identifiers, filenames, host names,\n  and functionality.\n  Associating information about where the event occurred within the application\n  provides a means of investigating an attack; recognizing resource utilization\n  or capacity thresholds; or identifying an improperly configured application.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n\n  tag \"gtitle\": \"SRG-APP-000097-DB-000041\"\n  tag \"gid\": \"V-73123\"\n  tag \"rid\": \"SV-87775r1_rule\"\n  tag \"stig_id\": \"PGS9-00-007100\"\n  tag \"cci\": \"CCI-000132\"\n  tag \"nist\": [\"AU-3\", \"Rev_4\"]\n\n  tag \"check\": \"Note: The following instructions use the PGDATA environment variable.\n  See supplementary content APPENDIX-F for instructions on configuring PGDATA.\n  First, as the database administrator (shown here as \\\"postgres\\\"), check the\n  current log_line_prefix setting by running the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW log_line_prefix\\\"\n\n  If log_line_prefix does not contain %m %u %d %s, this is a finding.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\n  See supplementary content APPENDIX-F for instructions on configuring PGDATA.\n  To check that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  First edit the postgresql.conf file as the database administrator (shown here\n  as \\\"postgres\\\"):\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n\n  Extra parameters can be added to the setting log_line_prefix to log application\n  related information:\n\n  # %a = application name\n  # %u = user name\n  # %d = database name\n  # %r = remote host and port\n  # %p = process ID\n  # %m = timestamp with milliseconds\n  # %i = command tag\n  # %s = session startup\n  # %e = SQL state\n\n  For example:\n  log_line_prefix = '<%m %a %u %d %r %p %i %e %s>’\n\n  Now, as the system administrator, reload the server with the new configuration:\n\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW log_line_prefix;', [PG_DB]) do\n    its('output') { should include '%m' }\n    its('output') { should include '%u' }\n    its('output') { should include '%d' }\n    its('output') { should include '%s' }\n  end\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73123.rb",
            "line": 104
          },
          "id": "V-73123",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%m\"",
              "run_time": 0.000286584,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%u\"",
              "run_time": 0.000491295,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%d\"",
              "run_time": 0.000191639,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%s\"",
              "run_time": 0.00033653,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when categorized information\n  (e.g., classification levels/security levels) is modified.",
          "desc": "Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000498-DB-000346",
            "gid": "V-72973",
            "rid": "SV-87625r1_rule",
            "stig_id": "PGS9-00-006700",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "If category tracking is not required in the database, this is\n  not applicable.\n  First, as the database administrator, verify pgaudit is enabled by running the\n  following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring P\n  GDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "  control \"V-72973\" do\n  title \"PostgreSQL must generate audit records when categorized information\n  (e.g., classification levels/security levels) is modified.\"\n  desc  \"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000498-DB-000346\"\n  tag \"gid\": \"V-72973\"\n  tag \"rid\": \"SV-87625r1_rule\"\n  tag \"stig_id\": \"PGS9-00-006700\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"If category tracking is not required in the database, this is\n  not applicable.\n  First, as the database administrator, verify pgaudit is enabled by running the\n  following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \\\"SHOW pgaudit.log\\\"\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring P\n  GDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'ddl' }\n    its('output') { should include 'read' }\n    its('output') { should include 'role' }\n    its('output') { should include 'write' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72973.rb",
            "line": 45
          },
          "id": "V-72973",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000293619,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
              "run_time": 0.000186894,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
              "run_time": 0.000123691,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 0.000101538,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 9.1844e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  retrieve privileges/permissions occur.",
          "desc": "Under some circumstances, it may be useful to monitor who/what is\n  reading privilege/permission/role information. Therefore, it must be possible\n  to configure auditing to do this. PostgreSQLs typically make such information\n  available through views or functions.\n  This requirement addresses explicit requests for privilege/permission/role\n  membership information. It does not refer to the implicit retrieval of\n  privileges/permissions/role memberships that PostgreSQL continually performs\n  to determine if any and every action on the database is permitted.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000091-DB-000325",
            "gid": "V-72941",
            "rid": "SV-87593r1_rule",
            "stig_id": "PGS9-00-005300",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), create a\n  role 'bob' by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob\"\n  Next, attempt to retrieve information from the pg_authid table:\n  $ psql -c \"SET ROLE bob; SELECT * FROM pg_authid\"\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  event was logged in pg_log:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-07-13 16:49:58.864 EDT postgres postgres ERROR: > permission denied for\n  relation pg_authid\n  < 2016-07-13 16:49:58.864 EDT postgres postgres STATEMENT: >\n  SELECT * FROM pg_authid;\n  If the above steps cannot verify that audit records are produced when\n  PostgreSQL denies retrieval of privileges/permissions/role memberships, this\n  is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access privileges occur.\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging."
          },
          "code": "control \"V-72941\" do\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\n  retrieve privileges/permissions occur.\"\n  desc  \"Under some circumstances, it may be useful to monitor who/what is\n  reading privilege/permission/role information. Therefore, it must be possible\n  to configure auditing to do this. PostgreSQLs typically make such information\n  available through views or functions.\n  This requirement addresses explicit requests for privilege/permission/role\n  membership information. It does not refer to the implicit retrieval of\n  privileges/permissions/role memberships that PostgreSQL continually performs\n  to determine if any and every action on the database is permitted.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000091-DB-000325\"\n  tag \"gid\": \"V-72941\"\n  tag \"rid\": \"SV-87593r1_rule\"\n  tag \"stig_id\": \"PGS9-00-005300\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \\\"postgres\\\"), create a\n  role 'bob' by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE ROLE bob\\\"\n  Next, attempt to retrieve information from the pg_authid table:\n  $ psql -c \\\"SET ROLE bob; SELECT * FROM pg_authid\\\"\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\n  event was logged in pg_log:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-07-13 16:49:58.864 EDT postgres postgres ERROR: > permission denied for\n  relation pg_authid\n  < 2016-07-13 16:49:58.864 EDT postgres postgres STATEMENT: >\n  SELECT * FROM pg_authid;\n  If the above steps cannot verify that audit records are produced when\n  PostgreSQL denies retrieval of privileges/permissions/role memberships, this\n  is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access privileges occur.\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging.\"\n\n  create_role =  'CREATE ROLE bob;' \n  drop_role =  'DROP ROLE bob;'\n\n  command = 'SET ROLE bob; SELECT * FROM pg_authid;'\n  error = 'permission denied for relation pg_authid'\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  sql.query(create_role, [PG_DB])\n  sql.query(command, [PG_DB])\n  sql.query(drop_role, [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(error)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(command)}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72941.rb",
            "line": 46
          },
          "id": "V-72941",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ pg_authid/",
              "run_time": 0.007569484,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ SELECT\\ \\*\\ FROM\\ pg_authid;/",
              "run_time": 0.010122206,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must integrate with an organization-level\n  authentication/access mechanism providing account management and automation\n  for all users, groups, roles, and any other principals.",
          "desc": "Crunchy DBaaS exclusively utilizes System Accounts which are negotiated\n        through the Service Broker interactions. Crunchy does not maintain any\n        user accounts.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000023-DB-000001",
            "gid": "V-72849",
            "rid": "SV-87501r1_rule",
            "stig_id": "PGS9-00-000500",
            "cci": "CCI-000015",
            "nist": [
              "AC-2 (1)",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  If all accounts are authenticated by the organization-level\n  authentication/access mechanism, such as LDAP or Kerberos and not by\n  PostgreSQL, this is not a finding.  As the database administrator (shown here\n  as \"postgres\"), review pg_hba.conf authentication file settings:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n\n  All records must use an auth-method of gss, sspi, or ldap. For details on the\n  specifics of these authentication methods see:\n  http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html\n\n  If there are any records with a different auth-method than gss, sspi, or ldap,\n  review the system documentation for justification and approval of these records.\n  If there are any records with a different auth-method than gss, sspi, or ldap,\n  that are not documented and approved, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  Integrate PostgreSQL security with an organization-level\n  authentication/access mechanism providing account management for all users,\n  groups, roles, and any other principals.  As the database administrator (shown\n  here as \"postgres\"), edit pg_hba.conf authentication file:\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n\n  For each PostgreSQL-managed account that is not documented and approved,\n  either transfer it to management by the external mechanism, or document the\n  need for it and obtain approval, as appropriate."
          },
          "code": "control \"V-72849\" do\n  title \"PostgreSQL must integrate with an organization-level\n  authentication/access mechanism providing account management and automation\n  for all users, groups, roles, and any other principals.\"\n  desc  \"Enterprise environments make account management for applications and\n  databases challenging and complex. A manual process for account management\n  functions adds the risk of a potential oversight or other error. Managing\n  accounts for the same person in multiple places is inefficient and prone to\n  problems with consistency and synchronization.  A comprehensive application\n  account management process that includes automation helps to ensure that\n  accounts designated as requiring attention are consistently and promptly\n  addressed. Examples include, but are not limited to, using automation to take\n  action on multiple accounts designated as inactive, suspended, or terminated,\n  or by disabling accounts located in non-centralized account stores, such as\n  multiple servers. Account management functions can also include: assignment of\n  group or role membership; identifying account type; specifying user access\n  authorizations (i.e., privileges); account removal, update, or termination;\n  and administrative alerts. The use of automated mechanisms can include, for\n  example: using email or text messaging to notify account managers when users\n  are terminated or transferred; using the information system to monitor account\n  usage; and using automated telephone notification to report atypical system\n  account usage.  PostgreSQL must be configured to automatically utilize\n  organization-level account management functions, and these functions must\n  immediately enforce the organization's current account policy. Automation may\n  be comprised of differing technologies that when placed together contain an\n  overall mechanism supporting an organization's automated account management\n  requirements.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000023-DB-000001\"\n  tag \"gid\": \"V-72849\"\n  tag \"rid\": \"SV-87501r1_rule\"\n  tag \"stig_id\": \"PGS9-00-000500\"\n  tag \"cci\": \"CCI-000015\"\n  tag \"nist\": [\"AC-2 (1)\", \"Rev_4\"]\n\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  If all accounts are authenticated by the organization-level\n  authentication/access mechanism, such as LDAP or Kerberos and not by\n  PostgreSQL, this is not a finding.  As the database administrator (shown here\n  as \\\"postgres\\\"), review pg_hba.conf authentication file settings:\n\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n\n  All records must use an auth-method of gss, sspi, or ldap. For details on the\n  specifics of these authentication methods see:\n  http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html\n\n  If there are any records with a different auth-method than gss, sspi, or ldap,\n  review the system documentation for justification and approval of these records.\n  If there are any records with a different auth-method than gss, sspi, or ldap,\n  that are not documented and approved, this is a finding.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  Integrate PostgreSQL security with an organization-level\n  authentication/access mechanism providing account management for all users,\n  groups, roles, and any other principals.  As the database administrator (shown\n  here as \\\"postgres\\\"), edit pg_hba.conf authentication file:\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n\n  For each PostgreSQL-managed account that is not documented and approved,\n  either transfer it to management by the external mechanism, or document the\n  need for it and obtain approval, as appropriate.\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72849.rb",
            "line": 23
          },
          "id": "V-72849",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 1.7346e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must check the validity of all data inputs except those\n  specifically identified by the organization.",
          "desc": "Application developers must follow Best Practices when developing Cloud\n        applications. Example: Checking the valid syntax and semantics of\n        information system inputs to ensure that SQL injections are not possible.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000251-DB-000160",
            "gid": "V-72871",
            "rid": "SV-87523r1_rule",
            "stig_id": "PGS9-00-001800",
            "cci": "CCI-001310",
            "nist": [
              "SI-10",
              "Rev_4"
            ],
            "check": "Review PostgreSQL code (trigger procedures, functions),\n  application code, settings, column and field definitions, and constraints to\n  determine whether the database is protected against invalid input.\n  If code exists that allows invalid data to be acted upon or input into the\n  database, this is a finding.\n\n  If column/field definitions do not exist in the database, this is a finding.\n  If columns/fields do not contain constraints and validity checking where\n  required, this is a finding.\n\n  Where a column/field is noted in the system documentation as necessarily\n  free-form, even though its name and context suggest that it should be strongly\n  typed and constrained, the absence of these protections is not a finding.\n  Where a column/field is clearly identified by name, caption or context as\n  Notes, Comments, Description, Text, etc., the absence of these protections is\n  not a finding.\n\n  Check application code that interacts with PostgreSQL for the use of prepared\n  statements. If prepared statements are not used, this is a finding.",
            "fix": "Modify database code to properly validate data before it is put\n  into the database or acted upon by the database.\n\n  Modify the database to contain constraints and validity checking on database\n  columns and tables that require them for data integrity.\n\n  Use prepared statements when taking user input.\n  \n  Do not allow general users direct console access to PostgreSQL."
          },
          "code": "control \"V-72871\" do\n  title \"PostgreSQL must check the validity of all data inputs except those\n  specifically identified by the organization.\"\n  desc  \"Invalid user input occurs when a user inserts data or characters into\n  an application's data entry fields and the application is unprepared to\n  process that data. This results in unanticipated application behavior,\n  potentially leading to an application or information system compromise.\n  Invalid user input is one of the primary methods employed when attempting to\n  compromise an application.\n  With respect to database management systems, one class of threat is known as\n  SQL Injection, or more generally, code injection. It takes advantage of the\n  dynamic execution capabilities of various programming languages, including\n  dialects of SQL. Potentially, the attacker can gain unauthorized access to\n  data, including security settings, and severely corrupt or destroy the database.\n  Even when no such hijacking takes place, invalid input that gets recorded in\n  the database, whether accidental or malicious, reduces the reliability and\n  usability of the system. Available protections include data types, referential\n  constraints, uniqueness constraints, range checking, and application-specific\n  logic. Application-specific logic can be implemented within the database in\n  stored procedures and triggers, where appropriate.\n  This calls for inspection of application source code, which will require\n  collaboration with the application developers. It is recognized that in many\n  cases, the database administrator (DBA) is organizationally separate from the\n  application developers, and may have limited, if any, access to source code.\n  Nevertheless, protections of this type are so important to the secure\n  operation of databases that they must not be ignored. At a minimum, the DBA\n  must attempt to obtain assurances from the development organization that this\n  issue has been addressed, and must document what has been discovered.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000251-DB-000160\"\n  tag \"gid\": \"V-72871\"\n  tag \"rid\": \"SV-87523r1_rule\"\n  tag \"stig_id\": \"PGS9-00-001800\"\n  tag \"cci\": \"CCI-001310\"\n  tag \"nist\": [\"SI-10\", \"Rev_4\"]\n  tag \"check\": \"Review PostgreSQL code (trigger procedures, functions),\n  application code, settings, column and field definitions, and constraints to\n  determine whether the database is protected against invalid input.\n  If code exists that allows invalid data to be acted upon or input into the\n  database, this is a finding.\n\n  If column/field definitions do not exist in the database, this is a finding.\n  If columns/fields do not contain constraints and validity checking where\n  required, this is a finding.\n\n  Where a column/field is noted in the system documentation as necessarily\n  free-form, even though its name and context suggest that it should be strongly\n  typed and constrained, the absence of these protections is not a finding.\n  Where a column/field is clearly identified by name, caption or context as\n  Notes, Comments, Description, Text, etc., the absence of these protections is\n  not a finding.\n\n  Check application code that interacts with PostgreSQL for the use of prepared\n  statements. If prepared statements are not used, this is a finding.\"\n\n  tag \"fix\": \"Modify database code to properly validate data before it is put\n  into the database or acted upon by the database.\n\n  Modify the database to contain constraints and validity checking on database\n  columns and tables that require them for data integrity.\n\n  Use prepared statements when taking user input.\n  \n  Do not allow general users direct console access to PostgreSQL.\"\n\n  only_if { false }\n  \nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72871.rb",
            "line": 23
          },
          "id": "V-72871",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 1.0715e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must isolate security functions from non-security functions.",
          "desc": "An isolation boundary provides access control and protects the integrity\n  of the hardware, software, and firmware that perform security functions.\n  Security functions are the hardware, software, and/or firmware of the\n  information system responsible for enforcing the system security policy and\n  supporting the isolation of code and data on which the protection is based.\n  Developers and implementers can increase the assurance in security functions\n  by employing well-defined security policy models; structured, disciplined, and\n  rigorous hardware and software development techniques; and sound system/security\n  engineering principles.\n  Database Management Systems typically separate security functionality from\n  non-security functionality via separate databases or schemas. Database objects\n  or code implementing security functionality should not be commingled with\n  objects or code implementing application logic. When security and non-security\n  functionality are commingled, users who have access to non-security\n  functionality may be able to access security functionality.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000233-DB-000124",
            "gid": "V-72911",
            "rid": "SV-87563r1_rule",
            "stig_id": "PGS9-00-004000",
            "cci": "CCI-001084",
            "nist": [
              "SC-3",
              "Rev_4"
            ],
            "check": "Check PostgreSQL settings to determine whether objects or code\n  implementing security functionality are located in a separate security domain,\n  such as a separate database or schema created specifically for security\n  functionality.\n  By default, all objects in pg_catalog and information_schema are owned by the\n  database administrator.\n  To check the access controls for those schemas, as the database administrator\n  (shown here as \"postgres\"), run the following commands to review the access\n  privileges granted on the data dictionary and security tables, views,\n  sequences, functions and trigger procedures:\n  $ sudo su - postgres\n  $ psql -x -c \"\\dp pg_catalog.*\"\n  $ psql -x -c \"\\dp information_schema.*\"\n  Repeat the \\dp statements for any additional schemas that contain locally\n  defined security objects.\n\nRepeat using \\df+*.* to review ownership of\n  PostgreSQL functions:\n  $ sudo su - postgres\n  $ psql -x -c \"\\df+ pg_catalog.*\"\n  $ psql -x -c \"\\df+ information_schema.*\"\n  Refer to the PostgreSQL online documentation for GRANT for help in\n  interpreting the Access Privileges column in the output from \\du. Note that\n  an entry starting with an equals sign indicates privileges granted to Public\n  (all users). By default, most of the tables and views in the pg_catalog and\n  information_schema schemas can be read by Public.\n  If any user besides the database administrator(s) is listed in access\n  privileges and not documented, this is a finding.\n  If security-related database objects or code are not kept separate, this is a\n  finding.",
            "fix": "Do not locate security-related database objects with application\n  tables or schema.\n  Review any site-specific applications security modules built into the\n  database: determine what schema they are located in and take appropriate\n  action.\n  Do not grant access to pg_catalog or information_schema to anyone but the\n  database administrator(s). Access to the database administrator account(s)\n  must not be granted to anyone without official approval."
          },
          "code": "control \"V-72911\" do\n  title \"PostgreSQL must isolate security functions from non-security functions.\"\n  desc  \"An isolation boundary provides access control and protects the integrity\n  of the hardware, software, and firmware that perform security functions.\n  Security functions are the hardware, software, and/or firmware of the\n  information system responsible for enforcing the system security policy and\n  supporting the isolation of code and data on which the protection is based.\n  Developers and implementers can increase the assurance in security functions\n  by employing well-defined security policy models; structured, disciplined, and\n  rigorous hardware and software development techniques; and sound system/security\n  engineering principles.\n  Database Management Systems typically separate security functionality from\n  non-security functionality via separate databases or schemas. Database objects\n  or code implementing security functionality should not be commingled with\n  objects or code implementing application logic. When security and non-security\n  functionality are commingled, users who have access to non-security\n  functionality may be able to access security functionality.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000233-DB-000124\"\n  tag \"gid\": \"V-72911\"\n  tag \"rid\": \"SV-87563r1_rule\"\n  tag \"stig_id\": \"PGS9-00-004000\"\n  tag \"cci\": \"CCI-001084\"\n  tag \"nist\": [\"SC-3\", \"Rev_4\"]\n  tag \"check\": \"Check PostgreSQL settings to determine whether objects or code\n  implementing security functionality are located in a separate security domain,\n  such as a separate database or schema created specifically for security\n  functionality.\n  By default, all objects in pg_catalog and information_schema are owned by the\n  database administrator.\n  To check the access controls for those schemas, as the database administrator\n  (shown here as \\\"postgres\\\"), run the following commands to review the access\n  privileges granted on the data dictionary and security tables, views,\n  sequences, functions and trigger procedures:\n  $ sudo su - postgres\n  $ psql -x -c \\\"\\\\dp pg_catalog.*\\\"\n  $ psql -x -c \\\"\\\\dp information_schema.*\\\"\n  Repeat the \\\\dp statements for any additional schemas that contain locally\n  defined security objects.\n\nRepeat using \\\\df+*.* to review ownership of\n  PostgreSQL functions:\n  $ sudo su - postgres\n  $ psql -x -c \\\"\\\\df+ pg_catalog.*\\\"\n  $ psql -x -c \\\"\\\\df+ information_schema.*\\\"\n  Refer to the PostgreSQL online documentation for GRANT for help in\n  interpreting the Access Privileges column in the output from \\\\du. Note that\n  an entry starting with an equals sign indicates privileges granted to Public\n  (all users). By default, most of the tables and views in the pg_catalog and\n  information_schema schemas can be read by Public.\n  If any user besides the database administrator(s) is listed in access\n  privileges and not documented, this is a finding.\n  If security-related database objects or code are not kept separate, this is a\n  finding.\"\n  tag \"fix\": \"Do not locate security-related database objects with application\n  tables or schema.\n  Review any site-specific applications security modules built into the\n  database: determine what schema they are located in and take appropriate\n  action.\n  Do not grant access to pg_catalog or information_schema to anyone but the\n  database administrator(s). Access to the database administrator account(s)\n  must not be granted to anyone without official approval.\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  sql.query('\\dp pg_catalog.*', ['postgres']).output.split(\"\\n\").each do |row|\n    access_privileges = row.split('|')[3]\n    unless access_privileges.nil?\n      describe access_privileges do\n        it { should_not match %r{^\\s*=[arwdDxt]{2,}/\\w+} }\n        it { should match %r{((#{PG_SUPERUSERS.join('|')})=[arwdDxt]+/)|(=r/)} }\n      end\n    end\n  end\n\n  sql.query('\\dp information_schema.*', ['postgres']).output.split(\"\\n\").each do |row|\n    access_privileges = row.split('|')[3]\n    unless access_privileges.nil?\n      describe access_privileges do\n        it { should_not match %r{^\\s*=[arwdDxt]{2,}/\\w+} }\n        it { should match %r{((#{PG_SUPERUSERS.join('|')})=[arwdDxt]+/)|(=r/)} }\n      end\n    end\n  end\n\n  object_owners = []\n\n  sql.query('\\df+ pg_catalog.*', ['postgres']).output.split(\"\\n\").each do |row|\n    columns = row.split('|')\n    if columns.length > 7\n      object_owners.push(columns[7])\n    end\n  end\n\n  sql.query('\\df+ information_schema.*', ['postgres']).output.split(\"\\n\").each do |row|\n    columns = row.split('|')\n    if columns.length > 7\n      object_owners.push(columns[7])\n    end\n  end\n\n  object_owners.uniq.each do |owner|\n    describe owner do\n      it { should match /#{PG_SUPERUSERS.join('|')}/ }\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72911.rb",
            "line": 58
          },
          "id": "V-72911",
          "results": [
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000348784,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000258202,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000318032,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000203227,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.1838e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.001099629,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 3.8007e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000301884,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000227145,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000343983,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000203946,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000126429,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.1366e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 7.9558e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000276257,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000230502,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.6986e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000145236,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.3282e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.1963e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.0471e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000432851,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000119603,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000107846,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.7943e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000496215,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000352881,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000138013,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.0289e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000124006,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000100948,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 8.4824e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.5993e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 8.4682e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.8108e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000539662,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00025588,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000114243,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000168293,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000184937,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000875467,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000168081,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000189488,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000210198,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 1.9325e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000601946,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000182308,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000107287,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 4.2395e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000158578,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000907466,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000247668,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000143768,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000207954,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00017786,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000170541,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000131632,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000191828,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000179856,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.001100817,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000134407,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000101661,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.001218268,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.002083652,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00023632,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000173379,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000164795,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000247009,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000165002,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000160224,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000122277,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.001475011,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000237163,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000206506,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000208252,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000256265,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000234862,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000272476,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000197238,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000423027,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000400128,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000278577,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000211825,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000169648,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000213048,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000470241,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000204157,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.00067361,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00020482,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000325146,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000217574,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000122231,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6721e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.3024e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000111052,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.7676e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000202025,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000175199,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000322987,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000419598,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000174439,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000424992,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000209311,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000534743,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000233348,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000153523,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000147234,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000196559,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000494655,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000632902,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000167322,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000292511,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000137618,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000102798,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6824e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.1397e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000111086,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.00011363,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.132e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000134349,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.5401e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000100534,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.6907e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.0614e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000114909,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.5961e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.7677e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000106776,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000344051,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000169769,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.1312e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000270033,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000137716,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000133083,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000304653,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000416118,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000142513,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000107269,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00010603,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.3421e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.1709e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000120507,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.2395e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 8.984e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.2132e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000117899,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.5652e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.3695e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000194434,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000258625,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000114735,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000125114,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000227847,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000196211,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000136513,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000101123,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.3296e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000110131,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.9396e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000147248,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000123597,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000114045,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.4808e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.5065e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.8935e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.0094e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.7642e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000159676,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000154098,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 1.4472e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000306748,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000121231,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.2832e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 8.6108e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.6951e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 8.6405e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.8928e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000107986,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000659352,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000140852,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000105664,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 1.5762e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000157061,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000103631,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000174116,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000176927,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.1874e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.3938e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.0562e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000107505,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.5044e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 8.7004e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000100104,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000207409,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.9611e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.0804e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.5494e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000296288,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000133497,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000108403,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.2724e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000235497,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6977e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 8.8369e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000180896,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000117087,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.536e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000113534,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.8159e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000115434,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.4062e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.076e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.9588e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 4.0256e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000307852,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000288606,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000176505,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000106603,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 4e-09,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 4e-09,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 3e-09,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.00075642,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000306588,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000136237,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.1638e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.4967e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.9583e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 8.3925e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.6372e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000112209,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00034625,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000226758,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.2648e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000104853,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.3543e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 8.5394e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000189444,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000230223,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.5928e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000135996,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.8897e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 8.8512e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000107756,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000100166,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.1683e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 8.6082e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000182339,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000120879,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.5128e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000100056,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.6606e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.9064e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.7352e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000375082,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000207636,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000594255,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000256383,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000258345,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000266663,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000277572,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 1.3294e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000211433,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.7669e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.6958e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.5015e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000191549,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00059923,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000332984,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.001518576,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000297954,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000157859,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.001111855,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000157482,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000111493,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.001102552,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000365539,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.002055121,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000408879,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000155862,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000606417,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000746927,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.00157232,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000339991,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000231117,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.001187417,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000451036,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000732762,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.001226028,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.001006851,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000355642,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000634979,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000393804,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000309253,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000324141,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000225512,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000284847,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.5359e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.001217456,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000377215,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000178496,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.334e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 9.9201e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000132455,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000252876,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000360118,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000475148,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000258234,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000400605,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000178557,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000446258,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000363953,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000375521,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 2e-09,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000216574,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000552863,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000293591,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000369023,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000381798,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000559965,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000738031,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000299508,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000352745,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000244692,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000747443,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000272787,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.001123166,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000268805,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000694565,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should not match /^\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00019467,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /((vcap|crunchy)=[arwdDxt]+\\/)|(=r\\/)/",
              "run_time": 0.000174899,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should match /vcap|crunchy/",
              "run_time": 0.000924512,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "The DBMS must be configured on a platform that has a NIST certified\n        FIPS 140-2 installation of OpenSSL.",
          "desc": "Postgres uses OpenSSL for the underlying encryption layer. Currently only\n        Red Hat Enterprise Linux is certified as a FIPS 140-2 distribution of\n        OpenSSL. For other operating systems, users must obtain or build their\n        own FIPS 140-2 OpenSSL libraries.",
          "impact": 0.7,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000179-DB-000114",
            "gid": "V-73071",
            "rid": "SV-87723r1_rule",
            "stig_id": "PGS9-00-012800",
            "cci": "CCI-000803",
            "nist": [
              "IA-7",
              "Rev_4"
            ],
            "check": "If the deployment incorporates a custom build of the operating\n      system and Postgres guaranteeing the use of FIPS 140-2 compliant OpenSSL,\n      this is not a finding.\n\n      If PostgreSQL is not installed on Red Hat Enterprise Linux (RHEL),\n      this is a finding.\n\n      If FIPS encryption is not enabled, this is a finding.",
            "fix": "Install Postgres with FIPS-compliant cryptography enabled on RHEL;\n      or by other means ensure that FIPS 140-2 certified OpenSSL libraries are\n      used by the DBMS."
          },
          "code": "control \"V-73071\" do\n  title \"The DBMS must be configured on a platform that has a NIST certified\n        FIPS 140-2 installation of OpenSSL.\"\n  desc  \"Postgres uses OpenSSL for the underlying encryption layer. Currently only\n        Red Hat Enterprise Linux is certified as a FIPS 140-2 distribution of\n        OpenSSL. For other operating systems, users must obtain or build their\n        own FIPS 140-2 OpenSSL libraries.\"\n  impact 0.7\n  tag \"severity\": \"high\"\n\n  tag \"gtitle\": \"SRG-APP-000179-DB-000114\"\n  tag \"gid\": \"V-73071\"\n  tag \"rid\": \"SV-87723r1_rule\"\n  tag \"stig_id\": \"PGS9-00-012800\"\n  tag \"cci\": \"CCI-000803\"\n  tag \"nist\": [\"IA-7\", \"Rev_4\"]\n\n  tag \"check\": \"If the deployment incorporates a custom build of the operating\n      system and Postgres guaranteeing the use of FIPS 140-2 compliant OpenSSL,\n      this is not a finding.\n\n      If PostgreSQL is not installed on Red Hat Enterprise Linux (RHEL),\n      this is a finding.\n\n      If FIPS encryption is not enabled, this is a finding.\"\n\n  # https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Security_Guide/chap-Federal_Standards_and_Regulations.html\n\n  # fips=1 kernel option to the kernel command line during system\n  # installation.\n\n  # PRELINKING=no option in the /etc/sysconfig/prelink\n  # run\n\n  # yum install dracut-fips\n  # For the CPUs with the AES New Instructions (AES-NI) support, install the\n  # vdracut-fips-aesni package as well:\n\n  # in the CM:\n  # To disable existing prelinking on all system files, use the\n  # prelink -u -a command.\n\n  tag \"fix\": \"Install Postgres with FIPS-compliant cryptography enabled on RHEL;\n      or by other means ensure that FIPS 140-2 certified OpenSSL libraries are\n      used by the DBMS.\"\n\n  describe os[:family] do\n    it { should eq 'redhat' }\n  end\n\n  describe kernel_parameter('fips') do\n    its('value') { should eq '1' }\n  end\n\n  describe parse_config_file('/etc/sysconfig/prelink') do\n    its('PRELINKING') { should cmp \"no\" }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73071.rb",
            "line": 27
          },
          "id": "V-73071",
          "results": [
            {
              "status": "failed",
              "code_desc": "debian should eq \"redhat\"",
              "run_time": 0.00045543,
              "start_time": "2017-06-30 21:54:53 +0000",
              "message": "\nexpected: \"redhat\"\n     got: \"debian\"\n\n(compared using ==)\n"
            },
            {
              "status": "failed",
              "code_desc": "Kernel Parameter fips value should eq \"1\"",
              "run_time": 0.026712928,
              "start_time": "2017-06-30 21:54:53 +0000",
              "message": "\nexpected: \"1\"\n     got: nil\n\n(compared using ==)\n"
            },
            {
              "status": "skipped",
              "code_desc": "Parse Config File /etc/sysconfig/prelink",
              "skip_message": "Can't find file \"/etc/sysconfig/prelink\"",
              "resource": "Parse Config File /etc/sysconfig/prelink",
              "run_time": 5.2702e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "Database objects (including but not limited to tables, indexes,\n  storage, trigger procedures, functions, links to software external to\n  PostgreSQL, etc.) must be owned by database/DBMS principals authorized for\n  ownership.",
          "desc": "Within the database, object ownership implies full privileges to the\n  owned object, including the privilege to assign access to the owned objects\n  to other subjects. Database functions and procedures can be coded using\n  definer's rights. This allows anyone who utilizes the object to perform the\n  actions if they were the owner. If not properly managed, this can lead to\n  privileged actions being taken by unauthorized individuals.\n  Conversely, if critical tables or other objects rely on unauthorized owner\n  accounts, these objects may be lost when an account is removed.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000133-DB-000200",
            "gid": "V-72897",
            "rid": "SV-87549r1_rule",
            "stig_id": "PGS9-00-003100",
            "cci": "CCI-001499",
            "nist": [
              "CM-5 (6)",
              "Rev_4"
            ],
            "check": "Review system documentation to identify accounts authorized to\n  own database objects. Review accounts that own objects in the database(s).\n  If any database objects are found to be owned by users not authorized to own\n  database objects, this is a finding.\n  To check the ownership of objects in the database, as the database\n  administrator, run the following SQL:\n  $ sudo su - postgres\n  $ psql -x -c \"\\dn *.*\"\n  $ psql -x -c \"\\dt *.*\"\n  $ psql -x -c \"\\ds *.*\"\n  $ psql -x -c \"\\dv *.*\"\n  $ psql -x -c \"\\df+ *.*\"\n  If any object is not owned by an authorized role for ownership, this is a\n  finding.",
            "fix": "Assign ownership of authorized objects to authorized object owner\n  accounts.\n  #### Schema Owner\n  To create a schema owned by the user bob, run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE SCHEMA test AUTHORIZATION bob\n  To alter the ownership of an existing object to be owned by the user bob,\n  run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"ALTER SCHEMA test OWNER TO bob\""
          },
          "code": "control \"V-72897\" do\n  title \"Database objects (including but not limited to tables, indexes,\n  storage, trigger procedures, functions, links to software external to\n  PostgreSQL, etc.) must be owned by database/DBMS principals authorized for\n  ownership.\"\n  desc  \"Within the database, object ownership implies full privileges to the\n  owned object, including the privilege to assign access to the owned objects\n  to other subjects. Database functions and procedures can be coded using\n  definer's rights. This allows anyone who utilizes the object to perform the\n  actions if they were the owner. If not properly managed, this can lead to\n  privileged actions being taken by unauthorized individuals.\n  Conversely, if critical tables or other objects rely on unauthorized owner\n  accounts, these objects may be lost when an account is removed.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000133-DB-000200\"\n  tag \"gid\": \"V-72897\"\n  tag \"rid\": \"SV-87549r1_rule\"\n  tag \"stig_id\": \"PGS9-00-003100\"\n  tag \"cci\": \"CCI-001499\"\n  tag \"nist\": [\"CM-5 (6)\", \"Rev_4\"]\n  tag \"check\": \"Review system documentation to identify accounts authorized to\n  own database objects. Review accounts that own objects in the database(s).\n  If any database objects are found to be owned by users not authorized to own\n  database objects, this is a finding.\n  To check the ownership of objects in the database, as the database\n  administrator, run the following SQL:\n  $ sudo su - postgres\n  $ psql -x -c \\\"\\\\dn *.*\\\"\n  $ psql -x -c \\\"\\\\dt *.*\\\"\n  $ psql -x -c \\\"\\\\ds *.*\\\"\n  $ psql -x -c \\\"\\\\dv *.*\\\"\n  $ psql -x -c \\\"\\\\df+ *.*\\\"\n  If any object is not owned by an authorized role for ownership, this is a\n  finding.\"\n  tag \"fix\": \"Assign ownership of authorized objects to authorized object owner\n  accounts.\n  #### Schema Owner\n  To create a schema owned by the user bob, run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE SCHEMA test AUTHORIZATION bob\n  To alter the ownership of an existing object to be owned by the user bob,\n  run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"ALTER SCHEMA test OWNER TO bob\\\"\"\n\n  # owner is the last column in output for these commands\n  commands = [\n    '\\dn *.*',\n    '\\dt *.*',\n    '\\ds *.*',\n    '\\dv *.*'\n  ]\n  object_owners = []\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  commands.each do |command|\n    sql.query(command, [PG_DB]).output.split(\"\\n\").each do |row|\n      unless row == 'No matching relations found.'\n        object_owners.push(row.split('|').last)\n      end\n    end\n  end\n\n  sql.query('\\df+ *.*', [PG_DB]).output.split(\"\\n\").each do |row|\n    columns = row.split('|')\n    if columns.length > 7\n      object_owners.push(columns[7])\n    end\n  end\n\n  object_owners.uniq.each do |owner|\n    describe PG_OBJECT_OWNERS do\n      it { should include(owner) }\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72897.rb",
            "line": 57
          },
          "id": "V-72897",
          "results": [
            {
              "status": "passed",
              "code_desc": "[\"jesse\", \"vcap\", \"crunchy\", \"replication\"] should include \"vcap\"",
              "run_time": 0.000217165,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must associate organization-defined types of security labels\nhaving organization-defined security label values with information in process.",
          "desc": "It is ISO responsibility to utilize PostgreSQL RLS capabilities. No\n        security labeling requirements have been specified.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000313-DB-000309",
            "gid": "V-73013",
            "rid": "SV-87665r1_rule",
            "stig_id": "PGS9-00-009400",
            "cci": "CCI-002263",
            "nist": [
              "AC-16 a",
              "Rev_4"
            ],
            "check": "If security labeling is not required, this is not a finding.\n\nFirst, as the database administrator (shown here as \"postgres\"), run the following\nSQL against each table that requires security labels:\n\n$ sudo su - postgres\n$ psql -c \"\\d+ <schema_name>.<table_name>\"\n\nIf security labeling requirements have been specified, but the security labeling is\nnot implemented or does not reliably maintain labels on information in process, this\nis a finding.",
            "fix": "In addition to the SQL-standard privilege system available through\nGRANT, tables can have row security policies that restrict, on a per-user basis,\nwhich rows can be returned by normal queries or inserted, updated, or deleted by\ndata modification commands. This feature is also known as Row-Level Security (RLS).\n\nRLS policies can be very different depending on their use case. For one example of\nusing RLS for Security Labels, see supplementary content APPENDIX-D."
          },
          "code": "control \"V-73013\" do\n  title \"PostgreSQL must associate organization-defined types of security labels\nhaving organization-defined security label values with information in process.\"\n  desc  \"Without the association of security labels to information, there is no\nbasis for PostgreSQL to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or\ncharacteristics of an entity (e.g., subjects and objects) with respect to\nsafeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables,\nrows) within the database and are used to enable the implementation of access\ncontrol and flow control policies, reflect special dissemination, handling or\ndistribution instructions, or support other aspects of the information security\npolicy.\n\nOne example includes marking data as classified or FOUO. These security labels may\nbe assigned manually or during data processing, but, either way, it is imperative\nthese assignments are maintained while the data is in storage. If the security\nlabels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be the sepgsql feature of\nPostgreSQL, a third-party product, or custom application code.\"\n  impact 0.0\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000313-DB-000309\"\n  tag \"gid\": \"V-73013\"\n  tag \"rid\": \"SV-87665r1_rule\"\n  tag \"stig_id\": \"PGS9-00-009400\"\n  tag \"cci\": \"CCI-002263\"\n  tag \"nist\": [\"AC-16 a\", \"Rev_4\"]\n  tag \"check\": \"If security labeling is not required, this is not a finding.\n\nFirst, as the database administrator (shown here as \\\"postgres\\\"), run the following\nSQL against each table that requires security labels:\n\n$ sudo su - postgres\n$ psql -c \\\"\\\\d+ <schema_name>.<table_name>\\\"\n\nIf security labeling requirements have been specified, but the security labeling is\nnot implemented or does not reliably maintain labels on information in process, this\nis a finding.\"\n  tag \"fix\": \"In addition to the SQL-standard privilege system available through\nGRANT, tables can have row security policies that restrict, on a per-user basis,\nwhich rows can be returned by normal queries or inserted, updated, or deleted by\ndata modification commands. This feature is also known as Row-Level Security (RLS).\n\nRLS policies can be very different depending on their use case. For one example of\nusing RLS for Security Labels, see supplementary content APPENDIX-D.\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73013.rb",
            "line": 23
          },
          "id": "V-73013",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 2.5013e-05,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "Execution of software modules (to include functions and trigger\n  procedures) with elevated privileges must be restricted to necessary cases\n  only.",
          "desc": "Out of the Box DBaaS does not grant System Users access to privileged\n        (Administration) functions. The System Accounts provided to consumers of\n        the Crunchy DBaaS do not have access to privileged (Administration)\n        functions. Those functions are only available to the internal admin\n        DBaaS Roles, and can only be executed by Platform Admins or via authorized\n        Service Broker interactions. Crunchy will not grant Superuser priviledges\n        to ANY Information System User residing on the Shared PostgreSQL Cluster.\n        A Dedicated service plan must be requested if Superuser functionality is\n        required by the Infromation System (aproval required)",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000342-DB-000302",
            "gid": "V-72905",
            "rid": "SV-87557r1_rule",
            "stig_id": "PGS9-00-003600",
            "cci": "CCI-002233",
            "nist": [
              "AC-6 (8)",
              "Rev_4"
            ],
            "check": "Functions in PostgreSQL can be created with the SECURITY\n  DEFINER option. When SECURITY DEFINER functions are executed by a user, said\n  function is run with the privileges of the user who created it.\n  To list all functions that have SECURITY DEFINER, as, the database\n  administrator (shown here as \"postgres\"), run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SELECT nspname, proname, proargtypes, prosecdef, rolname,\n  proconfig FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid JOIN\n  pg_authid a ON a.oid = p.proowner WHERE prosecdef OR NOT proconfig IS NULL;\"\n  In the query results, a prosecdef value of \"t\" on a row indicates that that\n  function uses privilege elevation.\n  If elevation of PostgreSQL privileges is utilized but not documented, this is\n  a finding.\n  If elevation of PostgreSQL privileges is documented, but not implemented as\n  described in the documentation, this is a finding.\n  If the privilege-elevation logic can be invoked in ways other than intended,\n  or in contexts other than intended, or by subjects/principals other than\n  intended, this is a finding.",
            "fix": "Determine where, when, how, and by what principals/subjects\n  elevated privilege is needed.\n  To change a SECURITY DEFINER function to SECURITY INVOKER, as the database\n  administrator (shown here as \"postgres\"), run the following SQL:  $ sudo su - postgres\n  $ psql -c \"ALTER FUNCTION <function_name> SECURITY INVOKER;\""
          },
          "code": "control \"V-72905\" do\n  title \"Execution of software modules (to include functions and trigger\n  procedures) with elevated privileges must be restricted to necessary cases\n  only.\"\n  desc  \"In certain situations, to provide required functionality, PostgreSQL\n  needs to execute internal logic (stored procedures, functions, triggers, etc.)\n  and/or external code modules with elevated privileges. However, if the\n  privileges required for execution are at a higher level than the privileges\n  assigned to organizational users invoking the functionality\n  applications/programs, those users are indirectly provided with greater\n  privileges than assigned by organizations.\n  Privilege elevation must be utilized only where necessary and protected\n  from misuse.\n  This calls for inspection of application source code, which will require\n  collaboration with the application developers. It is recognized that in\n  many cases, the database administrator (DBA) is organizationally separate\n  from the application developers, and may have limited, if any, access to\n  source code. Nevertheless, protections of this type are so important to the\n  secure operation of databases that they must not be ignored. At a minimum,\n  the DBA must attempt to obtain assurances from the development organization\n  that this issue has been addressed, and must document what has been discovered.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000342-DB-000302\"\n  tag \"gid\": \"V-72905\"\n  tag \"rid\": \"SV-87557r1_rule\"\n  tag \"stig_id\": \"PGS9-00-003600\"\n  tag \"cci\": \"CCI-002233\"\n  tag \"nist\": [\"AC-6 (8)\", \"Rev_4\"]\n  tag \"check\": \"Functions in PostgreSQL can be created with the SECURITY\n  DEFINER option. When SECURITY DEFINER functions are executed by a user, said\n  function is run with the privileges of the user who created it.\n  To list all functions that have SECURITY DEFINER, as, the database\n  administrator (shown here as \\\"postgres\\\"), run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SELECT nspname, proname, proargtypes, prosecdef, rolname,\n  proconfig FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid JOIN\n  pg_authid a ON a.oid = p.proowner WHERE prosecdef OR NOT proconfig IS NULL;\\\"\n  In the query results, a prosecdef value of \\\"t\\\" on a row indicates that that\n  function uses privilege elevation.\n  If elevation of PostgreSQL privileges is utilized but not documented, this is\n  a finding.\n  If elevation of PostgreSQL privileges is documented, but not implemented as\n  described in the documentation, this is a finding.\n  If the privilege-elevation logic can be invoked in ways other than intended,\n  or in contexts other than intended, or by subjects/principals other than\n  intended, this is a finding.\"\n  tag \"fix\": \"Determine where, when, how, and by what principals/subjects\n  elevated privilege is needed.\n  To change a SECURITY DEFINER function to SECURITY INVOKER, as the database\n  administrator (shown here as \\\"postgres\\\"), run the following SQL:\\\n  $ sudo su - postgres\n  $ psql -c \\\"ALTER FUNCTION <function_name> SECURITY INVOKER;\\\"\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  command = 'SELECT nspname, proname, proargtypes, prosecdef, rolname, proconfig '\\\n  'FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid JOIN '\\\n  'pg_authid a ON a.oid = p.proowner WHERE prosecdef OR NOT proconfig IS NULL;'\n\n  sql.query('SELECT datname FROM pg_catalog.pg_database;', ['postgres']).output.split(\"\\n\").each do |database|\n    rows = sql.query(command, [database])\n    if rows.methods.include?(:output) # Handle connection disabled on database\n      rows.output.split(\"\\n\").each do |row|\n        describe row do\n          it { should_not match /\\|t\\|/ }\n        end\n      end\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72905.rb",
            "line": 39
          },
          "id": "V-72905",
          "results": [
            {
              "status": "failed",
              "code_desc": "public|pg_stat_repl_json||t|vcap| should not match /\\|t\\|/",
              "run_time": 0.000830432,
              "start_time": "2017-06-30 21:54:53 +0000",
              "message": "expected \"public|pg_stat_repl_json||t|vcap|\" not to match /\\|t\\|/\nDiff:\n@@ -1,2 +1,2 @@\n-/\\|t\\|/\n+\"public|pg_stat_repl_json||t|vcap|\"\n"
            },
            {
              "status": "failed",
              "code_desc": "public|st_estimatedextent|25 25 25 16|t|vcap| should not match /\\|t\\|/",
              "run_time": 0.000548174,
              "start_time": "2017-06-30 21:54:53 +0000",
              "message": "expected \"public|st_estimatedextent|25 25 25 16|t|vcap|\" not to match /\\|t\\|/\nDiff:\n@@ -1,2 +1,2 @@\n-/\\|t\\|/\n+\"public|st_estimatedextent|25 25 25 16|t|vcap|\"\n"
            },
            {
              "status": "failed",
              "code_desc": "public|st_estimatedextent|25 25 25|t|vcap| should not match /\\|t\\|/",
              "run_time": 0.000389779,
              "start_time": "2017-06-30 21:54:53 +0000",
              "message": "expected \"public|st_estimatedextent|25 25 25|t|vcap|\" not to match /\\|t\\|/\nDiff:\n@@ -1,2 +1,2 @@\n-/\\|t\\|/\n+\"public|st_estimatedextent|25 25 25|t|vcap|\"\n"
            },
            {
              "status": "failed",
              "code_desc": "public|st_estimatedextent|25 25|t|vcap| should not match /\\|t\\|/",
              "run_time": 0.000466276,
              "start_time": "2017-06-30 21:54:53 +0000",
              "message": "expected \"public|st_estimatedextent|25 25|t|vcap|\" not to match /\\|t\\|/\nDiff:\n@@ -1,2 +1,2 @@\n-/\\|t\\|/\n+\"public|st_estimatedextent|25 25|t|vcap|\"\n"
            },
            {
              "status": "passed",
              "code_desc": "tiger|interpolate_from_address|23 1043 1043 16619 1043 701|f|vcap|{client_min_messages=ERROR} should not match /\\|t\\|/",
              "run_time": 0.000189229,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|geocode_address|18243 23 16619|f|vcap|{join_collapse_limit=2} should not match /\\|t\\|/",
              "run_time": 0.000226116,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|geocode_intersection|25 25 25 25 25 23|f|vcap|{join_collapse_limit=2} should not match /\\|t\\|/",
              "run_time": 0.000128392,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must protect the confidentiality and integrity of all\ninformation at rest.",
          "desc": "This control is intended to address the confidentiality and integrity of\ninformation at rest in non-mobile devices and covers user information and system\ninformation. Information at rest refers to the state of information when it is\nlocated on a secondary storage device (e.g., disk drive, tape drive) within an\norganizational information system. Applications and application users generate\ninformation throughout the course of their application use.\n\nUser data generated, as well as application-specific configuration data, needs to be\nprotected. Organizations may choose to employ different mechanisms to achieve\nconfidentiality and integrity protections, as appropriate.\n\nIf the confidentiality and integrity of application data is not protected, the data\nwill be open to compromise and unauthorized modification.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000231-DB-000154",
            "gid": "V-72995",
            "rid": "SV-87647r1_rule",
            "stig_id": "PGS9-00-008300",
            "cci": "CCI-001199",
            "nist": [
              "SC-28",
              "Rev_4"
            ],
            "check": "One possible way to encrypt data within PostgreSQL is to use the\npgcrypto extension.\n\nTo check if pgcrypto is installed on PostgreSQL, as a database administrator (shown\nhere as \"postgres\"), run the following command:\n\n$ sudo su - postgres\n$ psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a\nfinding.\n\nIf disk or filesystem requires encryption, ask the system owner, DBA, and SA to\ndemonstrate the use of disk-level encryption. If this is required and is not found,\nthis is a finding.\n\nIf controls do not exist or are not enabled, this is a finding.",
            "fix": "Apply appropriate controls to protect the confidentiality and\nintegrity of data at rest in the database.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See\nsupplementary content APPENDIX-E for documentation on installing pgcrypto.\n\nWith pgcrypto installed, it is possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('a_secure_password',\ngen_salt('xdes')));"
          },
          "code": "control \"V-72995\" do\n\n  title \"PostgreSQL must protect the confidentiality and integrity of all\ninformation at rest.\"\n  desc  \"This control is intended to address the confidentiality and integrity of\ninformation at rest in non-mobile devices and covers user information and system\ninformation. Information at rest refers to the state of information when it is\nlocated on a secondary storage device (e.g., disk drive, tape drive) within an\norganizational information system. Applications and application users generate\ninformation throughout the course of their application use.\n\nUser data generated, as well as application-specific configuration data, needs to be\nprotected. Organizations may choose to employ different mechanisms to achieve\nconfidentiality and integrity protections, as appropriate.\n\nIf the confidentiality and integrity of application data is not protected, the data\nwill be open to compromise and unauthorized modification.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000231-DB-000154\"\n  tag \"gid\": \"V-72995\"\n  tag \"rid\": \"SV-87647r1_rule\"\n  tag \"stig_id\": \"PGS9-00-008300\"\n  tag \"cci\": \"CCI-001199\"\n  tag \"nist\": [\"SC-28\", \"Rev_4\"]\n\n  tag \"check\": \"One possible way to encrypt data within PostgreSQL is to use the\npgcrypto extension.\n\nTo check if pgcrypto is installed on PostgreSQL, as a database administrator (shown\nhere as \\\"postgres\\\"), run the following command:\n\n$ sudo su - postgres\n$ psql -c \\\"SELECT * FROM pg_available_extensions where name='pgcrypto'\\\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a\nfinding.\n\nIf disk or filesystem requires encryption, ask the system owner, DBA, and SA to\ndemonstrate the use of disk-level encryption. If this is required and is not found,\nthis is a finding.\n\nIf controls do not exist or are not enabled, this is a finding.\"\n  tag \"fix\": \"Apply appropriate controls to protect the confidentiality and\nintegrity of data at rest in the database.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See\nsupplementary content APPENDIX-E for documentation on installing pgcrypto.\n\nWith pgcrypto installed, it is possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('a_secure_password',\ngen_salt('xdes')));\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query(\"SELECT name FROM pg_available_extensions where name='pgcrypto'\", [PG_DB]) do\n    its('output') { should eq 'pgcrypto' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72995.rb",
            "line": 46
          },
          "id": "V-72995",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SELECT name FROM pg_available_extensions where name='pgcrypto' output should eq \"pgcrypto\"",
              "run_time": 0.000152612,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must automatically terminate a user session after\norganization-defined conditions or trigger events requiring session disconnect.",
          "desc": "Crunchy DBaaS exclusively utilizes System Accounts which are negotiated\n        through the Service Broker interactions. Crunchy does not maintain any\n        user accounts and therefore is not responsible for terminating user-initiated\n        logical sessions",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000295-DB-000305",
            "gid": "V-73051",
            "rid": "SV-87703r1_rule",
            "stig_id": "PGS9-00-011600",
            "cci": "CCI-002361",
            "nist": [
              "AC-12",
              "Rev_4"
            ],
            "check": "Review system documentation to obtain the organization's definition\nof circumstances requiring automatic session termination. If the documentation\nexplicitly states that such termination is not required or is prohibited, this is\nnot a finding.\n\nIf the documentation requires automatic session termination, but PostgreSQL is not\nconfigured accordingly, this is a finding.",
            "fix": "Configure PostgreSQL to automatically terminate a user session after\norganization-defined conditions or trigger events requiring session termination.\n\nExamples follow.\n\n### Change a role to nologin and disconnect the user\n\nALTER ROLE '<username>' NOLOGIN;\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE username='<username>';\n\n### Disconnecting users during a specific time range\nSee supplementary content APPENDIX-A for a bash script for this example.\n\nThe script found in APPENDIX-A using the -l command can disable all users with\nrolcanlogin=t from logging in. The script keeps track of who it disables in a\n.restore_login file. After the specified time is over, the same script can be run\nwith the -r command to restore all login connections.\n\nThis script would be added to a cron job:\n\n# lock at 5 am every day of the week, month, year at the 0 minute mark.\n0 5 * * * postgres /var/lib/pgsql/no_login.sh -d postgres -l\n# restore at 5 pm every day of the week, month, year at the 0 minute mark.\n0 17 * * * postgres /var/lib/pgsql/no_login.sh -d postgres -r"
          },
          "code": "control \"V-73051\" do\n  title \"PostgreSQL must automatically terminate a user session after\norganization-defined conditions or trigger events requiring session disconnect.\"\n  desc  \"This addresses the termination of user-initiated logical sessions in\ncontrast to the termination of network connections that are associated with\ncommunications sessions (i.e., network disconnect). A logical session (for local,\nnetwork, and remote access) is initiated whenever a user (or process acting on\nbehalf of a user) accesses an organizational information system. Such user sessions\ncan be terminated (and thus terminate user access) without terminating network\nsessions.\n\nSession termination ends all processes associated with a user's logical session\nexcept those batch processes/jobs that are specifically created by the user (i.e.,\nsession owner) to continue after the session is terminated.\n\nConditions or trigger events requiring automatic session termination can include,\nfor example, organization-defined periods of user inactivity, targeted responses to\ncertain types of incidents, and time-of-day restrictions on information system use.\n\nThis capability is typically reserved for specific cases where the system owner,\ndata owner, or organization requires additional assurance.\"\n  impact 0.0\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000295-DB-000305\"\n  tag \"gid\": \"V-73051\"\n  tag \"rid\": \"SV-87703r1_rule\"\n  tag \"stig_id\": \"PGS9-00-011600\"\n  tag \"cci\": \"CCI-002361\"\n  tag \"nist\": [\"AC-12\", \"Rev_4\"]\n  tag \"check\": \"Review system documentation to obtain the organization's definition\nof circumstances requiring automatic session termination. If the documentation\nexplicitly states that such termination is not required or is prohibited, this is\nnot a finding.\n\nIf the documentation requires automatic session termination, but PostgreSQL is not\nconfigured accordingly, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to automatically terminate a user session after\norganization-defined conditions or trigger events requiring session termination.\n\nExamples follow.\n\n### Change a role to nologin and disconnect the user\n\nALTER ROLE '<username>' NOLOGIN;\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE username='<username>';\n\n### Disconnecting users during a specific time range\nSee supplementary content APPENDIX-A for a bash script for this example.\n\nThe script found in APPENDIX-A using the -l command can disable all users with\nrolcanlogin=t from logging in. The script keeps track of who it disables in a\n.restore_login file. After the specified time is over, the same script can be run\nwith the -r command to restore all login connections.\n\nThis script would be added to a cron job:\n\n# lock at 5 am every day of the week, month, year at the 0 minute mark.\n0 5 * * * postgres /var/lib/pgsql/no_login.sh -d postgres -l\n# restore at 5 pm every day of the week, month, year at the 0 minute mark.\n0 17 * * * postgres /var/lib/pgsql/no_login.sh -d postgres -r\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73051.rb",
            "line": 23
          },
          "id": "V-73051",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 8.327e-06,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must be able to generate audit records when\n  privileges/permissions are retrieved.",
          "desc": "Under some circumstances, it may be useful to monitor who/what is\n  reading privilege/permission/role information. Therefore, it must be possible\n  to configure auditing to do this. PostgreSQLs typically make such information\n  available through views or functions.\n  This requirement addresses explicit requests for privilege/permission/role\n  membership information. It does not refer to the implicit retrieval of\n  privileges/permissions/role memberships that PostgreSQL continually performs\n  to determine if any and every action on the database is permitted.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000091-DB-000066",
            "gid": "V-72947",
            "rid": "SV-87599r1_rule",
            "stig_id": "PGS9-00-005500",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), check if\n  pgaudit is enabled by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If pgaudit is not found in the results, this is a finding.\n  Next, as the database administrator (shown here as \"postgres\"), list all\n  role memberships for the database:\n  $ sudo su - postgres\n$ psql -c \"\\du\"\n  Next, verify the query was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-01-28 19:43:12.126 UTC postgres postgres: >LOG: AUDIT:\n  SESSION,1,1,READ,SELECT,,,\"SELECT r.rolname, r.rolsuper, r.rolinherit,\n  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,\n  r.rolconnlimit, r.rolvaliduntil,\n  ARRAY(SELECT b.rolname\n  FROM pg_catalog.pg_auth_members m\n  JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)\n  WHERE m.member = r.oid) as memberof\n  , r.rolreplication\n  , r.rolbypassrls\n  FROM pg_catalog.pg_roles r\n  ORDER BY 1;\",<none>\n  If audit records are not produced, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log_catalog = 'on'\n  pgaudit.log = 'read'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72947\" do\n  title \"PostgreSQL must be able to generate audit records when\n  privileges/permissions are retrieved.\"\n  desc  \"Under some circumstances, it may be useful to monitor who/what is\n  reading privilege/permission/role information. Therefore, it must be possible\n  to configure auditing to do this. PostgreSQLs typically make such information\n  available through views or functions.\n  This requirement addresses explicit requests for privilege/permission/role\n  membership information. It does not refer to the implicit retrieval of\n  privileges/permissions/role memberships that PostgreSQL continually performs\n  to determine if any and every action on the database is permitted.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000091-DB-000066\"\n  tag \"gid\": \"V-72947\"\n  tag \"rid\": \"SV-87599r1_rule\"\n  tag \"stig_id\": \"PGS9-00-005500\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \\\"postgres\\\"), check if\n  pgaudit is enabled by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\n  If pgaudit is not found in the results, this is a finding.\n  Next, as the database administrator (shown here as \\\"postgres\\\"), list all\n  role memberships for the database:\n  $ sudo su - postgres\n$ psql -c \\\"\\\\du\\\"\n  Next, verify the query was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-01-28 19:43:12.126 UTC postgres postgres: >LOG: AUDIT:\n  SESSION,1,1,READ,SELECT,,,\\\"SELECT r.rolname, r.rolsuper, r.rolinherit,\n  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,\n  r.rolconnlimit, r.rolvaliduntil,\n  ARRAY(SELECT b.rolname\n  FROM pg_catalog.pg_auth_members m\n  JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)\n  WHERE m.member = r.oid) as memberof\n  , r.rolreplication\n  , r.rolbypassrls\n  FROM pg_catalog.pg_roles r\n  ORDER BY 1;\\\",<none>\n  If audit records are not produced, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log_catalog = 'on'\n  pgaudit.log = 'read'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  query = command(\"psql -d #{PG_DB} -A -t -E -c '\\\\du'\").stdout.strip.match(/(\\*+ QUERY \\*+)\\n(.*;)/m)\n  query_first = ''\n  query ? query_first = query[2].split(\"\\n\").first : query_first = 'SELECT'\n\n  describe file(current_log) do\n    its('content') { should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,READ,SELECT(,.*){2},\"?#{Regexp.escape(query_first)}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72947.rb",
            "line": 46
          },
          "id": "V-72947",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.0001321,
              "start_time": "2017-06-30 21:54:53 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,READ,SELECT(,.*){2},\"?SELECT\\ r\\.rolname,\\ r\\.rolsuper,\\ r\\.rolinherit,/",
              "run_time": 0.017967697,
              "start_time": "2017-06-30 21:54:53 +0000"
            }
          ]
        },
        {
          "title": "When invalid inputs are received, PostgreSQL must behave in a\n  predictable and documented manner that reflects organizational and system\n  objectives.",
          "desc": "A common vulnerability is unplanned behavior when invalid inputs are\n  received. This requirement guards against adverse or unintended system\n  behavior caused by invalid inputs, where information system responses to the\n  invalid input may be disruptive or cause the system to fail into an unsafe\n  state.\n  The behavior will be derived from the organizational and system requirements\n  and includes, but is not limited to, notification of the appropriate\n  personnel, creating an audit record, and rejecting invalid input.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000447-DB-000393",
            "gid": "V-72907",
            "rid": "SV-87559r1_rule",
            "stig_id": "PGS9-00-003700",
            "cci": "CCI-002754",
            "nist": [
              "SI-10 (3)",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), make\n  a small SQL syntax error in psql by running the following:\n  $ sudo su - postgres\n  $ psql -c \"CREAT TABLEincorrect_syntax(id INT)\"\n  ERROR: syntax error at or near \"CREAT\"\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  syntax error was logged (change the log file name and part to suit the\n  circumstances):\n  $ sudo su - postgres\n  $ cat ~/9.5/data/pg_log/postgresql-Wed.log\n  2016-03-30 16:18:10.772 EDT postgres postgres 5706bb87.90dERROR: syntax error\n  at or near \"CRT\" at character 1\n  2016-03-30 16:18:10.772 EDT postgres postgres 5706bb87.90dSTATEMENT: CRT TABLE\n  incorrect_syntax(id INT);\n  Review system documentation to determine how input errors from application to\n  PostgreSQL are to be handled in general and if any special handling is defined\n  for specific circumstances.\n  If it does not implement the documented behavior, this is a finding.",
            "fix": "Enable logging.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  All errors and denials are logged if logging is enabled."
          },
          "code": "control \"V-72907\" do\n  title \"When invalid inputs are received, PostgreSQL must behave in a\n  predictable and documented manner that reflects organizational and system\n  objectives.\"\n  desc  \"A common vulnerability is unplanned behavior when invalid inputs are\n  received. This requirement guards against adverse or unintended system\n  behavior caused by invalid inputs, where information system responses to the\n  invalid input may be disruptive or cause the system to fail into an unsafe\n  state.\n  The behavior will be derived from the organizational and system requirements\n  and includes, but is not limited to, notification of the appropriate\n  personnel, creating an audit record, and rejecting invalid input.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000447-DB-000393\"\n  tag \"gid\": \"V-72907\"\n  tag \"rid\": \"SV-87559r1_rule\"\n  tag \"stig_id\": \"PGS9-00-003700\"\n  tag \"cci\": \"CCI-002754\"\n  tag \"nist\": [\"SI-10 (3)\", \"Rev_4\"]\n  tag \"check\": \"As the database administrator (shown here as \\\"postgres\\\"), make\n  a small SQL syntax error in psql by running the following:\n  $ sudo su - postgres\n  $ psql -c \\\"CREAT TABLEincorrect_syntax(id INT)\\\"\n  ERROR: syntax error at or near \\\"CREAT\\\"\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\n  syntax error was logged (change the log file name and part to suit the\n  circumstances):\n  $ sudo su - postgres\n  $ cat ~/9.5/data/pg_log/postgresql-Wed.log\n  2016-03-30 16:18:10.772 EDT postgres postgres 5706bb87.90dERROR: syntax error\n  at or near \\\"CRT\\\" at character 1\n  2016-03-30 16:18:10.772 EDT postgres postgres 5706bb87.90dSTATEMENT: CRT TABLE\n  incorrect_syntax(id INT);\n  Review system documentation to determine how input errors from application to\n  PostgreSQL are to be handled in general and if any special handling is defined\n  for specific circumstances.\n  If it does not implement the documented behavior, this is a finding.\"\n  tag \"fix\": \"Enable logging.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  All errors and denials are logged if logging is enabled.\"\n\n  command = 'CREAT TABLEincorrect_syntax(id INT);'\n  error = 'syntax error at or near \"CREAT\"'\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query(command, [PG_DB]) do\n    it { should match /ERROR:\\s*#{Regexp.escape(error)}/ }\n  end\n\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  describe file(current_log) do\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(error)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(command)}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72907.rb",
            "line": 45
          },
          "id": "V-72907",
          "results": [
            {
              "status": "passed",
              "code_desc": "Can't read run query \"CREAT TABLEincorrect_syntax(id INT);\" on postgres_session: \nERROR:  syntax error at or near \"CREAT\"\nLINE 1: CREAT TABLEincorrect_syntax(id INT);\n        ^\n should match /ERROR:\\s*syntax\\ error\\ at\\ or\\ near\\ \"CREAT\"/",
              "run_time": 0.000172368,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*syntax\\ error\\ at\\ or\\ near\\ \"CREAT\"/",
              "run_time": 0.007679526,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*CREAT\\ TABLEincorrect_syntax\\(id\\ INT\\);/",
              "run_time": 0.006279527,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must require users to reauthenticate when organization-defined\ncircumstances or situations require reauthentication.",
          "desc": "Crunchy DBaaS exclusively utilizes System Accounts which are negotiated\n        through the Service Broker interactions. Crunchy does not maintain any\n        user accounts.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000389-DB-000372",
            "gid": "V-73027",
            "rid": "SV-87679r1_rule",
            "stig_id": "PGS9-00-010100",
            "cci": "CCI-002038",
            "nist": [
              "IA-11",
              "Rev_4"
            ],
            "check": "Determine all situations where a user must re-authenticate. Check if\nthe mechanisms that handle such situations use the following SQL:\n\nTo make a single user re-authenticate, the following must be present:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\n\nTo make all users re-authenticate, run the following:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'\n\nIf the provided SQL does not force re-authentication, this is a finding.",
            "fix": "Modify and/or configure PostgreSQL and related applications and tools\nso that users are always required to reauthenticate when changing role or escalating\nprivileges.\n\nTo make a single user re-authenticate, the following must be present:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\n\nTo make all users re-authenticate, the following must be present:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'"
          },
          "code": "control \"V-73027\" do\n  title \"PostgreSQL must require users to reauthenticate when organization-defined\ncircumstances or situations require reauthentication.\"\n  desc  \"The DoD standard for authentication of an interactive user is the\npresentation of a Common Access Card (CAC) or other physical token bearing a valid,\ncurrent, DoD-issued Public Key Infrastructure (PKI) certificate, coupled with a\nPersonal Identification Number (PIN) to be entered by the user at the beginning of\neach session and whenever reauthentication is required.\n\nWithout reauthentication, users may access resources or perform tasks for which they\ndo not have authorization.\n\nWhen applications provide the capability to change security roles or escalate the\nfunctional capability of the application, it is critical the user re-authenticate.\n\nIn addition to the reauthentication requirements associated with session locks,\norganizations may require reauthentication of individuals and/or devices in other\nsituations, including (but not limited to) the following circumstances:\n\n(i) When authenticators change;\n(ii) When roles change;\n(iii) When security categorized information systems change;\n(iv) When the execution of privileged functions occurs;\n(v) After a fixed period of time; or\n(vi) Periodically.\n\nWithin the DoD, the minimum circumstances requiring reauthentication are privilege\nescalation and role changes.\"\n  impact 0.0\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000389-DB-000372\"\n  tag \"gid\": \"V-73027\"\n  tag \"rid\": \"SV-87679r1_rule\"\n  tag \"stig_id\": \"PGS9-00-010100\"\n  tag \"cci\": \"CCI-002038\"\n  tag \"nist\": [\"IA-11\", \"Rev_4\"]\n  tag \"check\": \"Determine all situations where a user must re-authenticate. Check if\nthe mechanisms that handle such situations use the following SQL:\n\nTo make a single user re-authenticate, the following must be present:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\n\nTo make all users re-authenticate, run the following:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'\n\nIf the provided SQL does not force re-authentication, this is a finding.\"\n  tag \"fix\": \"Modify and/or configure PostgreSQL and related applications and tools\nso that users are always required to reauthenticate when changing role or escalating\nprivileges.\n\nTo make a single user re-authenticate, the following must be present:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user='<username>'\n\nTo make all users re-authenticate, the following must be present:\n\nSELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE user LIKE '%'\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73027.rb",
            "line": 23
          },
          "id": "V-73027",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 9.513e-06,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when privileges/permissions are\n  deleted.",
          "desc": "Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n  In an SQL environment, deleting permissions is typically done via the REVOKE\n  command.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000499-DB-000330",
            "gid": "V-72959",
            "rid": "SV-87611r1_rule",
            "stig_id": "PGS9-00-006100",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'role'\n  Now, as the system administrator, reload the server with the new\n  configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72959\" do\n  title \"PostgreSQL must generate audit records when privileges/permissions are\n  deleted.\"\n  desc  \"Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n  In an SQL environment, deleting permissions is typically done via the REVOKE\n  command.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000499-DB-000330\"\n  tag \"gid\": \"V-72959\"\n  tag \"rid\": \"SV-87611r1_rule\"\n  tag \"stig_id\": \"PGS9-00-006100\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \\\"SHOW pgaudit.log\\\"\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'role'\n  Now, as the system administrator, reload the server with the new\n  configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'ddl' }\n    its('output') { should include 'read' }\n    its('output') { should include 'role' }\n    its('output') { should include 'write' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72959.rb",
            "line": 46
          },
          "id": "V-72959",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000202818,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
              "run_time": 0.000124105,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
              "run_time": 2.3428e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 0.000175701,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 0.000117583,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must protect against a user falsely repudiating having performed\norganization-defined actions.",
          "desc": "Non-repudiation of actions taken is required in order to maintain data\nintegrity. Examples of particular actions taken by individuals include creating\ninformation, sending a message, approving information (e.g., indicating concurrence\nor signing a contract), and receiving a message.\n\nNon-repudiation protects against later claims by a user of not having created,\nmodified, or deleted a particular data item or collection of data in the database.\n\nIn designing a database, the organization must define the types of data and the user\nactions that must be protected from repudiation. The implementation must then\ninclude building audit features into the application data tables, and configuring\nPostgreSQL' audit tools to capture the necessary audit trail. Design and\nimplementation also must ensure that applications pass individual user\nidentification to PostgreSQL, even where the application connects to PostgreSQL with\na standard, shared account.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000080-DB-000063",
            "gid": "V-73019",
            "rid": "SV-87671r1_rule",
            "stig_id": "PGS9-00-009700",
            "cci": "CCI-000166",
            "nist": [
              "AU-10",
              "Rev_4"
            ],
            "check": "First, as the database administrator, review the current\nlog_line_prefix settings by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_line_prefix\"\n\nIf log_line_prefix does not contain at least '< %m %a %u %d %r %p %m >', this is a\nfinding.\n\nNext, review the current shared_preload_libraries' settings by running the following\nSQL:\n\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf shared_preload_libraries does not contain \"pgaudit\", this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nConfigure the database to supply additional auditing information to protect against\na user falsely repudiating having performed organization-defined actions.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See\nsupplementary content APPENDIX-B for documentation on installing pgaudit.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nModify the configuration of audit logs to include details identifying the individual\nuser:\n\nFirst, as the database administrator (shown here as \"postgres\"), edit\npostgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nExtra parameters can be added to the setting log_line_prefix to identify the user:\n\nlog_line_prefix = '< %m %a %u %d %r %p %m >'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\nUse accounts assigned to individual users. Where the application connects to\nPostgreSQL using a standard, shared account, ensure that it also captures the\nindividual user identification and passes it to PostgreSQL."
          },
          "code": "control \"V-73019\" do\n  title \"PostgreSQL must protect against a user falsely repudiating having performed\norganization-defined actions.\"\n  desc  \"Non-repudiation of actions taken is required in order to maintain data\nintegrity. Examples of particular actions taken by individuals include creating\ninformation, sending a message, approving information (e.g., indicating concurrence\nor signing a contract), and receiving a message.\n\nNon-repudiation protects against later claims by a user of not having created,\nmodified, or deleted a particular data item or collection of data in the database.\n\nIn designing a database, the organization must define the types of data and the user\nactions that must be protected from repudiation. The implementation must then\ninclude building audit features into the application data tables, and configuring\nPostgreSQL' audit tools to capture the necessary audit trail. Design and\nimplementation also must ensure that applications pass individual user\nidentification to PostgreSQL, even where the application connects to PostgreSQL with\na standard, shared account.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000080-DB-000063\"\n  tag \"gid\": \"V-73019\"\n  tag \"rid\": \"SV-87671r1_rule\"\n  tag \"stig_id\": \"PGS9-00-009700\"\n  tag \"cci\": \"CCI-000166\"\n  tag \"nist\": [\"AU-10\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator, review the current\nlog_line_prefix settings by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW log_line_prefix\\\"\n\nIf log_line_prefix does not contain at least '< %m %a %u %d %r %p %m >', this is a\nfinding.\n\nNext, review the current shared_preload_libraries' settings by running the following\nSQL:\n\n$ psql -c \\\"SHOW shared_preload_libraries\\\"\n\nIf shared_preload_libraries does not contain \\\"pgaudit\\\", this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nConfigure the database to supply additional auditing information to protect against\na user falsely repudiating having performed organization-defined actions.\n\nUsing pgaudit PostgreSQL can be configured to audit these requests. See\nsupplementary content APPENDIX-B for documentation on installing pgaudit.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nModify the configuration of audit logs to include details identifying the individual\nuser:\n\nFirst, as the database administrator (shown here as \\\"postgres\\\"), edit\npostgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nExtra parameters can be added to the setting log_line_prefix to identify the user:\n\nlog_line_prefix = '< %m %a %u %d %r %p %m >'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\nUse accounts assigned to individual users. Where the application connects to\nPostgreSQL using a standard, shared account, ensure that it also captures the\nindividual user identification and passes it to PostgreSQL.\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW log_line_prefix;', [PG_DB]) do\n    its('output') { should include '%m' }\n    its('output') { should include '%u' }\n    its('output') { should include '%d' }\n    its('output') { should include '%p' }\n    its('output') { should include '%r' }\n    its('output') { should include '%a' }\n  end\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73019.rb",
            "line": 45
          },
          "id": "V-73019",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%m\"",
              "run_time": 0.00013174,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%u\"",
              "run_time": 0.000117461,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%d\"",
              "run_time": 0.00010839,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "failed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%p\"",
              "run_time": 0.000224111,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "expected \"< %m %a %u %d %c %s %r >\" to include \"%p\""
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%r\"",
              "run_time": 0.000123878,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%a\"",
              "run_time": 9.9947e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000152128,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must protect its audit features from unauthorized access.",
          "desc": "Protecting audit data also includes identifying and protecting the tools\nused to view and manipulate log data.\n\nDepending upon the log format and application, system and application log tools may\nprovide the only means to manipulate and manage application and system log data. It\nis, therefore, imperative that access to audit tools be controlled and protected\nfrom unauthorized access.\n\nApplications providing tools to interface with audit data will leverage user\npermissions and roles identifying the user accessing the tools and the corresponding\nrights the user enjoys in order make access decisions regarding the access to audit\ntools.\n\nAudit tools include, but are not limited to, OS-provided audit tools,\nvendor-provided audit tools, and open source audit tools needed to successfully view\nand manipulate audit information system activity and records.\n\nIf an attacker were to gain access to audit tools, he could analyze audit logs for\nsystem weaknesses or weaknesses in the auditing itself. An attacker could also\nmanipulate logs to hide evidence of malicious activity.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000121-DB-000202",
            "gid": "V-73039",
            "rid": "SV-87691r1_rule",
            "stig_id": "PGS9-00-010700",
            "cci": "CCI-001493",
            "nist": [
              "AU-9",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\nvariable. See supplementary content APPENDIX-F for instructions on configuring\nPGDATA. Only the database owner and superuser can alter configuration of PostgreSQL.\n\nMake sure the pg_log directory are owned by postgres user and group:\n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}/pg_log\n\nIf pg_log is not owned by the database owner, this is a finding.\n\nMake sure the data directory are owned by postgres user and group.\n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}\n\nIf PGDATA is not owned by the database owner, this is a finding.\n\nMake sure pgaudit installation is owned by root:\n\n$ sudo su - postgres\n$ ls -la /usr/pgsql-9.5/share/contrib/pgaudit\n\nIf pgaudit installation is not owned by root, this is a finding.\n\nNext, as the database administrator (shown here as \"postgres\"), run the following\nSQL to list all roles and their privileges:\n\n$ sudo su - postgres\n$ psql -x -c \"\\du\"\n\nIf any role has \"superuser\" that should not, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nIf pg_log or data directory are not owned by postgres user and group, configure them\nas follows:\n\n$ sudo chown -R postgres:postgres ${PGDATA?}\n\nIf the pgaudit installation is not owned by root user and group, configure it as\nfollows:\n\n$ sudo chown -R root:root /usr/pgsql-9.5/share/contrib/pgaudit.\n\nTo remove superuser from a role, as the database administrator (shown here as\n\"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"ALTER ROLE <role-name> WITH NOSUPERUSER\""
          },
          "code": "control \"V-73039\" do\n  title \"PostgreSQL must protect its audit features from unauthorized access.\"\n  desc  \"Protecting audit data also includes identifying and protecting the tools\nused to view and manipulate log data.\n\nDepending upon the log format and application, system and application log tools may\nprovide the only means to manipulate and manage application and system log data. It\nis, therefore, imperative that access to audit tools be controlled and protected\nfrom unauthorized access.\n\nApplications providing tools to interface with audit data will leverage user\npermissions and roles identifying the user accessing the tools and the corresponding\nrights the user enjoys in order make access decisions regarding the access to audit\ntools.\n\nAudit tools include, but are not limited to, OS-provided audit tools,\nvendor-provided audit tools, and open source audit tools needed to successfully view\nand manipulate audit information system activity and records.\n\nIf an attacker were to gain access to audit tools, he could analyze audit logs for\nsystem weaknesses or weaknesses in the auditing itself. An attacker could also\nmanipulate logs to hide evidence of malicious activity.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000121-DB-000202\"\n  tag \"gid\": \"V-73039\"\n  tag \"rid\": \"SV-87691r1_rule\"\n  tag \"stig_id\": \"PGS9-00-010700\"\n  tag \"cci\": \"CCI-001493\"\n  tag \"nist\": [\"AU-9\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\nvariable. See supplementary content APPENDIX-F for instructions on configuring\nPGDATA. Only the database owner and superuser can alter configuration of PostgreSQL.\n\nMake sure the pg_log directory are owned by postgres user and group:\n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}/pg_log\n\nIf pg_log is not owned by the database owner, this is a finding.\n\nMake sure the data directory are owned by postgres user and group.\n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}\n\nIf PGDATA is not owned by the database owner, this is a finding.\n\nMake sure pgaudit installation is owned by root:\n\n$ sudo su - postgres\n$ ls -la /usr/pgsql-9.5/share/contrib/pgaudit\n\nIf pgaudit installation is not owned by root, this is a finding.\n\nNext, as the database administrator (shown here as \\\"postgres\\\"), run the following\nSQL to list all roles and their privileges:\n\n$ sudo su - postgres\n$ psql -x -c \\\"\\\\du\\\"\n\nIf any role has \\\"superuser\\\" that should not, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nIf pg_log or data directory are not owned by postgres user and group, configure them\nas follows:\n\n$ sudo chown -R postgres:postgres ${PGDATA?}\n\nIf the pgaudit installation is not owned by root user and group, configure it as\nfollows:\n\n$ sudo chown -R root:root /usr/pgsql-9.5/share/contrib/pgaudit.\n\nTo remove superuser from a role, as the database administrator (shown here as\n\\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"ALTER ROLE <role-name> WITH NOSUPERUSER\\\"\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  describe directory(log_directory) do\n    it { should be_owned_by PG_OWNER }\n    it { should be_grouped_into PG_GROUP }\n  end\n\n  describe directory(PG_DATA) do\n    it { should be_owned_by PG_OWNER }\n    it { should be_grouped_into PG_GROUP }\n  end\n\n  describe command(\"find #{PG_SHARED_LIBS.join(' ')} -type f -iname '*pgaudit*' ! -user root\") do\n    its('stdout') { should eq '' }\n    its('stderr') { should eq '' }\n  end\n\n  sql.query('\\du', [PG_DB]).output.split(\"\\n\").each do |row|\n    role, attributes, member_of = row.split('|')\n    unless PG_SUPERUSERS.include?(role)\n      describe attributes do\n        it { should_not match /Superuser/ }\n      end\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73039.rb",
            "line": 87
          },
          "id": "V-73039",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql should be owned by \"vcap\"",
              "run_time": 0.011149582,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql should be grouped into \"vcap\"",
              "run_time": 0.000227752,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data should be owned by \"vcap\"",
              "run_time": 0.000361635,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data should be grouped into \"vcap\"",
              "run_time": 0.000178473,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find /usr/lib/postgresql/9.5/bin /usr/lib/postgresql/9.5/lib /usr/include/postgresql/9.5 /usr/share/postgresql/9.5 -type f -iname '*pgaudit*' ! -user root stdout should eq \"\"",
              "run_time": 0.025337273,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find /usr/lib/postgresql/9.5/bin /usr/lib/postgresql/9.5/lib /usr/include/postgresql/9.5 /usr/share/postgresql/9.5 -type f -iname '*pgaudit*' ! -user root stderr should eq \"\"",
              "run_time": 0.000241666,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Cannot login should not match /Superuser/",
              "run_time": 0.000170783,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Create role, Create DB, Cannot login should not match /Superuser/",
              "run_time": 0.000104877,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Replication should not match /Superuser/",
              "run_time": 9.5948e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL, when utilizing PKI-based authentication, must validate\n  certificates by performing RFC 5280-compliant certification path validation.",
          "desc": "The DoD standard for authentication is DoD-approved PKI certificates.\n  A certificate’s certification path is the path from the end entity certificate\n  to a trusted root certification authority (CA). Certification path validation\n  is necessary for a relying party to make an informed decision regarding\n  acceptance of an end entity certificate. Certification path validation\n  includes checks such as certificate issuer trust, time validity and revocation\n  status for each certificate in the certification path. Revocation status\n  information for CA and subject certificates in a certification path is\n  commonly provided via certificate revocation lists (CRLs) or online\n  certificate status protocol (OCSP) responses.\n  Database Management Systems that do not validate certificates by performing\n  RFC 5280-compliant certification path validation are in danger of accepting\n  certificates that are invalid and/or counterfeit. This could allow unauthorized\n  access to the database.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000175-DB-000067",
            "gid": "V-72979",
            "rid": "SV-87631r1_rule",
            "stig_id": "PGS9-00-007000",
            "cci": "CCI-000185",
            "nist": [
              "IA-5 (2) (a)",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To verify that a CRL file exists, as the database administrator (shown here as\n  \"postgres\"), run the following:\n  $ sudo su - postgres\n  $ psql -c \"SHOW ssl_crl_file\"\n  If this is not set to a CRL file, this is a finding.\n  Next verify the existence of the CRL file by checking the directory set in\n  postgresql.conf in the ssl_crl_file parameter from above:\n  Note: If no directory is specified, then the CRL file should be located in the\n  same directory as postgresql.conf (PGDATA).\n  If the CRL file does not exist, this is a finding.\n  Next, verify that hostssl entries in pg_hba.conf have \"cert\" and\n  \"clientcert=1\" enabled:\n  $ sudo su - postgres\n  $ grep hostssl ${PGDATA?}/postgresql.conf\n  If hostssl entries does not contain cert or clientcert=1, this is a finding.\n  If certificates are not being validated by performing RFC 5280-compliant\n  certification path validation, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To configure PostgreSQL to use SSL, see supplementary content APPENDIX-G.\n  To generate a Certificate Revocation List, see the official Red Hat\n  Documentation:\n  https://access.redhat.com/documentation/en-US/Red_Hat_Update_Infrastructure/\n  2.1/html/Administration_Guide/chap-Red_Hat_Update_Infrastructure-\n  Administration_Guide-Certification_Revocation_List_CRL.html\n  As the database administrator (shown here as \"postgres\"), copy the CRL file\n  into the data directory:\n  First, as the system administrator, copy the CRL file into the PostgreSQL Data\n  Directory:\n  $ sudo cp root.crl ${PGDATA?}/root.crl\n  As the database administrator (shown here as \"postgres\"), set the\n  ssl_crl_file parameter to the filename of the CRL:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  ssl_crl_file = 'root.crl'\n  Next, in pg_hba.conf, require ssl authentication:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n  hostssl <database> <user> <address> cert clientcert=1\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72979\" do\n  title \"PostgreSQL, when utilizing PKI-based authentication, must validate\n  certificates by performing RFC 5280-compliant certification path validation.\"\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\n  A certificate’s certification path is the path from the end entity certificate\n  to a trusted root certification authority (CA). Certification path validation\n  is necessary for a relying party to make an informed decision regarding\n  acceptance of an end entity certificate. Certification path validation\n  includes checks such as certificate issuer trust, time validity and revocation\n  status for each certificate in the certification path. Revocation status\n  information for CA and subject certificates in a certification path is\n  commonly provided via certificate revocation lists (CRLs) or online\n  certificate status protocol (OCSP) responses.\n  Database Management Systems that do not validate certificates by performing\n  RFC 5280-compliant certification path validation are in danger of accepting\n  certificates that are invalid and/or counterfeit. This could allow unauthorized\n  access to the database.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000175-DB-000067\"\n  tag \"gid\": \"V-72979\"\n  tag \"rid\": \"SV-87631r1_rule\"\n  tag \"stig_id\": \"PGS9-00-007000\"\n  tag \"cci\": \"CCI-000185\"\n  tag \"nist\": [\"IA-5 (2) (a)\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To verify that a CRL file exists, as the database administrator (shown here as\n  \\\"postgres\\\"), run the following:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW ssl_crl_file\\\"\n  If this is not set to a CRL file, this is a finding.\n  Next verify the existence of the CRL file by checking the directory set in\n  postgresql.conf in the ssl_crl_file parameter from above:\n  Note: If no directory is specified, then the CRL file should be located in the\n  same directory as postgresql.conf (PGDATA).\n  If the CRL file does not exist, this is a finding.\n  Next, verify that hostssl entries in pg_hba.conf have \\\"cert\\\" and\n  \\\"clientcert=1\\\" enabled:\n  $ sudo su - postgres\n  $ grep hostssl ${PGDATA?}/postgresql.conf\n  If hostssl entries does not contain cert or clientcert=1, this is a finding.\n  If certificates are not being validated by performing RFC 5280-compliant\n  certification path validation, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To configure PostgreSQL to use SSL, see supplementary content APPENDIX-G.\n  To generate a Certificate Revocation List, see the official Red Hat\n  Documentation:\n  https://access.redhat.com/documentation/en-US/Red_Hat_Update_Infrastructure/\n  2.1/html/Administration_Guide/chap-Red_Hat_Update_Infrastructure-\n  Administration_Guide-Certification_Revocation_List_CRL.html\n  As the database administrator (shown here as \\\"postgres\\\"), copy the CRL file\n  into the data directory:\n  First, as the system administrator, copy the CRL file into the PostgreSQL Data\n  Directory:\n  $ sudo cp root.crl ${PGDATA?}/root.crl\n  As the database administrator (shown here as \\\"postgres\\\"), set the\n  ssl_crl_file parameter to the filename of the CRL:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  ssl_crl_file = 'root.crl'\n  Next, in pg_hba.conf, require ssl authentication:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n  hostssl <database> <user> <address> cert clientcert=1\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW ssl_crl_file;', [PG_DB]) do\n    its('output') { should match /\\w*\\.crl/ }\n  end\n\n  ssl_crl_file = sql.query('SHOW ssl_crl_file;', [PG_DB]).output\n  if not ssl_crl_file.include?('/') and not ssl_crl_file.empty?\n    ssl_crl_file = \"#{PG_DATA}/#{ssl_crl_file}\"\n  end\n\n  describe file(ssl_crl_file) do\n    it { should be_file }\n  end\n\n  # @todo use postgres_hba_conf resource\n  describe command(\"awk '$1 == \\\"hostssl\\\" {print}' #{PG_DATA}/pg_hba.conf\") do\n    its('stdout') { should match /(cert[\\s\\w]+clientcert=1|^$)/ }\n    its('stderr') { should eq '' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72979.rb",
            "line": 52
          },
          "id": "V-72979",
          "results": [
            {
              "status": "failed",
              "code_desc": "PostgreSQL query: SHOW ssl_crl_file; output should match /\\w*\\.crl/",
              "run_time": 0.000754905,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "expected \"\" to match /\\w*\\.crl/\nDiff:\n@@ -1,2 +1,2 @@\n-/\\w*\\.crl/\n+\"\"\n"
            },
            {
              "status": "failed",
              "code_desc": "File  should be file",
              "run_time": 0.00065765,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "expected `File .file?` to return true, got false"
            },
            {
              "status": "passed",
              "code_desc": "Command awk '$1 == \"hostssl\" {print}' /var/vcap/store/postgresql/data/pg_hba.conf stdout should match /(cert[\\s\\w]+clientcert=1|^$)/",
              "run_time": 0.02175633,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command awk '$1 == \"hostssl\" {print}' /var/vcap/store/postgresql/data/pg_hba.conf stderr should eq \"\"",
              "run_time": 0.000227952,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records for all privileged activities or\n  other system-level access.",
          "desc": "Without tracking privileged activity, it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n  System documentation should include a definition of the functionality\n  considered privileged.\n  A privileged function in this context is any operation that modifies the\n  structure of the database, its built-in logic, or its security settings.\n  This would include all Data Definition Language (DDL) statements and all\n  security-related statements. In an SQL environment, it encompasses, but is not\n  necessarily limited to:\n  CREATE\n  ALTER\n  DROP\n  GRANT\n  REVOKE\n  There may also be Data Manipulation Language (DML) statements that, subject to\n  context, should be regarded as privileged. Possible examples in SQL include:\n  TRUNCATE TABLE;DELETE, or DELETE affecting more than n rows, for some n, or\n  DELETE without a WHERE clause;\n  UPDATE or UPDATE affecting more than n rows, for some n, or UPDATE without a\n  WHERE clause;\n  any SELECT, INSERT, UPDATE, or DELETE to an application-defined security table\n  executed by other than a security principal.\n  Depending on the capabilities of PostgreSQL and the design of the database and\n  associated applications, audit logging may be achieved by means of DBMS\n  auditing features, database triggers, other mechanisms, or a combination of\n  these.\n  Note: That it is particularly important to audit, and tightly control, any\n  action that weakens the implementation of this requirement itself, since the\n  objective is to have a complete audit trail of all administrative activity.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000504-DB-000354",
            "gid": "V-72953",
            "rid": "SV-87605r1_rule",
            "stig_id": "PGS9-00-005800",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  shared_preload_libraries = ‘pgaudit’\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72953\" do\n  title \"PostgreSQL must generate audit records for all privileged activities or\n  other system-level access.\"\n  desc  \"Without tracking privileged activity, it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n  System documentation should include a definition of the functionality\n  considered privileged.\n  A privileged function in this context is any operation that modifies the\n  structure of the database, its built-in logic, or its security settings.\n  This would include all Data Definition Language (DDL) statements and all\n  security-related statements. In an SQL environment, it encompasses, but is not\n  necessarily limited to:\n  CREATE\n  ALTER\n  DROP\n  GRANT\n  REVOKE\n  There may also be Data Manipulation Language (DML) statements that, subject to\n  context, should be regarded as privileged. Possible examples in SQL include:\n  TRUNCATE TABLE;DELETE, or DELETE affecting more than n rows, for some n, or\n  DELETE without a WHERE clause;\n  UPDATE or UPDATE affecting more than n rows, for some n, or UPDATE without a\n  WHERE clause;\n  any SELECT, INSERT, UPDATE, or DELETE to an application-defined security table\n  executed by other than a security principal.\n  Depending on the capabilities of PostgreSQL and the design of the database and\n  associated applications, audit logging may be achieved by means of DBMS\n  auditing features, database triggers, other mechanisms, or a combination of\n  these.\n  Note: That it is particularly important to audit, and tightly control, any\n  action that weakens the implementation of this requirement itself, since the\n  objective is to have a complete audit trail of all administrative activity.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000504-DB-000354\"\n  tag \"gid\": \"V-72953\"\n  tag \"rid\": \"SV-87605r1_rule\"\n  tag \"stig_id\": \"PGS9-00-005800\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \\\"SHOW pgaudit.log\\\"\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  shared_preload_libraries = ‘pgaudit’\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'ddl' }\n    its('output') { should include 'read' }\n    its('output') { should include 'role' }\n    its('output') { should include 'write' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72953.rb",
            "line": 46
          },
          "id": "V-72953",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000339732,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
              "run_time": 0.000584442,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
              "run_time": 0.000362717,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 0.001964363,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 0.001341668,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "The audit information produced by PostgreSQL must be protected from\n  unauthorized deletion.",
          "desc": "If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is impossible to achieve.\n  To ensure the veracity of audit data, the information system and/or the\n  application must protect audit information from unauthorized deletion. This\n  requirement can be achieved through multiple methods which will depend upon\n  system architecture and design.\n  Some commonly employed methods include: ensuring log files enjoy the proper\n  file system permissions utilizing file system protections; restricting access;\n  and backing up log data to ensure log data is retained.\n  Applications providing a user interface to audit data will leverage user\n  permissions and roles identifying the user accessing the data and the\n  corresponding rights the user enjoys in order make access decisions regarding\n  the deletion of audit data.\n  Audit information includes all information (e.g., audit records, audit\n  settings, and audit reports) needed to successfully audit information system\n  activity.\n  Deletion of database audit data could mask the theft of, or the unauthorized\n  modification of, sensitive data stored in the database.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000120-DB-000061",
            "gid": "V-72885",
            "rid": "SV-87537r1_rule",
            "stig_id": "PGS9-00-002300",
            "cci": "CCI-000164",
            "nist": [
              "AU-9",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Review locations of audit logs, both internal to the database and database\n  audit logs located at the operating system level.\n  Verify there are appropriate controls and permissions to protect the audit\n  information from unauthorized modification.\n  #### stderr Logging\n  If the PostgreSQL server is configured to use stderr for logging, the logs\n  will be owned by the database administrator (shown here as \"postgres\") with\n  a default permissions level of 0600. The permissions can be configured in\n  postgresql.conf.\n  To check the permissions for log files in postgresql.conf, as the database\n  administrator (shown here as \"postgres\"), run the following command:\n\n  $ sudo su - postgres\n  $ grep \"log_file_mode\" ${PGDATA?}/postgresql.conf\n\n  If the permissions are not 0600, this is a finding.\n\n  Next, navigate to where the logs are stored. This can be found by running the\n  following command against postgresql.conf as the database administrator (shown\n  here as \"postgres\"):\n\n  $ sudo su - postgres\n  $ grep \"log_directory\" ${PGDATA?}/postgresql.conf\n\n  With the log directory identified, as the database administrator (shown here\n  as \"postgres\"), list the permissions of the logs:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}/pg_log\n\n  If logs are not owned by the database administrator (shown here as\n  \"postgres\") and are not the same permissions as configured in\n  postgresql.conf, this is a finding.\n  \n  #### syslog Logging\n  If the PostgreSQL server is configured to use syslog for logging, consult the\n  organizations syslog setting for permissions and ownership of logs.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  By default, the database administrator account is not accessible by\n  unauthorized users. Only grant access to this account if required for operations.\n  #### stderr Logging\n  By default, the database administrator account is not accessible by\n  unauthorized users. Only grant access to this account if required for\n  operations.\n  With stderr logging enabled, as the database administrator (shown here as\n  \"postgres\"), set the following parameter in postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_file_mode = 0600\n  #### syslog Logging\n  Check with the organization to see how syslog facilities are defined in their\n  organization."
          },
          "code": "control \"V-72885\" do\n  title \"The audit information produced by PostgreSQL must be protected from\n  unauthorized deletion.\"\n  desc  \"If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is impossible to achieve.\n  To ensure the veracity of audit data, the information system and/or the\n  application must protect audit information from unauthorized deletion. This\n  requirement can be achieved through multiple methods which will depend upon\n  system architecture and design.\n  Some commonly employed methods include: ensuring log files enjoy the proper\n  file system permissions utilizing file system protections; restricting access;\n  and backing up log data to ensure log data is retained.\n  Applications providing a user interface to audit data will leverage user\n  permissions and roles identifying the user accessing the data and the\n  corresponding rights the user enjoys in order make access decisions regarding\n  the deletion of audit data.\n  Audit information includes all information (e.g., audit records, audit\n  settings, and audit reports) needed to successfully audit information system\n  activity.\n  Deletion of database audit data could mask the theft of, or the unauthorized\n  modification of, sensitive data stored in the database.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000120-DB-000061\"\n  tag \"gid\": \"V-72885\"\n  tag \"rid\": \"SV-87537r1_rule\"\n  tag \"stig_id\": \"PGS9-00-002300\"\n  tag \"cci\": \"CCI-000164\"\n  tag \"nist\": [\"AU-9\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Review locations of audit logs, both internal to the database and database\n  audit logs located at the operating system level.\n  Verify there are appropriate controls and permissions to protect the audit\n  information from unauthorized modification.\n  #### stderr Logging\n  If the PostgreSQL server is configured to use stderr for logging, the logs\n  will be owned by the database administrator (shown here as \\\"postgres\\\") with\n  a default permissions level of 0600. The permissions can be configured in\n  postgresql.conf.\n  To check the permissions for log files in postgresql.conf, as the database\n  administrator (shown here as \\\"postgres\\\"), run the following command:\n\n  $ sudo su - postgres\n  $ grep \\\"log_file_mode\\\" ${PGDATA?}/postgresql.conf\n\n  If the permissions are not 0600, this is a finding.\n\n  Next, navigate to where the logs are stored. This can be found by running the\n  following command against postgresql.conf as the database administrator (shown\n  here as \\\"postgres\\\"):\n\n  $ sudo su - postgres\n  $ grep \\\"log_directory\\\" ${PGDATA?}/postgresql.conf\n\n  With the log directory identified, as the database administrator (shown here\n  as \\\"postgres\\\"), list the permissions of the logs:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}/pg_log\n\n  If logs are not owned by the database administrator (shown here as\n  \\\"postgres\\\") and are not the same permissions as configured in\n  postgresql.conf, this is a finding.\n  \n  #### syslog Logging\n  If the PostgreSQL server is configured to use syslog for logging, consult the\n  organizations syslog setting for permissions and ownership of logs.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  By default, the database administrator account is not accessible by\n  unauthorized users. Only grant access to this account if required for operations.\n  #### stderr Logging\n  By default, the database administrator account is not accessible by\n  unauthorized users. Only grant access to this account if required for\n  operations.\n  With stderr logging enabled, as the database administrator (shown here as\n  \\\"postgres\\\"), set the following parameter in postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_file_mode = 0600\n  #### syslog Logging\n  Check with the organization to see how syslog facilities are defined in their\n  organization.\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  if sql.query('SHOW log_destination;', [PG_DB]).output == 'stderr'\n\n    log_directory = ''\n    if postgres_conf(PG_USER_DEFINED_CONF).log_directory.nil?\n      log_directory = postgres_conf(PG_CONF).log_directory\n    else\n      log_directory = postgres_conf(PG_USER_DEFINED_CONF).log_directory\n    end\n\n    log_file_mode = ''\n    if postgres_conf(PG_USER_DEFINED_CONF).log_file_mode.nil?\n      log_file_mode = postgres_conf(PG_CONF).log_file_mode\n    else\n      log_file_mode = postgres_conf(PG_USER_DEFINED_CONF).log_file_mode\n    end\n\n    describe log_file_mode do\n      it { should eq '0600' }\n    end\n\n    describe directory(log_directory) do\n      it { should be_owned_by PG_OWNER }\n      its('mode') { should cmp '0700' }\n    end\n\n    describe command(\"find -L #{log_directory} -type f -name 'postgresql-*.log' ! -perm #{log_file_mode} -or ! -user #{PG_OWNER}\") do\n      its('stdout') { should eq '' }\n      its('stderr') { should eq '' }\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72885.rb",
            "line": 69
          },
          "id": "V-72885",
          "results": [
            {
              "status": "passed",
              "code_desc": "0600 should eq \"0600\"",
              "run_time": 0.000608286,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql should be owned by \"vcap\"",
              "run_time": 0.002616256,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "failed",
              "code_desc": "File /var/vcap/sys/log/postgresql mode should cmp == \"0700\"",
              "run_time": 0.002217199,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "\nexpected: \"0700\"\n     got: \"0750\"\n\n(compared using `cmp` matcher)\n"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user vcap stdout should eq \"\"",
              "run_time": 0.067889455,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user vcap stderr should eq \"\"",
              "run_time": 0.00019236,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must maintain the confidentiality and integrity of\n  information during reception.",
          "desc": "Information can be either unintentionally or maliciously disclosed or\n  modified during reception, including, for example, during aggregation, at\n  protocol transformation points, and during packing/unpacking. These\n  unauthorized disclosures or modifications compromise the confidentiality or\n  integrity of the information.\n  This requirement applies only to those applications that are either\n  distributed or can allow access to data nonlocally. Use of this requirement\n  will be limited to situations where the data owner has a strict requirement\n  for ensuring data integrity and confidentiality is maintained at every step of\n  the data transfer and handling process.\n  When receiving data, PostgreSQL, associated applications, and infrastructure\n  must leverage protection mechanisms.\n  PostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c; while the name\n  is misleading, this function enables only TLS encryption methods, not SSL.\n  See OpenSSL: https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.htm.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000442-DB-000379",
            "gid": "V-72895",
            "rid": "SV-87547r1_rule",
            "stig_id": "PGS9-00-003000",
            "cci": "CCI-002422",
            "nist": [
              "SC-8 (2)",
              "Rev_4"
            ],
            "check": "If the data owner does not have a strict requirement for\n  ensuring data integrity and confidentiality is maintained at every step of the\n  data transfer and handling process, this is not a finding.\n\n  As the database administrator (shown here as \"postgres\"), verify SSL is\n  enabled in postgresql.conf by:\n\n  First, open the postgresql.conf file and ensure the ssl paramater is set to on:\n\n  $ vi <pg_conf_dir>/postgresql.conf\n  $ ssl = 'on'\n\n  is set and not commented out with a '#'.\n\n  Second, run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"SHOW ssl\"\n\n  If SSL is off, this is a finding.\n\n  If PostgreSQL, associated applications, and infrastructure do not employ\n  protective measures against unauthorized disclosure and modification during\n  reception, this is a finding.",
            "fix": "Implement protective measures against unauthorized disclosure and\n  modification during reception.\n  To configure PostgreSQL to use SSL, see supplementary content APPENDIX-G for\n  instructions on enabling SSL."
          },
          "code": "control \"V-72895\" do\n  title \"PostgreSQL must maintain the confidentiality and integrity of\n  information during reception.\"\n  desc  \"Information can be either unintentionally or maliciously disclosed or\n  modified during reception, including, for example, during aggregation, at\n  protocol transformation points, and during packing/unpacking. These\n  unauthorized disclosures or modifications compromise the confidentiality or\n  integrity of the information.\n  This requirement applies only to those applications that are either\n  distributed or can allow access to data nonlocally. Use of this requirement\n  will be limited to situations where the data owner has a strict requirement\n  for ensuring data integrity and confidentiality is maintained at every step of\n  the data transfer and handling process.\n  When receiving data, PostgreSQL, associated applications, and infrastructure\n  must leverage protection mechanisms.\n  PostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c; while the name\n  is misleading, this function enables only TLS encryption methods, not SSL.\n  See OpenSSL: https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.htm.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000442-DB-000379\"\n  tag \"gid\": \"V-72895\"\n  tag \"rid\": \"SV-87547r1_rule\"\n  tag \"stig_id\": \"PGS9-00-003000\"\n  tag \"cci\": \"CCI-002422\"\n  tag \"nist\": [\"SC-8 (2)\", \"Rev_4\"]\n  tag \"check\": \"If the data owner does not have a strict requirement for\n  ensuring data integrity and confidentiality is maintained at every step of the\n  data transfer and handling process, this is not a finding.\n\n  As the database administrator (shown here as \\\"postgres\\\"), verify SSL is\n  enabled in postgresql.conf by:\n\n  First, open the postgresql.conf file and ensure the ssl paramater is set to on:\n\n  $ vi <pg_conf_dir>/postgresql.conf\n  $ ssl = 'on'\n\n  is set and not commented out with a '#'.\n\n  Second, run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW ssl\\\"\n\n  If SSL is off, this is a finding.\n\n  If PostgreSQL, associated applications, and infrastructure do not employ\n  protective measures against unauthorized disclosure and modification during\n  reception, this is a finding.\"\n\n  tag \"fix\": \"Implement protective measures against unauthorized disclosure and\n  modification during reception.\n  To configure PostgreSQL to use SSL, see supplementary content APPENDIX-G for\n  instructions on enabling SSL.\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW ssl;', [PG_DB]) do\n    its('output') { should_not match /(off|false)/i }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72895.rb",
            "line": 45
          },
          "id": "V-72895",
          "results": [
            {
              "status": "failed",
              "code_desc": "PostgreSQL query: SHOW ssl; output should not match /(off|false)/i",
              "run_time": 0.000347897,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "expected \"off\" not to match /(off|false)/i\nDiff:\n@@ -1,2 +1,2 @@\n-/(off|false)/i\n+\"off\"\n"
            }
          ]
        },
        {
          "title": "PostgreSQL must produce audit records containing sufficient information to\nestablish what type of events occurred.",
          "desc": "Information system auditing capability is critical for accurate forensic\nanalysis. Without establishing what type of event occurred, it would be difficult to\nestablish, correlate, and investigate the events relating to an incident or identify\nthose responsible for one.\n\nAudit record content that may be necessary to satisfy the requirement of this policy\nincludes, for example, time stamps, user/process identifiers, event descriptions,\nsuccess/fail indications, filenames involved, and access control or flow control\nrules invoked.\n\nAssociating event types with detected events in the application and audit logs\nprovides a means of investigating an attack; recognizing resource utilization or\ncapacity thresholds; or identifying an improperly configured application.\n\nDatabase software is capable of a range of actions on data stored within the\ndatabase. It is important, for accurate forensic analysis, to know exactly what\nactions were performed. This requires specific information regarding the event type\nan audit record is referring to. If event type information is not recorded and\nstored with the audit record, the record itself is of very limited use.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000095-DB-000039",
            "gid": "V-73033",
            "rid": "SV-87685r1_rule",
            "stig_id": "PGS9-00-010400",
            "cci": "CCI-000130",
            "nist": [
              "AU-3",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), verify\nthe current log_line_prefix setting in postgresql.conf:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_line_prefix\"\n\nVerify that the current settings are appropriate for the organization.\n\nThe following is what is possible for logged information:\n\n# %a = application name\n# %u = user name\n# %d = database name\n# %r = remote host and port\n# %h = remote host\n# %p = process ID\n# %t = timestamp without milliseconds\n# %m = timestamp with milliseconds\n# %i = command tag\n# %e = SQL state\n# %c = session ID\n# %l = session line number\n# %s = session start timestamp\n# %v = virtual transaction ID\n# %x = transaction ID (0 if none)\n# %q = stop here in non-session\n# processes\n\nIf the audit record does not log events required by the organization, this is a\nfinding.\n\nNext, verify the current settings of log_connections and log_disconnections by\nrunning the following SQL:\n\n$ psql -c \"SHOW log_connections\"\n$ psql -c \"SHOW log_disconnections\"\n\nIf both settings are off, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nIf logging is enabled the following configurations must be made to log connections,\ndate/time, username and session identifier.\n\nFirst, edit the postgresql.conf file as a privileged user:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nEdit the following parameters based on the organization's needs (minimum\nrequirements are as follows):\n\nlog_connections = on\nlog_disconnections = on\nlog_line_prefix = '< %m %u %d %c: >'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-73033\" do\n  title \"PostgreSQL must produce audit records containing sufficient information to\nestablish what type of events occurred.\"\n  desc  \"Information system auditing capability is critical for accurate forensic\nanalysis. Without establishing what type of event occurred, it would be difficult to\nestablish, correlate, and investigate the events relating to an incident or identify\nthose responsible for one.\n\nAudit record content that may be necessary to satisfy the requirement of this policy\nincludes, for example, time stamps, user/process identifiers, event descriptions,\nsuccess/fail indications, filenames involved, and access control or flow control\nrules invoked.\n\nAssociating event types with detected events in the application and audit logs\nprovides a means of investigating an attack; recognizing resource utilization or\ncapacity thresholds; or identifying an improperly configured application.\n\nDatabase software is capable of a range of actions on data stored within the\ndatabase. It is important, for accurate forensic analysis, to know exactly what\nactions were performed. This requires specific information regarding the event type\nan audit record is referring to. If event type information is not recorded and\nstored with the audit record, the record itself is of very limited use.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000095-DB-000039\"\n  tag \"gid\": \"V-73033\"\n  tag \"rid\": \"SV-87685r1_rule\"\n  tag \"stig_id\": \"PGS9-00-010400\"\n  tag \"cci\": \"CCI-000130\"\n  tag \"nist\": [\"AU-3\", \"Rev_4\"]\n  tag \"check\": \"As the database administrator (shown here as \\\"postgres\\\"), verify\nthe current log_line_prefix setting in postgresql.conf:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW log_line_prefix\\\"\n\nVerify that the current settings are appropriate for the organization.\n\nThe following is what is possible for logged information:\n\n# %a = application name\n# %u = user name\n# %d = database name\n# %r = remote host and port\n# %h = remote host\n# %p = process ID\n# %t = timestamp without milliseconds\n# %m = timestamp with milliseconds\n# %i = command tag\n# %e = SQL state\n# %c = session ID\n# %l = session line number\n# %s = session start timestamp\n# %v = virtual transaction ID\n# %x = transaction ID (0 if none)\n# %q = stop here in non-session\n# processes\n\nIf the audit record does not log events required by the organization, this is a\nfinding.\n\nNext, verify the current settings of log_connections and log_disconnections by\nrunning the following SQL:\n\n$ psql -c \\\"SHOW log_connections\\\"\n$ psql -c \\\"SHOW log_disconnections\\\"\n\nIf both settings are off, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nIf logging is enabled the following configurations must be made to log connections,\ndate/time, username and session identifier.\n\nFirst, edit the postgresql.conf file as a privileged user:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nEdit the following parameters based on the organization's needs (minimum\nrequirements are as follows):\n\nlog_connections = on\nlog_disconnections = on\nlog_line_prefix = '< %m %u %d %c: >'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW log_line_prefix;', [PG_DB]) do\n    its('output') { should eq PG_LOG_LINE_PREFIX }\n  end\n\n  describe sql.query('SHOW log_connections;', [PG_DB]) do\n    its('output') { should_not eq 'off' }\n  end\n\n  describe sql.query('SHOW log_disconnections;', [PG_DB]) do\n    its('output') { should_not eq 'off' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73033.rb",
            "line": 51
          },
          "id": "V-73033",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should eq \"< %m %a %u %d %c %s %r >\"",
              "run_time": 0.00170503,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_connections; output should not eq \"off\"",
              "run_time": 0.000564228,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_disconnections; output should not eq \"off\"",
              "run_time": 0.000834864,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when successful logons or\n  connections occur.",
          "desc": "For completeness of forensic analysis, it is necessary to track\n  who/what (a user or other principal) logs on to PostgreSQL.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000503-DB-000350",
            "gid": "V-72933",
            "rid": "SV-87585r1_rule",
            "stig_id": "PGS9-00-005100",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), check if\n  log_connections is enabled by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_connections\"\n  If log_connections is off, this is a finding.\n  Next, verify the logs that the previous connection to the database was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-02-16 15:54:03.934 EST postgres postgres 56c64b8b.aeb: >LOG: connection\n  authorized: user=postgres database=postgres\n  If an audit record is not generated each time a user (or other principal) logs\n  on or connects to PostgreSQL, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  If logging is enabled the following configurations must be made to log\n  connections, date/time, username, and session identifier.\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Edit the following parameters as such:\n  log_connections = on\n  log_line_prefix = '< %m %u %d %c: >'\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %d is the database\n  * %c is the session ID for the connection\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72933\" do\n  title \"PostgreSQL must generate audit records when successful logons or\n  connections occur.\"\n  desc  \"For completeness of forensic analysis, it is necessary to track\n  who/what (a user or other principal) logs on to PostgreSQL.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000503-DB-000350\"\n  tag \"gid\": \"V-72933\"\n  tag \"rid\": \"SV-87585r1_rule\"\n  tag \"stig_id\": \"PGS9-00-005100\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \\\"postgres\\\"), check if\n  log_connections is enabled by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW log_connections\\\"\n  If log_connections is off, this is a finding.\n  Next, verify the logs that the previous connection to the database was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-02-16 15:54:03.934 EST postgres postgres 56c64b8b.aeb: >LOG: connection\n  authorized: user=postgres database=postgres\n  If an audit record is not generated each time a user (or other principal) logs\n  on or connects to PostgreSQL, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  If logging is enabled the following configurations must be made to log\n  connections, date/time, username, and session identifier.\n  First, as the database administrator (shown here as \\\"postgres\\\"), edit\n  postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Edit the following parameters as such:\n  log_connections = on\n  log_line_prefix = '< %m %u %d %c: >'\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %d is the database\n  * %c is the session ID for the connection\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  time = Time.now\n  describe sql.query('SHOW log_connections;', [PG_DB]) do\n    its('output') { should eq 'on' }\n  end\n\n  timestamp = time.strftime('%Y-%m-%d %H:%M')\n  describe file(current_log) do\n    its('content') { should match /#{Regexp.escape(timestamp)}.*LOG:\\s*connection authorized:\\s*user=#{PG_DBA}\\s*database=#{PG_DB}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72933.rb",
            "line": 46
          },
          "id": "V-72933",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_connections; output should eq \"on\"",
              "run_time": 0.00114578,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /2017\\-06\\-30\\ 21:54.*LOG:\\s*connection authorized:\\s*user=crunchy\\s*database=stig_test_db/",
              "run_time": 0.027183221,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  access security objects occur.",
          "desc": "Changes to the security configuration must be tracked.\n  This requirement applies to situations where security data is retrieved or\n  modified via data manipulation operations, as opposed to via specialized\n  security functionality.\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n  SELECT\n  INSERT\n  UPDATE\n  DELETE\n  EXECUTE\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000492-DB-000333",
            "gid": "V-72921",
            "rid": "SV-87573r1_rule",
            "stig_id": "PGS9-00-004500",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), setup a\n  test schema and revoke users privileges from using it by running the following\n  SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE SCHEMA stig_test_schema AUTHORIZATION postgres\"\n  $ psql -c \"REVOKE ALL ON SCHEMA stig_test_schema FROM public\"\n  $ psql -c \"GRANT ALL ON SCHEMA stig_test_schema TO postgres\"\n  Next, create a test table, insert a value into that table for the following\n  checks by running the following SQL:\n  $ psql -c \"CREATE TABLE stig_test_schema.stig_test_table(id INT)\"\n  $ psql -c \"INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0)\"\n  #### CREATE\nAttempt to CREATE a table in the stig_test_schema schema with a\n  role that does not have privileges by running the following SQL:\n  psql -c \"CREATE ROLE bob; SET ROLE bob; CREATE TABLE\n  stig_test_schema.test_table(id INT);\"\n  ERROR: permission denied for schema stig_test_schema\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 09:55:19.423 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 14\n  < 2016-03-09 09:55:19.423 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  CREATE TABLE stig_test_schema.test_table(id INT);\n  If the denial is not logged, this is a finding.\n  #### INSERT\n  As role bob, attempt to INSERT into the table created earlier, stig_test_table\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; INSERT INTO stig_test_schema.stig_test_table(id)\n  VALUES (0);\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n< 2016-03-09 09:58:30.709 EST postgres\n  56e0393f.186b postgres: >ERROR: permission denied for schema stig_test_schema\n  at character 13\n  < 2016-03-09 09:58:30.709 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0);\n  If the denial is not logged, this is a finding.\n  #### SELECT\n  As role bob, attempt to SELECT from the table created earlier, stig_test_table\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; SELECT * FROM stig_test_schema.stig_test_table;\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 09:57:58.327 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 15\n  < 2016-03-09 09:57:58.327 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  SELECT * FROM stig_test_schema.stig_test_table;\n  If the denial is not logged, this is a finding.\n  #### ALTER\n  As role bob, attempt to ALTER the table created earlier, stig_test_table by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; ALTER TABLE stig_test_schema.stig_test_table ADD\n  COLUMN name TEXT;\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:03:43.765 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  ALTER TABLE stig_test_schema.stig_test_table ADD COLUMN name TEXT;\n  If the denial is not logged, this is a finding.\n  #### UPDATE\n  As role bob, attempt to UPDATE a row created earlier, stig_test_table by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; UPDATE stig_test_schema.stig_test_table SET id=1\n  WHERE id=0;\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:08:27.696 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 8\n  < 2016-03-09 10:08:27.696 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  UPDATE stig_test_schema.stig_test_table SET id=1 WHERE id=0;\n  If the denial is not logged, this is a finding.\n  #### DELETE\n  As role bob, attempt to DELETE a row created earlier, stig_test_table by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; DELETE FROM stig_test_schema.stig_test_table\n  WHERE id=0;\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:09:29.607 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 13\n  < 2016-03-09 10:09:29.607 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  DELETE FROM stig_test_schema.stig_test_table WHERE id=0;\n  If the denial is not logged, this is a finding.\n  #### PREPARE\n  As role bob, attempt to execute a prepared system using PREPARE by running the\n  following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; PREPARE stig_test_plan(int) AS SELECT id FROM\n  stig_test_schema.stig_test_table WHERE id=$1;\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:16:22.628 EST postgres 56e03e02.18e4 postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 46\n  < 2016-03-09 10:16:22.628 EST postgres 56e03e02.18e4 postgres: >STATEMENT:\n  PREPARE stig_test_plan(int) AS SELECT id FROM stig_test_schema.stig_test_table\n  WHERE id=$1;\n  If the denial is not logged, this is a finding.\n  #### DROP\n  As role bob, attempt to DROP the table created earlier stig_test_table by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; DROP TABLE stig_test_schema.stig_test_table;\"\n  Next, as a database administrator (shown here as \"postgres\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:18:55.255 EST postgres 56e03e02.18e4 postgres: >ERROR:\n  permission denied for schema stig_test_schema\n  < 2016-03-09 10:18:55.255 EST postgres 56e03e02.18e4 postgres: >STATEMENT:\n  DROP TABLE stig_test_schema.stig_test_table;\n  If the denial is not logged, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access security objects occur.\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging."
          },
          "code": "control \"V-72921\" do\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\n  access security objects occur.\"\n  desc  \"Changes to the security configuration must be tracked.\n  This requirement applies to situations where security data is retrieved or\n  modified via data manipulation operations, as opposed to via specialized\n  security functionality.\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n  SELECT\n  INSERT\n  UPDATE\n  DELETE\n  EXECUTE\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000492-DB-000333\"\n  tag \"gid\": \"V-72921\"\n  tag \"rid\": \"SV-87573r1_rule\"\n  tag \"stig_id\": \"PGS9-00-004500\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \\\"postgres\\\"), setup a\n  test schema and revoke users privileges from using it by running the following\n  SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE SCHEMA stig_test_schema AUTHORIZATION postgres\\\"\n  $ psql -c \\\"REVOKE ALL ON SCHEMA stig_test_schema FROM public\\\"\n  $ psql -c \\\"GRANT ALL ON SCHEMA stig_test_schema TO postgres\\\"\n  Next, create a test table, insert a value into that table for the following\n  checks by running the following SQL:\n  $ psql -c \\\"CREATE TABLE stig_test_schema.stig_test_table(id INT)\\\"\n  $ psql -c \\\"INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0)\\\"\n  #### CREATE\nAttempt to CREATE a table in the stig_test_schema schema with a\n  role that does not have privileges by running the following SQL:\n  psql -c \\\"CREATE ROLE bob; SET ROLE bob; CREATE TABLE\n  stig_test_schema.test_table(id INT);\\\"\n  ERROR: permission denied for schema stig_test_schema\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 09:55:19.423 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 14\n  < 2016-03-09 09:55:19.423 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  CREATE TABLE stig_test_schema.test_table(id INT);\n  If the denial is not logged, this is a finding.\n  #### INSERT\n  As role bob, attempt to INSERT into the table created earlier, stig_test_table\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SET ROLE bob; INSERT INTO stig_test_schema.stig_test_table(id)\n  VALUES (0);\\\"\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n< 2016-03-09 09:58:30.709 EST postgres\n  56e0393f.186b postgres: >ERROR: permission denied for schema stig_test_schema\n  at character 13\n  < 2016-03-09 09:58:30.709 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0);\n  If the denial is not logged, this is a finding.\n  #### SELECT\n  As role bob, attempt to SELECT from the table created earlier, stig_test_table\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SET ROLE bob; SELECT * FROM stig_test_schema.stig_test_table;\\\"\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 09:57:58.327 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 15\n  < 2016-03-09 09:57:58.327 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  SELECT * FROM stig_test_schema.stig_test_table;\n  If the denial is not logged, this is a finding.\n  #### ALTER\n  As role bob, attempt to ALTER the table created earlier, stig_test_table by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SET ROLE bob; ALTER TABLE stig_test_schema.stig_test_table ADD\n  COLUMN name TEXT;\\\"\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:03:43.765 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  ALTER TABLE stig_test_schema.stig_test_table ADD COLUMN name TEXT;\n  If the denial is not logged, this is a finding.\n  #### UPDATE\n  As role bob, attempt to UPDATE a row created earlier, stig_test_table by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SET ROLE bob; UPDATE stig_test_schema.stig_test_table SET id=1\n  WHERE id=0;\\\"\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:08:27.696 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 8\n  < 2016-03-09 10:08:27.696 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  UPDATE stig_test_schema.stig_test_table SET id=1 WHERE id=0;\n  If the denial is not logged, this is a finding.\n  #### DELETE\n  As role bob, attempt to DELETE a row created earlier, stig_test_table by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SET ROLE bob; DELETE FROM stig_test_schema.stig_test_table\n  WHERE id=0;\\\"\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:09:29.607 EST postgres 56e0393f.186b postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 13\n  < 2016-03-09 10:09:29.607 EST postgres 56e0393f.186b postgres: >STATEMENT:\n  DELETE FROM stig_test_schema.stig_test_table WHERE id=0;\n  If the denial is not logged, this is a finding.\n  #### PREPARE\n  As role bob, attempt to execute a prepared system using PREPARE by running the\n  following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SET ROLE bob; PREPARE stig_test_plan(int) AS SELECT id FROM\n  stig_test_schema.stig_test_table WHERE id=$1;\\\"\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:16:22.628 EST postgres 56e03e02.18e4 postgres: >ERROR:\n  permission denied for schema stig_test_schema at character 46\n  < 2016-03-09 10:16:22.628 EST postgres 56e03e02.18e4 postgres: >STATEMENT:\n  PREPARE stig_test_plan(int) AS SELECT id FROM stig_test_schema.stig_test_table\n  WHERE id=$1;\n  If the denial is not logged, this is a finding.\n  #### DROP\n  As role bob, attempt to DROP the table created earlier stig_test_table by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SET ROLE bob; DROP TABLE stig_test_schema.stig_test_table;\\\"\n  Next, as a database administrator (shown here as \\\"postgres\\\"), verify that\n  the denial was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-09 10:18:55.255 EST postgres 56e03e02.18e4 postgres: >ERROR:\n  permission denied for schema stig_test_schema\n  < 2016-03-09 10:18:55.255 EST postgres 56e03e02.18e4 postgres: >STATEMENT:\n  DROP TABLE stig_test_schema.stig_test_table;\n  If the denial is not logged, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to access security objects occur.\n  All denials are logged if logging is enabled. To ensure that logging is\n  enabled, review supplementary content APPENDIX-C for instructions on enabling\n  logging.\"\n\n  create_schema = \"CREATE SCHEMA stig_test_schema AUTHORIZATION #{PG_OWNER};\"\n  revoke_schema = 'REVOKE ALL ON SCHEMA stig_test_schema FROM public;'\n  grant_schema = \"GRANT ALL ON SCHEMA stig_test_schema TO #{PG_DBA};\"\n  create_table = 'CREATE TABLE stig_test_schema.stig_test_table(id INT);'\n  insert = 'INSERT INTO stig_test_schema.stig_test_table(id) VALUES (0);'\n  drop_role = 'DROP ROLE bob;'\n  drop_table = 'DROP TABLE stig_test_schema.stig_test_table;'\n  drop_schema = 'DROP SCHEMA stig_test_schema;'\n\n  command = 'CREATE ROLE bob; SET ROLE bob; CREATE TABLE stig_test_schema.test_table(id INT);'\n  error = 'permission denied for schema stig_test_schema'\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  sql.query(create_schema, [PG_DB])\n  sql.query(revoke_schema, [PG_DB])\n  sql.query(grant_schema, [PG_DB])\n  sql.query(create_table, [PG_DB])\n  sql.query(insert, [PG_DB])\n\n  describe sql.query(command, [PG_DB]) do\n    it { should match /ERROR:\\s*#{Regexp.escape(error)}/ }\n  end\n\n  sql.query(drop_role, [PG_DB])\n  sql.query(drop_table, [PG_DB])\n  sql.query(drop_schema, [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(error)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(command)}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72921.rb",
            "line": 52
          },
          "id": "V-72921",
          "results": [
            {
              "status": "passed",
              "code_desc": "Can't read run query \"CREATE ROLE bob; SET ROLE bob; CREATE TABLE stig_test_schema.test_table(id INT);\" on postgres_session: \nERROR:  permission denied for schema stig_test_schema\nLINE 1: CREATE ROLE bob; SET ROLE bob; CREATE TABLE stig_test_schema...\n                                                    ^\n should match /ERROR:\\s*permission\\ denied\\ for\\ schema\\ stig_test_schema/",
              "run_time": 0.000594728,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ schema\\ stig_test_schema/",
              "run_time": 0.009844468,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*CREATE\\ ROLE\\ bob;\\ SET\\ ROLE\\ bob;\\ CREATE\\ TABLE\\ stig_test_schema\\.test_table\\(id\\ INT\\);/",
              "run_time": 0.006944362,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "The audit information produced by PostgreSQL must be protected from\n  unauthorized modification.",
          "desc": "If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is impossible to achieve. To ensure the veracity of audit data\n  the information system and/or the application must protect audit information\n  from unauthorized modification. This requirement can be achieved through\n  multiple methods that will depend upon system architecture and design. Some\n  commonly employed methods include ensuring log files enjoy the proper file\n  system permissions and limiting log data locations. Applications providing\n  a user interface to audit data will leverage user permissions and roles\n  identifying the user accessing the data and the corresponding rights that\n  the user enjoys in order to make access decisions regarding the modification\n  of audit data.  Audit information includes all information (e.g., audit\n  records, audit settings, and audit reports) needed to successfully audit\n  information system activity. Modification of database audit data could mask\n  the theft of, or the unauthorized modification of, sensitive data stored in\n  the database.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000119-DB-000060",
            "gid": "V-72847",
            "rid": "SV-87499r1_rule",
            "stig_id": "PGS9-00-000400",
            "cci": "CCI-000163",
            "nist": [
              "AU-9",
              "Rev_4"
            ],
            "check": "Review locations of audit logs, both internal to the database\n  and database audit logs located at the operating system level.  Verify there\n  are appropriate controls and permissions to protect the audit information from\n  unauthorized modification.\n\n  Note: The following instructions use the PGDATA environment variable. See\n  supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\n  #### stderr Logging  If the PostgreSQL server is configured to use stderr for\n  logging, the logs will be owned by the database owner (usually postgres user)\n  with a default permissions level of 0600. The permissions can be configured in\n  postgresql.conf.\n\n  To check the permissions for log files in postgresql.conf, as the database\n  owner (shown here as \"postgres\"), run the following command:\n\n  $ sudo su - postgres\n  $ grep \"log_file_mode\" ${PGDATA?}/postgresql.conf\n\n  If the permissions are not 0600, this is a finding.\n\n  Next, navigate to where the logs are stored. This can be found by running the\n  following command against postgresql.conf as the database owner (shown here as\n  \"postgres\"):\n\n  $ sudo su - postgres\n  $ grep \"log_directory\" ${PGDATA?}/postgresql.conf\n\n  With the log directory identified, as the database owner (shown here as \n\"postgres\"),\n  list the permissions of the logs:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}/pg_log\n\n  If logs are not owned by the database owner (shown here as \"postgres\") and\n  are not the same permissions as configured in postgresql.conf, this is a\n  finding.\n\n  #### syslog Logging\n  If the PostgreSQL server is configured to use syslog for logging, consult\n  the organizations syslog setting for permissions and ownership of logs.",
            "fix": "To ensure that logging is enabled, review supplementary content\n  APPENDIX-C for instructions on enabling logging.  Note: The following\n  instructions use the PGDATA environment variable. See supplementary content\n  APPENDIX-F for instructions on configuring PGDATA.\n  #### stderr Logging\n  With stderr logging enabled, as the database owner (shown here as\n  \"postgres\"), set the following parameter in postgresql.conf:\n\n  $ vi ${PGDATA?}/postgresql.conf\n  log_file_mode = 0600\n\n  To change the owner and permissions of the log files, run the following:\n\n  $ chown postgres:postgres ${PGDATA?}/<log directory name>\n  $ chmod 0700 ${PGDATA?}/<log directory name>\n  $ chmod 600 ${PGDATA?}/<log directory name>/*.log\n\n  #### syslog Logging\n  If PostgreSQL is configured to use syslog for logging, the log files must be\n  configured to be owned by root with 0600 permissions.\n\n  $ chown root:root <log directory name>/<log_filename>\n  $ chmod 0700 <log directory name>\n  $ chmod 0600 <log directory name>/*.log"
          },
          "code": "  control \"V-72847\" do\n  title \"The audit information produced by PostgreSQL must be protected from\n  unauthorized modification.\"\n  desc  \"If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is impossible to achieve. To ensure the veracity of audit data\n  the information system and/or the application must protect audit information\n  from unauthorized modification. This requirement can be achieved through\n  multiple methods that will depend upon system architecture and design. Some\n  commonly employed methods include ensuring log files enjoy the proper file\n  system permissions and limiting log data locations. Applications providing\n  a user interface to audit data will leverage user permissions and roles\n  identifying the user accessing the data and the corresponding rights that\n  the user enjoys in order to make access decisions regarding the modification\n  of audit data.  Audit information includes all information (e.g., audit\n  records, audit settings, and audit reports) needed to successfully audit\n  information system activity. Modification of database audit data could mask\n  the theft of, or the unauthorized modification of, sensitive data stored in\n  the database.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000119-DB-000060\"\n  tag \"gid\": \"V-72847\"\n  tag \"rid\": \"SV-87499r1_rule\"\n  tag \"stig_id\": \"PGS9-00-000400\"\n  tag \"cci\": \"CCI-000163\"\n  tag \"nist\": [\"AU-9\", \"Rev_4\"]\n\n  tag \"check\": \"Review locations of audit logs, both internal to the database\n  and database audit logs located at the operating system level.  Verify there\n  are appropriate controls and permissions to protect the audit information from\n  unauthorized modification.\n\n  Note: The following instructions use the PGDATA environment variable. See\n  supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\n  #### stderr Logging  If the PostgreSQL server is configured to use stderr for\n  logging, the logs will be owned by the database owner (usually postgres user)\n  with a default permissions level of 0600. The permissions can be configured in\n  postgresql.conf.\n\n  To check the permissions for log files in postgresql.conf, as the database\n  owner (shown here as \\\"postgres\\\"), run the following command:\n\n  $ sudo su - postgres\n  $ grep \\\"log_file_mode\\\" ${PGDATA?}/postgresql.conf\n\n  If the permissions are not 0600, this is a finding.\n\n  Next, navigate to where the logs are stored. This can be found by running the\n  following command against postgresql.conf as the database owner (shown here as\n  \\\"postgres\\\"):\n\n  $ sudo su - postgres\n  $ grep \\\"log_directory\\\" ${PGDATA?}/postgresql.conf\n\n  With the log directory identified, as the database owner (shown here as \n\\\"postgres\\\"),\n  list the permissions of the logs:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}/pg_log\n\n  If logs are not owned by the database owner (shown here as \\\"postgres\\\") and\n  are not the same permissions as configured in postgresql.conf, this is a\n  finding.\n\n  #### syslog Logging\n  If the PostgreSQL server is configured to use syslog for logging, consult\n  the organizations syslog setting for permissions and ownership of logs.\"\n\n  tag \"fix\": \"To ensure that logging is enabled, review supplementary content\n  APPENDIX-C for instructions on enabling logging.  Note: The following\n  instructions use the PGDATA environment variable. See supplementary content\n  APPENDIX-F for instructions on configuring PGDATA.\n  #### stderr Logging\n  With stderr logging enabled, as the database owner (shown here as\n  \\\"postgres\\\"), set the following parameter in postgresql.conf:\n\n  $ vi ${PGDATA?}/postgresql.conf\n  log_file_mode = 0600\n\n  To change the owner and permissions of the log files, run the following:\n\n  $ chown postgres:postgres ${PGDATA?}/<log directory name>\n  $ chmod 0700 ${PGDATA?}/<log directory name>\n  $ chmod 600 ${PGDATA?}/<log directory name>/*.log\n\n  #### syslog Logging\n  If PostgreSQL is configured to use syslog for logging, the log files must be\n  configured to be owned by root with 0600 permissions.\n\n  $ chown root:root <log directory name>/<log_filename>\n  $ chmod 0700 <log directory name>\n  $ chmod 0600 <log directory name>/*.log\"\n\n  postgres_conf(PG_USER_DEFINED_CONF).log_destination.nil? ? pg_conf_log_destination = PG_CONF : pg_conf_log_destination = PG_USER_DEFINED_CONF\n  if postgres_conf(pg_conf_log_destination).log_destination == 'stderr'\n\n    postgres_conf(PG_USER_DEFINED_CONF).log_file_mode.nil? ? pg_conf_log_file_mode = PG_CONF : pg_conf_log_file_mode = PG_USER_DEFINED_CONF\n    log_file_mode = postgres_conf(pg_conf_log_file_mode).log_file_mode\n\n    describe postgres_conf(pg_conf_log_file_mode) do\n      its('log_file_mode') { should eq '0600' }\n    end\n\n    postgres_conf(PG_USER_DEFINED_CONF).log_directory.nil? ? pg_conf_log_directory = PG_CONF : pg_conf_log_directory = PG_USER_DEFINED_CONF\n    log_directory = postgres_conf(pg_conf_log_directory).log_directory\n\n    describe directory(log_directory) do\n      it { should be_owned_by PG_OWNER }\n      its('mode') { should cmp '0700' }\n    end\n\n    describe command(\"find -L #{log_directory} -type f -name 'postgresql-*.log' ! -perm #{log_file_mode} -or ! -user #{PG_OWNER}\") do\n      its('stdout') { should eq '' }\n      its('stderr') { should eq '' }\n    end\n  end\n  \nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72847.rb",
            "line": 46
          },
          "id": "V-72847",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL Configuration log_file_mode should eq \"0600\"",
              "run_time": 0.00073568,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql should be owned by \"vcap\"",
              "run_time": 0.000191484,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "failed",
              "code_desc": "File /var/vcap/sys/log/postgresql mode should cmp == \"0700\"",
              "run_time": 0.000874748,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "\nexpected: \"0700\"\n     got: \"0750\"\n\n(compared using `cmp` matcher)\n"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user vcap stdout should eq \"\"",
              "run_time": 0.027761169,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user vcap stderr should eq \"\"",
              "run_time": 0.00040226,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must implement cryptographic mechanisms preventing the\nunauthorized disclosure of organization-defined information at rest on\norganization-defined information system components.",
          "desc": "PostgreSQLs handling data requiring \"data at rest\" protections must\nemploy cryptographic mechanisms to prevent unauthorized disclosure and modification\nof the information at rest. These cryptographic mechanisms may be native to\nPostgreSQL or implemented via additional software or operating system/file system\nsettings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity\nof organizational information. The strength of the mechanism is commensurate with\nthe security category and/or classification of the information. Organizations have\nthe flexibility to either encrypt all information on storage devices (i.e., full\ndisk encryption) or encrypt specific data structures (e.g., files, records, or\nfields).\n\nThe decision whether and what to encrypt rests with the data owner and is also\ninfluenced by the physical measures taken to secure the equipment and media on which\nthe information resides.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000429-DB-000387",
            "gid": "V-73035",
            "rid": "SV-87687r1_rule",
            "stig_id": "PGS9-00-010500",
            "cci": "CCI-002476",
            "nist": [
              "SC-28 (1)",
              "Rev_4"
            ],
            "check": "To check if pgcrypto is installed on PostgreSQL, as a database\nadministrator (shown here as \"postgres\"), run the following command:\n\n$ sudo su - postgres\n$ psql -c \"SELECT * FROM pg_available_extensions where name='pgcrypto'\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a\nfinding.\n\nIf a disk or filesystem requires encryption, ask the system owner, DBA, and SA to\ndemonstrate the use of filesystem and/or disk-level encryption. If this is required\nand is not found, this is a finding.",
            "fix": "Configure PostgreSQL, operating system/file system, and additional\nsoftware as relevant, to provide the required level of cryptographic protection for\ninformation requiring cryptographic protection against disclosure.\n\nSecure the premises, equipment, and media to provide the required level of physical\nprotection.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See\nsupplementary content APPENDIX-E for documentation on installing pgcrypto.\n\nWith pgcrypto installed, it is possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('a_secure_password',\ngen_salt('md5')));"
          },
          "code": "control \"V-73035\" do\n  title \"PostgreSQL must implement cryptographic mechanisms preventing the\nunauthorized disclosure of organization-defined information at rest on\norganization-defined information system components.\"\n  desc  \"PostgreSQLs handling data requiring \\\"data at rest\\\" protections must\nemploy cryptographic mechanisms to prevent unauthorized disclosure and modification\nof the information at rest. These cryptographic mechanisms may be native to\nPostgreSQL or implemented via additional software or operating system/file system\nsettings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity\nof organizational information. The strength of the mechanism is commensurate with\nthe security category and/or classification of the information. Organizations have\nthe flexibility to either encrypt all information on storage devices (i.e., full\ndisk encryption) or encrypt specific data structures (e.g., files, records, or\nfields).\n\nThe decision whether and what to encrypt rests with the data owner and is also\ninfluenced by the physical measures taken to secure the equipment and media on which\nthe information resides.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000429-DB-000387\"\n  tag \"gid\": \"V-73035\"\n  tag \"rid\": \"SV-87687r1_rule\"\n  tag \"stig_id\": \"PGS9-00-010500\"\n  tag \"cci\": \"CCI-002476\"\n  tag \"nist\": [\"SC-28 (1)\", \"Rev_4\"]\n  tag \"check\": \"To check if pgcrypto is installed on PostgreSQL, as a database\nadministrator (shown here as \\\"postgres\\\"), run the following command:\n\n$ sudo su - postgres\n$ psql -c \\\"SELECT * FROM pg_available_extensions where name='pgcrypto'\\\"\n\nIf data in the database requires encryption and pgcrypto is not available, this is a\nfinding.\n\nIf a disk or filesystem requires encryption, ask the system owner, DBA, and SA to\ndemonstrate the use of filesystem and/or disk-level encryption. If this is required\nand is not found, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL, operating system/file system, and additional\nsoftware as relevant, to provide the required level of cryptographic protection for\ninformation requiring cryptographic protection against disclosure.\n\nSecure the premises, equipment, and media to provide the required level of physical\nprotection.\n\nThe pgcrypto module provides cryptographic functions for PostgreSQL. See\nsupplementary content APPENDIX-E for documentation on installing pgcrypto.\n\nWith pgcrypto installed, it is possible to insert encrypted data into the database:\n\nINSERT INTO accounts(username, password) VALUES ('bob', crypt('a_secure_password',\ngen_salt('md5')));\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query(\"SELECT name FROM pg_available_extensions where name='pgcrypto';\", [PG_DB]) do\n    its('output') { should eq 'pgcrypto' }\n  end\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73035.rb",
            "line": 45
          },
          "id": "V-73035",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SELECT name FROM pg_available_extensions where name='pgcrypto'; output should eq \"pgcrypto\"",
              "run_time": 0.000417187,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "The audit information produced by PostgreSQL must be protected from\n  unauthorized read access.",
          "desc": "If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is difficult, if not impossible, to achieve. In addition, access to\n  audit records provides information an attacker could potentially use to his or\n  her advantage.\n  To ensure the veracity of audit data, the information system and/or the\n  application must protect audit information from any and all unauthorized\n  access. This includes read, write, copy, etc.\n  This requirement can be achieved through multiple methods which will depend\n  upon system architecture and design. Some commonly employed methods include\n  ensuring log files enjoy the proper file system permissions utilizing file\n  system protections and limiting log data location.\n  Additionally, applications with user interfaces to audit records should not\n  allow for the unfettered manipulation of or access to those records via the\n  application. If the application provides access to the audit data, the\n  application becomes accountable for ensuring that audit information is\n  protected from unauthorized access.\n  Audit information includes all information (e.g., audit records, audit\n  settings, and audit reports) needed to successfully audit information system\n  activity.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000118-DB-000059",
            "gid": "V-72915",
            "rid": "SV-87567r1_rule",
            "stig_id": "PGS9-00-004200",
            "cci": "CCI-000162",
            "nist": [
              "AU-9",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Review locations of audit logs, both internal to the database and database\n  audit logs located at the operating system level.\n  Verify there are appropriate controls and permissions to protect the audit\n  information from unauthorized access.\n  #### syslog Logging\n  If PostgreSQL is configured to use syslog for logging, consult the\n  organizations location and permissions for syslog log files.\n  #### stderr Logging\n  As the database administrator (shown here as \"postgres\"), check the current\n  log_file_mode configuration by running the following:\n  Note: Consult the organization's documentation on acceptable log privileges\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_file_mode\"\n  If log_file_mode is not 600, this is a finding.\n  Next, check the current log_destination path by running the following SQL:\n  Note: This is relative to PGDATA.\n  $ psql -c \"SHOW log_destination\"\n  Next, verify the log files have the set configurations in the log_destination:\n  Note: Use location of logs from log_directory.\n  $ ls -l ${PGDATA?}/pg_log/\n  total 32\n  -rw-------. 1 postgres postgres 0 Apr 8 00:00 postgresql-Fri.log\n  -rw-------. 1 postgres postgres 8288 Apr 11 17:36 postgresql-Mon.log\n  -rw-------. 1 postgres postgres 0 Apr 9 00:00 postgresql-Sat.log\n  -rw-------. 1 postgres postgres 0 Apr 10 00:00 postgresql-Sun.log\n  -rw-------. 1 postgres postgres 16212 Apr 7 17:05 postgresql-Thu.log\n  -rw-------. 1 postgres postgres 1130 Apr 6 17:56 postgresql-Wed.log\n  If logs with 600 permissions do not exist in log_destination, this is a\n    finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  #### syslog Logging\n  If PostgreSQL is configured to use syslog for logging, consult the\n  organizations location and permissions for syslog log files.\n  #### stderr Logging\n  If PostgreSQL is configured to use stderr for logging, permissions of the log\n  files can be set in postgresql.conf.\n  As the database administrator (shown here as \"postgres\"), edit the following\n  settings of logs in the postgresql.conf file:\n  Note: Consult the organization's documentation on acceptable log privileges\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_file_mode = 0600\n  Next, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72915\" do\n  title \"The audit information produced by PostgreSQL must be protected from\n  unauthorized read access.\"\n  desc  \"If audit data were to become compromised, then competent forensic\n  analysis and discovery of the true source of potentially malicious system\n  activity is difficult, if not impossible, to achieve. In addition, access to\n  audit records provides information an attacker could potentially use to his or\n  her advantage.\n  To ensure the veracity of audit data, the information system and/or the\n  application must protect audit information from any and all unauthorized\n  access. This includes read, write, copy, etc.\n  This requirement can be achieved through multiple methods which will depend\n  upon system architecture and design. Some commonly employed methods include\n  ensuring log files enjoy the proper file system permissions utilizing file\n  system protections and limiting log data location.\n  Additionally, applications with user interfaces to audit records should not\n  allow for the unfettered manipulation of or access to those records via the\n  application. If the application provides access to the audit data, the\n  application becomes accountable for ensuring that audit information is\n  protected from unauthorized access.\n  Audit information includes all information (e.g., audit records, audit\n  settings, and audit reports) needed to successfully audit information system\n  activity.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000118-DB-000059\"\n  tag \"gid\": \"V-72915\"\n  tag \"rid\": \"SV-87567r1_rule\"\n  tag \"stig_id\": \"PGS9-00-004200\"\n  tag \"cci\": \"CCI-000162\"\n  tag \"nist\": [\"AU-9\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Review locations of audit logs, both internal to the database and database\n  audit logs located at the operating system level.\n  Verify there are appropriate controls and permissions to protect the audit\n  information from unauthorized access.\n  #### syslog Logging\n  If PostgreSQL is configured to use syslog for logging, consult the\n  organizations location and permissions for syslog log files.\n  #### stderr Logging\n  As the database administrator (shown here as \\\"postgres\\\"), check the current\n  log_file_mode configuration by running the following:\n  Note: Consult the organization's documentation on acceptable log privileges\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW log_file_mode\\\"\n  If log_file_mode is not 600, this is a finding.\n  Next, check the current log_destination path by running the following SQL:\n  Note: This is relative to PGDATA.\n  $ psql -c \\\"SHOW log_destination\\\"\n  Next, verify the log files have the set configurations in the log_destination:\n  Note: Use location of logs from log_directory.\n  $ ls -l ${PGDATA?}/pg_log/\n  total 32\n  -rw-------. 1 postgres postgres 0 Apr 8 00:00 postgresql-Fri.log\n  -rw-------. 1 postgres postgres 8288 Apr 11 17:36 postgresql-Mon.log\n  -rw-------. 1 postgres postgres 0 Apr 9 00:00 postgresql-Sat.log\n  -rw-------. 1 postgres postgres 0 Apr 10 00:00 postgresql-Sun.log\n  -rw-------. 1 postgres postgres 16212 Apr 7 17:05 postgresql-Thu.log\n  -rw-------. 1 postgres postgres 1130 Apr 6 17:56 postgresql-Wed.log\n  If logs with 600 permissions do not exist in log_destination, this is a\n    finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  #### syslog Logging\n  If PostgreSQL is configured to use syslog for logging, consult the\n  organizations location and permissions for syslog log files.\n  #### stderr Logging\n  If PostgreSQL is configured to use stderr for logging, permissions of the log\n  files can be set in postgresql.conf.\n  As the database administrator (shown here as \\\"postgres\\\"), edit the following\n  settings of logs in the postgresql.conf file:\n  Note: Consult the organization's documentation on acceptable log privileges\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_file_mode = 0600\n  Next, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  if sql.query('SHOW log_destination;', [PG_DB]).output == 'stderr'\n    log_file_mode = sql.query('SHOW log_file_mode;', [PG_DB]).output\n    describe log_file_mode do\n      it { should eq '0600' }\n    end\n\n    log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n    describe command(\"find -L #{log_directory} -type f -name 'postgresql-*.log' ! -perm #{log_file_mode}\") do\n      its('stdout') { should eq '' }\n      its('stderr') { should eq '' }\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72915.rb",
            "line": 46
          },
          "id": "V-72915",
          "results": [
            {
              "status": "passed",
              "code_desc": "0600 should eq \"0600\"",
              "run_time": 0.000120503,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 stdout should eq \"\"",
              "run_time": 0.019576467,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 stderr should eq \"\"",
              "run_time": 0.000283611,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful logons or\n  connection attempts occur.",
          "desc": "For completeness of forensic analysis, it is necessary to track failed\n  attempts to log on to PostgreSQL. While positive identification may not be\n  possible in a case of failed authentication, as much information as possible\n  about the incident must be captured.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000503-DB-000351",
            "gid": "V-72923",
            "rid": "SV-87575r1_rule",
            "stig_id": "PGS9-00-004600",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  In this example the user joe will log into the Postgres database unsuccessfully:\n  $ psql -d postgres -U joe\n  As the database administrator (shown here as \"postgres\"), check pg_log for a\n  FATAL connection audit trail:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/postgresql-Tue.log\n  < 2016-02-16 16:18:13.027 EST joe 56c65135.b5f postgres: >LOG: connection\n  authorized: user=joe database=postgres\n  < 2016-02-16 16:18:13.027 EST joe 56c65135.b5f postgres: >FATAL: role \"joe\"\n  does not exist\n  If an audit record is not generated each time a user (or other principal)\n  attempts, but fails to log on or connect to PostgreSQL (including attempts\n  where the user ID is invalid/unknown), this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  If logging is enabled the following configurations must be made to log\n  unsuccessful connections, date/time, username, and session identifier.\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Edit the following parameters:\n  log_connections = on\n  log_line_prefix = '< %m %u %c: >'\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %c is the session ID for the connection\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72923\" do\n  title \"PostgreSQL must generate audit records when unsuccessful logons or\n  connection attempts occur.\"\n  desc  \"For completeness of forensic analysis, it is necessary to track failed\n  attempts to log on to PostgreSQL. While positive identification may not be\n  possible in a case of failed authentication, as much information as possible\n  about the incident must be captured.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000503-DB-000351\"\n  tag \"gid\": \"V-72923\"\n  tag \"rid\": \"SV-87575r1_rule\"\n  tag \"stig_id\": \"PGS9-00-004600\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  In this example the user joe will log into the Postgres database unsuccessfully:\n  $ psql -d postgres -U joe\n  As the database administrator (shown here as \\\"postgres\\\"), check pg_log for a\n  FATAL connection audit trail:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/postgresql-Tue.log\n  < 2016-02-16 16:18:13.027 EST joe 56c65135.b5f postgres: >LOG: connection\n  authorized: user=joe database=postgres\n  < 2016-02-16 16:18:13.027 EST joe 56c65135.b5f postgres: >FATAL: role \\\"joe\\\"\n  does not exist\n  If an audit record is not generated each time a user (or other principal)\n  attempts, but fails to log on or connect to PostgreSQL (including attempts\n  where the user ID is invalid/unknown), this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  If logging is enabled the following configurations must be made to log\n  unsuccessful connections, date/time, username, and session identifier.\n  First, as the database administrator (shown here as \\\"postgres\\\"), edit\n  postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Edit the following parameters:\n  log_connections = on\n  log_line_prefix = '< %m %u %c: >'\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %c is the session ID for the connection\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n  \n  user = 'joe'\n  password = 'badpassword'\n\n  postgres_session(user, password, PG_HOST).query('SELECT now();', [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /FATAL:.*(user|role).*#{Regexp.escape(user)}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72923.rb",
            "line": 46
          },
          "id": "V-72923",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /FATAL:.*(user|role).*joe/",
              "run_time": 0.011956886,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "Access to external executables must be disabled or restricted.",
          "desc": "Information systems are capable of providing a wide variety of functions\nand services. Some of the functions and services, provided by default, may not be\nnecessary to support essential organizational operations (e.g., key missions,\nfunctions).\n\nIt is detrimental for applications to provide, or install by default, functionality\nexceeding requirements or mission objectives.\n\nApplications must adhere to the principles of least functionality by providing only\nessential capabilities.\n\nPostgreSQLs may spawn additional external processes to execute procedures that are\ndefined in PostgreSQL but stored in external host files (external procedures). The\nspawned process used to execute the external procedure may operate within a\ndifferent OS security context than PostgreSQL and provide unauthorized access to the\nhost system.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000141-DB-000093",
            "gid": "V-73009",
            "rid": "SV-87661r1_rule",
            "stig_id": "PGS9-00-009100",
            "cci": "CCI-000381",
            "nist": [
              "CM-7 a",
              "Rev_4"
            ],
            "check": "PostgreSQL’s Copy command can interact with the underlying OS. Only\nsuperuser has access to this command.\n\nFirst, as the database administrator (shown here as \"postgres\"), run the following\nSQL to list all roles and their privileges:\n\n$ sudo su - postgres\n$ psql -x -c \"\\du\"\n\nIf any role has \"superuser\" that should not, this is a finding.\n\nIt is possible for an extension to contain code that could access external\nexecutables via SQL. To list all installed extensions, as the database administrator\n(shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -x -c \"SELECT * FROM pg_available_extensions WHERE installed_version IS NOT\nNULL\"\n\nIf any extensions are installed that are not approved, this is a finding.",
            "fix": "To remove superuser from a role, as the database administrator (shown\nhere as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"ALTER ROLE <role-name> WITH NOSUPERUSER\"\n\nTo remove extensions from PostgreSQL, as the database administrator (shown here as\n\"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"DROP EXTENSION extension_name\""
          },
          "code": "control \"V-73009\" do\n  title \"Access to external executables must be disabled or restricted.\"\n  desc  \"Information systems are capable of providing a wide variety of functions\nand services. Some of the functions and services, provided by default, may not be\nnecessary to support essential organizational operations (e.g., key missions,\nfunctions).\n\nIt is detrimental for applications to provide, or install by default, functionality\nexceeding requirements or mission objectives.\n\nApplications must adhere to the principles of least functionality by providing only\nessential capabilities.\n\nPostgreSQLs may spawn additional external processes to execute procedures that are\ndefined in PostgreSQL but stored in external host files (external procedures). The\nspawned process used to execute the external procedure may operate within a\ndifferent OS security context than PostgreSQL and provide unauthorized access to the\nhost system.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000141-DB-000093\"\n  tag \"gid\": \"V-73009\"\n  tag \"rid\": \"SV-87661r1_rule\"\n  tag \"stig_id\": \"PGS9-00-009100\"\n  tag \"cci\": \"CCI-000381\"\n  tag \"nist\": [\"CM-7 a\", \"Rev_4\"]\n  tag \"check\": \"PostgreSQL’s Copy command can interact with the underlying OS. Only\nsuperuser has access to this command.\n\nFirst, as the database administrator (shown here as \\\"postgres\\\"), run the following\nSQL to list all roles and their privileges:\n\n$ sudo su - postgres\n$ psql -x -c \\\"\\\\du\\\"\n\nIf any role has \\\"superuser\\\" that should not, this is a finding.\n\nIt is possible for an extension to contain code that could access external\nexecutables via SQL. To list all installed extensions, as the database administrator\n(shown here as \\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -x -c \\\"SELECT * FROM pg_available_extensions WHERE installed_version IS NOT\nNULL\\\"\n\nIf any extensions are installed that are not approved, this is a finding.\"\n  tag \"fix\": \"To remove superuser from a role, as the database administrator (shown\nhere as \\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"ALTER ROLE <role-name> WITH NOSUPERUSER\\\"\n\nTo remove extensions from PostgreSQL, as the database administrator (shown here as\n\\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"DROP EXTENSION extension_name\\\"\"\n\n  approved_extensions = PG_APPROVED_EXTENSIONS + PG_TRUSTED_LANGUAGES\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  sql.query('\\du', [PG_DB]).output.split(\"\\n\").each do |row|\n    role, attributes, member_of = row.split('|')\n    unless PG_SUPERUSERS.include?(role)\n      describe attributes do\n        it { should_not match /Superuser/ }\n      end\n    end\n  end\n\n  sql.query('SELECT datname FROM pg_catalog.pg_database;', ['postgres']).output.split(\"\\n\").each do |database|\n    extensions = sql.query('SELECT name FROM pg_available_extensions WHERE installed_version IS NOT NULL;', [database])\n    # Handle connections disabled on database\n    if extensions.methods.include?(:output)\n      extensions.output.split(\"\\n\").each do |extension|\n        describe extension do\n          it { should match /#{approved_extensions.join('|')}/ }\n        end\n      end\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73009.rb",
            "line": 75
          },
          "id": "V-73009",
          "results": [
            {
              "status": "passed",
              "code_desc": "Cannot login should not match /Superuser/",
              "run_time": 0.000310425,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Create role, Create DB, Cannot login should not match /Superuser/",
              "run_time": 0.001310808,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Replication should not match /Superuser/",
              "run_time": 0.001099229,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pgcrypto should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000132993,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "plpgsql should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000370619,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "plpgsql should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000554677,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "plpgsql should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000373867,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "plpgsql should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000409285,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "plpgsql should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.001274723,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "fuzzystrmatch should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000281378,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "postgis_tiger_geocoder should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000163351,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pgcrypto should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000153571,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "plpgsql should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.00031725,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pgaudit should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000522713,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "hstore should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000279788,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "postgis_topology should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.00043026,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "postgis should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.003124739,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must include additional, more detailed, organization-defined\n  information in the audit records for audit events identified by type,\n  location, or subject.",
          "desc": "Crunchy Audit Logs meet all provided to us organization-defined\n        auditable events",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000101-DB-000044",
            "gid": "V-72903",
            "rid": "SV-87555r1_rule",
            "stig_id": "PGS9-00-003500",
            "cci": "CCI-000135",
            "nist": [
              "AU-3 (1)",
              "Rev_4"
            ],
            "check": "Review the system documentation to identify what additional\n  information the organization has determined necessary.\n  Check PostgreSQL settings and existing audit records to verify that all\n  organization-defined additional, more detailed information is in the audit\n  records for audit events identified by type, location, or subject.\n  If any additional information is defined and is not contained in the audit\n  records, this is a finding.",
            "fix": "Configure PostgreSQL audit settings to include all\n  organization-defined detailed information in the audit records for audit\n  events identified by type, location, or subject.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging."
          },
          "code": "control \"V-72903\" do\n  title \"PostgreSQL must include additional, more detailed, organization-defined\n  information in the audit records for audit events identified by type,\n  location, or subject.\"\n  desc  \"Information system auditing capability is critical for accurate\n  forensic analysis. Reconstruction of harmful events or forensic analysis is\n  not possible if audit records do not contain enough information. To support\n  analysis, some types of events will need information to be logged that\n  exceeds the basic requirements of event type, time stamps, location, source,\n  outcome, and user identity. If additional information is not available, it\n  could negatively impact forensic investigations into user actions or other\n  malicious events.\n  The organization must determine what additional information is required for\n  complete analysis of the audited events. The additional information required\n  is dependent on the type of information (e.g., sensitivity of the data and\n  the environment within which it resides). At a minimum, the organization\n  must employ either full-text recording of privileged commands or the\n  individual identities of users of shared accounts, or both. The organization\n  must maintain audit trails in sufficient detail to reconstruct events to\n  determine the cause and impact of compromise.\n  Examples of detailed information the organization may require in audit\n  records are full-text recording of privileged commands or the individual\n  identities of shared account users.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000101-DB-000044\"\n  tag \"gid\": \"V-72903\"\n  tag \"rid\": \"SV-87555r1_rule\"\n  tag \"stig_id\": \"PGS9-00-003500\"\n  tag \"cci\": \"CCI-000135\"\n  tag \"nist\": [\"AU-3 (1)\", \"Rev_4\"]\n  tag \"check\": \"Review the system documentation to identify what additional\n  information the organization has determined necessary.\n  Check PostgreSQL settings and existing audit records to verify that all\n  organization-defined additional, more detailed information is in the audit\n  records for audit events identified by type, location, or subject.\n  If any additional information is defined and is not contained in the audit\n  records, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL audit settings to include all\n  organization-defined detailed information in the audit records for audit\n  events identified by type, location, or subject.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72903.rb",
            "line": 23
          },
          "id": "V-72903",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 1.949e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "Unused database components which are integrated in PostgreSQL and cannot be\nuninstalled must be disabled.",
          "desc": "Information systems are capable of providing a wide variety of functions\nand services. Some of the functions and services, provided by default, may not be\nnecessary to support essential organizational operations (e.g., key missions,\nfunctions).\n\nIt is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\nPostgreSQLs must adhere to the principles of least functionality by providing only\nessential capabilities.\n\nUnused, unnecessary PostgreSQL components increase the attack vector for PostgreSQL\nby introducing additional targets for attack. By minimizing the services and\napplications installed on the system, the number of potential vulnerabilities is\nreduced. Components of the system that are unused and cannot be uninstalled must be\ndisabled. The techniques available for disabling components will vary by DBMS\nproduct, OS and the nature of the component and may include DBMS configuration\nsettings, OS service settings, OS file access security, and DBMS user/role\npermissions.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000141-DB-000092",
            "gid": "V-73011",
            "rid": "SV-87663r1_rule",
            "stig_id": "PGS9-00-009200",
            "cci": "CCI-000381",
            "nist": [
              "CM-7 a",
              "Rev_4"
            ],
            "check": "To list all installed packages, as the system administrator, run the\nfollowing:\n\n# RHEL/CENT Systems\n$ sudo yum list installed | grep postgres\n\n# Debian Systems\n$ dpkg --get-selections | grep postgres\n\nIf any packages are installed that are not required, this is a finding.",
            "fix": "To remove any unneeded executables, as the system administrator, run\nthe following:\n\n# RHEL/CENT Systems\n$ sudo yum erase <package_name>\n\n# Debian Systems\n$ sudo apt-get remove <package_name>"
          },
          "code": "control \"V-73011\" do\n  title \"Unused database components which are integrated in PostgreSQL and cannot be\nuninstalled must be disabled.\"\n  desc  \"Information systems are capable of providing a wide variety of functions\nand services. Some of the functions and services, provided by default, may not be\nnecessary to support essential organizational operations (e.g., key missions,\nfunctions).\n\nIt is detrimental for software products to provide, or install by default,\nfunctionality exceeding requirements or mission objectives.\n\nPostgreSQLs must adhere to the principles of least functionality by providing only\nessential capabilities.\n\nUnused, unnecessary PostgreSQL components increase the attack vector for PostgreSQL\nby introducing additional targets for attack. By minimizing the services and\napplications installed on the system, the number of potential vulnerabilities is\nreduced. Components of the system that are unused and cannot be uninstalled must be\ndisabled. The techniques available for disabling components will vary by DBMS\nproduct, OS and the nature of the component and may include DBMS configuration\nsettings, OS service settings, OS file access security, and DBMS user/role\npermissions.\"\n  impact 0.0\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000141-DB-000092\"\n  tag \"gid\": \"V-73011\"\n  tag \"rid\": \"SV-87663r1_rule\"\n  tag \"stig_id\": \"PGS9-00-009200\"\n  tag \"cci\": \"CCI-000381\"\n  tag \"nist\": [\"CM-7 a\", \"Rev_4\"]\n  tag \"check\": \"To list all installed packages, as the system administrator, run the\nfollowing:\n\n# RHEL/CENT Systems\n$ sudo yum list installed | grep postgres\n\n# Debian Systems\n$ dpkg --get-selections | grep postgres\n\nIf any packages are installed that are not required, this is a finding.\"\n  tag \"fix\": \"To remove any unneeded executables, as the system administrator, run\nthe following:\n\n# RHEL/CENT Systems\n$ sudo yum erase <package_name>\n\n# Debian Systems\n$ sudo apt-get remove <package_name>\"\n\n# @todo how do I identify the packages that are not required for the current OS? need datafile of approved?\n# @todo assume need two tests, one for RHEL/CENT, and one for Debian?\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73011.rb",
            "line": 23
          },
          "id": "V-73011",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 1.5568e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "If passwords are used for authentication, PostgreSQL must transmit only\n         encrypted representations of passwords.",
          "desc": "The DoD standard for authentication is DoD-approved PKI certificates.\n        Authentication based on User ID and Password may be used only when it is\n        not possible to employ a PKI certificate, and requires AO approval.\n\n        In such cases, passwords need to be protected at all times, and\n        encryption is the standard method for protecting passwords during\n        transmission.\n\n        PostgreSQL passwords sent in clear text format across the network are\n        vulnerable to discovery by unauthorized users. Disclosure of passwords\n        may easily lead to unauthorized access to the database.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000172-DB-000075",
            "gid": "V-72857",
            "rid": "SV-87509r1_rule",
            "stig_id": "PGS9-00-000800",
            "cci": "CCI-000197",
            "nist": [
              "IA-5 (1) (c)",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  As the database administrator (shown here as \"postgres\"), review\n  the authentication entries in pg_hba.conf:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n  If any entries use the auth_method (last column in records) \"password\", this\n  is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  As the database administrator (shown here as \"postgres\"), edit\n  pg_hba.conf authentication file and change all entries of \"password\" to\n  \"md5\":\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n  host all all .example.com md5"
          },
          "code": "control \"V-72857\" do\n  title \"If passwords are used for authentication, PostgreSQL must transmit only\n         encrypted representations of passwords.\"\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\n        Authentication based on User ID and Password may be used only when it is\n        not possible to employ a PKI certificate, and requires AO approval.\n\n        In such cases, passwords need to be protected at all times, and\n        encryption is the standard method for protecting passwords during\n        transmission.\n\n        PostgreSQL passwords sent in clear text format across the network are\n        vulnerable to discovery by unauthorized users. Disclosure of passwords\n        may easily lead to unauthorized access to the database.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000172-DB-000075\"\n  tag \"gid\": \"V-72857\"\n  tag \"rid\": \"SV-87509r1_rule\"\n  tag \"stig_id\": \"PGS9-00-000800\"\n  tag \"cci\": \"CCI-000197\"\n  tag \"nist\": [\"IA-5 (1) (c)\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.  As the database administrator (shown here as \\\"postgres\\\"), review\n  the authentication entries in pg_hba.conf:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_hba.conf\n  If any entries use the auth_method (last column in records) \\\"password\\\", this\n  is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  As the database administrator (shown here as \\\"postgres\\\"), edit\n  pg_hba.conf authentication file and change all entries of \\\"password\\\" to\n  \\\"md5\\\":\n\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/pg_hba.conf\n  host all all .example.com md5\"\n\n  describe command(\"sed -e '/^#/d' -e '/^$/d' #{PG_DATA}/pg_hba.conf | awk '$NF == \\\"password\\\" {print $NF}'\") do\n    its('stdout') { should eq '' }\n    its('stderr') { should eq '' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72857.rb",
            "line": 28
          },
          "id": "V-72857",
          "results": [
            {
              "status": "passed",
              "code_desc": "Command sed -e '/^#/d' -e '/^$/d' /var/vcap/store/postgresql/data/pg_hba.conf | awk '$NF == \"password\" {print $NF}' stdout should eq \"\"",
              "run_time": 0.044473037,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command sed -e '/^#/d' -e '/^$/d' /var/vcap/store/postgresql/data/pg_hba.conf | awk '$NF == \"password\" {print $NF}' stderr should eq \"\"",
              "run_time": 0.000320182,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when concurrent\n  logons/connections by the same user from different workstations occur.",
          "desc": "For completeness of forensic analysis, it is necessary to track who\n  logs on to PostgreSQL.\n  Concurrent connections by the same user from multiple workstations may be\n  valid use of the system; or such connections may be due to improper\n  circumvention of the requirement to use the CAC for authentication; or they\n  may indicate unauthorized account sharing; or they may be because an account\n  has been compromised.\n  (If the fact of multiple, concurrent logons by a given user can be reliably\n  reconstructed from the log entries for other events (logons/connections;\n  voluntary and involuntary disconnections), then it is not mandatory to create\n  additional log entries specifically for this..",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000506-DB-000353",
            "gid": "V-72961",
            "rid": "SV-87613r1_rule",
            "stig_id": "PGS9-00-006200",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify that\n  log_connections and log_disconnections are enabled by running the following\n  SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_connections\"\n  $ psql -c \"SHOW log_disconnections\"\n  If either is off, this is a finding.\n  Next, verify that log_line_prefix contains sufficient information by running\n  the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_line_prefix\"\n  If log_line_prefix does not contain at least %m %u %d %c, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Edit the following parameters as such:\n  log_connections = on\n  log_disconnections = on\n  log_line_prefix = '< %m %u %d %c: >'\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %d is the database\n  * %c is the session ID for the connection\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72961\" do\n  title \"PostgreSQL must generate audit records when concurrent\n  logons/connections by the same user from different workstations occur.\"\n  desc  \"For completeness of forensic analysis, it is necessary to track who\n  logs on to PostgreSQL.\n  Concurrent connections by the same user from multiple workstations may be\n  valid use of the system; or such connections may be due to improper\n  circumvention of the requirement to use the CAC for authentication; or they\n  may indicate unauthorized account sharing; or they may be because an account\n  has been compromised.\n  (If the fact of multiple, concurrent logons by a given user can be reliably\n  reconstructed from the log entries for other events (logons/connections;\n  voluntary and involuntary disconnections), then it is not mandatory to create\n  additional log entries specifically for this..\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000506-DB-000353\"\n  tag \"gid\": \"V-72961\"\n  tag \"rid\": \"SV-87613r1_rule\"\n  tag \"stig_id\": \"PGS9-00-006200\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator, verify that\n  log_connections and log_disconnections are enabled by running the following\n  SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW log_connections\\\"\n  $ psql -c \\\"SHOW log_disconnections\\\"\n  If either is off, this is a finding.\n  Next, verify that log_line_prefix contains sufficient information by running\n  the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW log_line_prefix\\\"\n  If log_line_prefix does not contain at least %m %u %d %c, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  First, as the database administrator (shown here as \\\"postgres\\\"), edit\n  postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Edit the following parameters as such:\n  log_connections = on\n  log_disconnections = on\n  log_line_prefix = '< %m %u %d %c: >'\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %d is the database\n  * %c is the session ID for the connection\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW log_connections;', [PG_DB]) do\n    its('output') { should_not eq 'off' }\n  end\n\n  describe sql.query('SHOW log_disconnections;', [PG_DB]) do\n    its('output') { should_not eq 'off' }\n  end\n\n  describe sql.query('SHOW log_line_prefix;', [PG_DB]) do\n    its('output') { should include '%m' }\n    its('output') { should include '%u' }\n    its('output') { should include '%d' }\n    its('output') { should include '%c' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72961.rb",
            "line": 46
          },
          "id": "V-72961",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_connections; output should not eq \"off\"",
              "run_time": 0.000281432,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_disconnections; output should not eq \"off\"",
              "run_time": 0.000640405,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%m\"",
              "run_time": 0.000583116,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%u\"",
              "run_time": 0.000991011,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%d\"",
              "run_time": 0.00037957,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%c\"",
              "run_time": 0.00019002,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records for all direct access to the\n        database(s).",
          "desc": "In this context, direct access is any query, command, or call to the\n        DBMS that comes from any source other than the application(s) that it\n        supports. Examples would be the command line or a database management\n        utility program. The intent is to capture all activity from administrative\n        and non-standard sources.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000508-DB-000358",
            "gid": "V-73069",
            "rid": "SV-87721r1_rule",
            "stig_id": "PGS9-00-012700",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "As the database administrator, verify pgaudit is enabled by running\n      the following SQL:\n\n      $ sudo su - postgres\n      $ psql -c \"SHOW shared_preload_libraries\"\n\n      If the output does not contain \"pgaudit\", this is a finding.\n\n      Verify that connections and disconnections are being logged by\n      running the following SQL:\n\n      $ sudo su - postgres\n      $ psql -c \"SHOW log_connections\"\n      $ psql -c \"SHOW log_disconnections\"\n\n      If the output does not contain \"on\",\n\n      pgaudit.log='ddl, role, read, write'\n      log_connections='on'\n      log_disconnections='on'\n\n      this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n      variable. See supplementary content APPENDIX-F for instructions on\n      configuring PGDATA.\n\n      To ensure that logging is enabled, review supplementary content APPENDIX-C\n      for instructions on enabling logging.\n\n      Using pgaudit PostgreSQL can be configured to audit these requests. See\n      supplementary content APPENDIX-B for documentation on installing pgaudit.\n\n      With pgaudit installed the following configurations should be made:\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n\n      Add the following parameters (or edit existing parameters):\n\n      pgaudit.log='ddl, role, read, write'\n      log_connections='on'\n      log_disconnections='on'\n\n      Now, as the system administrator, reload the server with the new configuration:\n\n      # SYSTEMD SERVER ONLY\n      $ sudo systemctl reload postgresql-9.5\n\n      # INITD SERVER ONLY\n      $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-73069\" do\n  title \"PostgreSQL must generate audit records for all direct access to the\n        database(s).\"\n  desc  \"In this context, direct access is any query, command, or call to the\n        DBMS that comes from any source other than the application(s) that it\n        supports. Examples would be the command line or a database management\n        utility program. The intent is to capture all activity from administrative\n        and non-standard sources.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n\n  tag \"gtitle\": \"SRG-APP-000508-DB-000358\"\n  tag \"gid\": \"V-73069\"\n  tag \"rid\": \"SV-87721r1_rule\"\n  tag \"stig_id\": \"PGS9-00-012700\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n\n  tag \"check\": \"As the database administrator, verify pgaudit is enabled by running\n      the following SQL:\n\n      $ sudo su - postgres\n      $ psql -c \\\"SHOW shared_preload_libraries\\\"\n\n      If the output does not contain \\\"pgaudit\\\", this is a finding.\n\n      Verify that connections and disconnections are being logged by\n      running the following SQL:\n\n      $ sudo su - postgres\n      $ psql -c \\\"SHOW log_connections\\\"\n      $ psql -c \\\"SHOW log_disconnections\\\"\n\n      If the output does not contain \\\"on\\\",\n\n      pgaudit.log='ddl, role, read, write'\n      log_connections='on'\n      log_disconnections='on'\n\n      this is a finding.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n      variable. See supplementary content APPENDIX-F for instructions on\n      configuring PGDATA.\n\n      To ensure that logging is enabled, review supplementary content APPENDIX-C\n      for instructions on enabling logging.\n\n      Using pgaudit PostgreSQL can be configured to audit these requests. See\n      supplementary content APPENDIX-B for documentation on installing pgaudit.\n\n      With pgaudit installed the following configurations should be made:\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n\n      Add the following parameters (or edit existing parameters):\n\n      pgaudit.log='ddl, role, read, write'\n      log_connections='on'\n      log_disconnections='on'\n\n      Now, as the system administrator, reload the server with the new configuration:\n\n      # SYSTEMD SERVER ONLY\n      $ sudo systemctl reload postgresql-9.5\n\n      # INITD SERVER ONLY\n      $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW log_connections;', [PG_DB]) do\n    its('output') { should eq 'on' }\n  end\n\n  describe sql.query('SHOW log_disconnections;', [PG_DB]) do\n    its('output') { should eq 'on' }\n  end\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73069.rb",
            "line": 104
          },
          "id": "V-73069",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000137757,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_connections; output should eq \"on\"",
              "run_time": 0.000208066,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_disconnections; output should eq \"on\"",
              "run_time": 0.000165819,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must only accept end entity certificates issued by DoD PKI or\nDoD-approved PKI Certification Authorities (CAs) for the establishment of all\nencrypted sessions.",
          "desc": "Only DoD-approved external PKIs have been evaluated to ensure that they\nhave security controls and identity vetting procedures in place which are sufficient\nfor DoD systems to rely on the identity asserted in the certificate. PKIs lacking\nsufficient security controls and identity vetting procedures risk being compromised\nand issuing certificates that enable adversaries to impersonate legitimate users.\n\nThe authoritative list of DoD-approved PKIs is published at\nhttp://iase.disa.mil/pki-pke/interoperability.\n\nThis requirement focuses on communications protection for PostgreSQL session rather\nthan for the network packet.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000427-DB-000385",
            "gid": "V-73031",
            "rid": "SV-87683r1_rule",
            "stig_id": "PGS9-00-010300",
            "cci": "CCI-002470",
            "nist": [
              "SC-23 (5)",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), verify\nthe following setting in postgresql.conf:\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl_ca_file\"\n$ psql -c \"SHOW ssl_cert_file\"\n\nIf the database is not configured to used approved certificates, this is a finding.",
            "fix": "Revoke trust in any certificates not issued by a DoD-approved\ncertificate authority.\n\nConfigure PostgreSQL to accept only DoD and DoD-approved PKI end-entity certificates.\n\nTo configure PostgreSQL to accept approved CA's, see the official PostgreSQL\ndocumentation: http://www.postgresql.org/docs/current/static/ssl-tcp.html\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G."
          },
          "code": "control \"V-73031\" do\n  title \"PostgreSQL must only accept end entity certificates issued by DoD PKI or\nDoD-approved PKI Certification Authorities (CAs) for the establishment of all\nencrypted sessions.\"\n  desc  \"Only DoD-approved external PKIs have been evaluated to ensure that they\nhave security controls and identity vetting procedures in place which are sufficient\nfor DoD systems to rely on the identity asserted in the certificate. PKIs lacking\nsufficient security controls and identity vetting procedures risk being compromised\nand issuing certificates that enable adversaries to impersonate legitimate users.\n\nThe authoritative list of DoD-approved PKIs is published at\nhttp://iase.disa.mil/pki-pke/interoperability.\n\nThis requirement focuses on communications protection for PostgreSQL session rather\nthan for the network packet.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000427-DB-000385\"\n  tag \"gid\": \"V-73031\"\n  tag \"rid\": \"SV-87683r1_rule\"\n  tag \"stig_id\": \"PGS9-00-010300\"\n  tag \"cci\": \"CCI-002470\"\n  tag \"nist\": [\"SC-23 (5)\", \"Rev_4\"]\n  tag \"check\": \"As the database administrator (shown here as \\\"postgres\\\"), verify\nthe following setting in postgresql.conf:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW ssl_ca_file\\\"\n$ psql -c \\\"SHOW ssl_cert_file\\\"\n\nIf the database is not configured to used approved certificates, this is a finding.\"\n  tag \"fix\": \"Revoke trust in any certificates not issued by a DoD-approved\ncertificate authority.\n\nConfigure PostgreSQL to accept only DoD and DoD-approved PKI end-entity certificates.\n\nTo configure PostgreSQL to accept approved CA's, see the official PostgreSQL\ndocumentation: http://www.postgresql.org/docs/current/static/ssl-tcp.html\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G.\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW ssl_ca_file;', [PG_DB]) do\n    its('output') { should_not eq '' }\n  end\n\n  describe sql.query('SHOW ssl_cert_file;', [PG_DB]) do\n    its('output') { should_not eq '' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73031.rb",
            "line": 45
          },
          "id": "V-73031",
          "results": [
            {
              "status": "failed",
              "code_desc": "PostgreSQL query: SHOW ssl_ca_file; output should not eq \"\"",
              "run_time": 0.000345851,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "\nexpected: value != \"\"\n     got: \"\"\n\n(compared using ==)\n"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW ssl_cert_file; output should not eq \"\"",
              "run_time": 0.000219424,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "Database contents must be protected from unauthorized and unintended\ninformation transfer by enforcement of a data-transfer policy.",
          "desc": "Information System Owners and Application developers must follow Best\n        Practices when developing Cloud applications. Example: Review the\n        procedures for the refreshing of development/test data from production.\n        Review any scripts or code that exists for the movement of production\n        data to development/test systems, or to any other location or for any\n        other purpose. Verify that copies of production data are not left in\n        unprotected locations.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000243-DB-000128",
            "gid": "V-73057",
            "rid": "SV-87709r1_rule",
            "stig_id": "PGS9-00-011900",
            "cci": "CCI-001090",
            "nist": [
              "SC-4",
              "Rev_4"
            ],
            "check": "Review the procedures for the refreshing of development/test data\nfrom production.\n\nReview any scripts or code that exists for the movement of production data to\ndevelopment/test systems, or to any other location or for any other purpose.\n\nVerify that copies of production data are not left in unprotected locations.\n\nIf the code that exists for data movement does not comply with the\norganization-defined data transfer policy and/or fails to remove any copies of\nproduction data from unprotected locations, this is a finding.",
            "fix": "Modify any code used for moving data from production to\ndevelopment/test systems to comply with the organization-defined data transfer\npolicy, and to ensure copies of production data are not left in unsecured locations."
          },
          "code": "control \"V-73057\" do\n  title \"Database contents must be protected from unauthorized and unintended\ninformation transfer by enforcement of a data-transfer policy.\"\n  desc  \"Applications, including PostgreSQLs, must prevent unauthorized and\nunintended information transfer via shared system resources.\n\nData used for the development and testing of applications often involves copying\ndata from production. It is important that specific procedures exist for this\nprocess, to include the conditions under which such transfer may take place, where\nthe copies may reside, and the rules for ensuring sensitive data are not exposed.\n\nCopies of sensitive data must not be misplaced or left in a temporary location\nwithout the proper controls.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000243-DB-000128\"\n  tag \"gid\": \"V-73057\"\n  tag \"rid\": \"SV-87709r1_rule\"\n  tag \"stig_id\": \"PGS9-00-011900\"\n  tag \"cci\": \"CCI-001090\"\n  tag \"nist\": [\"SC-4\", \"Rev_4\"]\n  tag \"check\": \"Review the procedures for the refreshing of development/test data\nfrom production.\n\nReview any scripts or code that exists for the movement of production data to\ndevelopment/test systems, or to any other location or for any other purpose.\n\nVerify that copies of production data are not left in unprotected locations.\n\nIf the code that exists for data movement does not comply with the\norganization-defined data transfer policy and/or fails to remove any copies of\nproduction data from unprotected locations, this is a finding.\"\n\n  tag \"fix\": \"Modify any code used for moving data from production to\ndevelopment/test systems to comply with the organization-defined data transfer\npolicy, and to ensure copies of production data are not left in unsecured locations.\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73057.rb",
            "line": 23
          },
          "id": "V-73057",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 8.916e-06,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  modify security objects occur.",
          "desc": "Changes in the database objects (tables, views, procedures, functions)\n  that record and control permissions, privileges, and roles granted to users\n  and roles must be tracked. Without an audit trail, unauthorized changes to the\n  security subsystem could go undetected. The database could be severely\n  compromised or rendered inoperative.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000496-DB-000335",
            "gid": "V-72927",
            "rid": "SV-87579r1_rule",
            "stig_id": "PGS9-00-004800",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  As the database administrator (shown here as \"postgres\"), create a test role\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob\"\n  Next, to test if audit records are generated from unsuccessful attempts at\n  modifying security objects, run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SET ROLE bob; UPDATE pg_authid SET rolsuper = 't' WHERE\n  rolname = 'bob';\"\n  Next, as the database administrator (shown here as \"postgres\"), verify that\n  the denials were logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-17 10:34:00.017 EDT bob 56eabf52.b62 postgres: >ERROR: permission\n  denied for relation pg_authid\n  < 2016-03-17 10:34:00.017 EDT bob 56eabf52.b62 postgres: >STATEMENT:\n  UPDATE pg_authid SET rolsuper = 't' WHERE rolname = 'bob';\n  If denials are not logged, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to modify security objects occur.\n  Unsuccessful attempts to modifying security objects can be logged if logging\n  is enabled. To ensure that logging is enabled, review supplementary content A\n  PPENDIX-C for instructions on enabling logging."
          },
          "code": "control \"V-72927\" do\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\n  modify security objects occur.\"\n  desc  \"Changes in the database objects (tables, views, procedures, functions)\n  that record and control permissions, privileges, and roles granted to users\n  and roles must be tracked. Without an audit trail, unauthorized changes to the\n  security subsystem could go undetected. The database could be severely\n  compromised or rendered inoperative.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000496-DB-000335\"\n  tag \"gid\": \"V-72927\"\n  tag \"rid\": \"SV-87579r1_rule\"\n  tag \"stig_id\": \"PGS9-00-004800\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  As the database administrator (shown here as \\\"postgres\\\"), create a test role\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE ROLE bob\\\"\n  Next, to test if audit records are generated from unsuccessful attempts at\n  modifying security objects, run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SET ROLE bob; UPDATE pg_authid SET rolsuper = 't' WHERE\n  rolname = 'bob';\\\"\n  Next, as the database administrator (shown here as \\\"postgres\\\"), verify that\n  the denials were logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  < 2016-03-17 10:34:00.017 EDT bob 56eabf52.b62 postgres: >ERROR: permission\n  denied for relation pg_authid\n  < 2016-03-17 10:34:00.017 EDT bob 56eabf52.b62 postgres: >STATEMENT:\n  UPDATE pg_authid SET rolsuper = 't' WHERE rolname = 'bob';\n  If denials are not logged, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to modify security objects occur.\n  Unsuccessful attempts to modifying security objects can be logged if logging\n  is enabled. To ensure that logging is enabled, review supplementary content A\n  PPENDIX-C for instructions on enabling logging.\"\n\n  create_role = 'CREATE ROLE bob;'\n  drop_role = 'DROP ROLE bob;'\n\n  command = \"SET ROLE bob; UPDATE pg_authid SET rolsuper = 't' WHERE rolname = 'bob';\"\n  error = 'permission denied for relation pg_authid'\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  sql.query(create_role, [PG_DB])\n\n  describe sql.query(command, [PG_DB]) do\n    it { should match /ERROR:\\s*#{Regexp.escape(error)}/ }\n  end\n\n  sql.query(drop_role, [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(error)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(command)}/ }\n  end\n  \nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72927.rb",
            "line": 46
          },
          "id": "V-72927",
          "results": [
            {
              "status": "passed",
              "code_desc": "Can't read run query \"SET ROLE bob; UPDATE pg_authid SET rolsuper = 't' WHERE rolname = 'bob';\" on postgres_session: \nERROR:  permission denied for relation pg_authid\n should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ pg_authid/",
              "run_time": 0.000381296,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ pg_authid/",
              "run_time": 0.006077359,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ UPDATE\\ pg_authid\\ SET\\ rolsuper\\ =\\ 't'\\ WHERE\\ rolname\\ =\\ 'bob';/",
              "run_time": 0.00903818,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "Unused database components, PostgreSQL software, and database objects must be removed.",
          "desc": "Information systems are capable of providing a wide variety of functions\n  and services. Some of the functions and services, provided by default, may not be\n  necessary to support essential organizational operations (e.g., key missions,\n  functions).\n\n  It is detrimental for software products to provide, or install by default,\n  functionality exceeding requirements or mission objectives.\n\n  PostgreSQLs must adhere to the principles of least functionality by providing only\n  essential capabilities.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000141-DB-000091",
            "gid": "V-73007",
            "rid": "SV-87659r1_rule",
            "stig_id": "PGS9-00-008900",
            "cci": "CCI-000381",
            "nist": [
              "CM-7 a",
              "Rev_4"
            ],
            "check": "To get a list of all extensions installed, use the following commands:\n  $ sudo su - postgres\n  $ psql -c \"select * from pg_extension where extname != 'plpgsql';\"\"\n\n  If any extensions exist that are not approved, this is a finding.",
            "fix": "To remove extensions, use the following commands:\n  $ sudo su - postgres\n  $ psql -c \"DROP EXTENSION <extension_name>\"\n\n  Note: it is recommended that plpgsql not be removed."
          },
          "code": "control \"V-73007\" do\n  title \"Unused database components, PostgreSQL software, and database objects must be removed.\"\n  desc  \"Information systems are capable of providing a wide variety of functions\n  and services. Some of the functions and services, provided by default, may not be\n  necessary to support essential organizational operations (e.g., key missions,\n  functions).\n\n  It is detrimental for software products to provide, or install by default,\n  functionality exceeding requirements or mission objectives.\n\n  PostgreSQLs must adhere to the principles of least functionality by providing only\n  essential capabilities.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000141-DB-000091\"\n  tag \"gid\": \"V-73007\"\n  tag \"rid\": \"SV-87659r1_rule\"\n  tag \"stig_id\": \"PGS9-00-008900\"\n  tag \"cci\": \"CCI-000381\"\n  tag \"nist\": [\"CM-7 a\", \"Rev_4\"]\n  tag \"check\": \"To get a list of all extensions installed, use the following commands:\n  $ sudo su - postgres\n  $ psql -c \\\"select * from pg_extension where extname != 'plpgsql';\\\"\\\"\n\n  If any extensions exist that are not approved, this is a finding.\"\n\n  tag \"fix\": \"To remove extensions, use the following commands:\n  $ sudo su - postgres\n  $ psql -c \\\"DROP EXTENSION <extension_name>\\\"\n\n  Note: it is recommended that plpgsql not be removed.\"\n\n  approved_extensions = PG_APPROVED_EXTENSIONS + PG_TRUSTED_LANGUAGES\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  sql.query('SELECT datname FROM pg_catalog.pg_database;', ['postgres']).output.split(\"\\n\").each do |database|\n    extensions = sql.query(\"SELECT extname from pg_extension WHERE extname != 'plpgsql';\", [database])\n    # Handle connections disabled on database\n    if extensions.methods.include?(:output)\n      extensions.output.split(\"\\n\").each do |extension|\n        describe extension do\n          it { should match /#{approved_extensions.join('|')}/ }\n        end\n      end\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73007.rb",
            "line": 63
          },
          "id": "V-73007",
          "results": [
            {
              "status": "passed",
              "code_desc": "pgcrypto should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000356682,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "hstore should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.00017686,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pgcrypto should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000338299,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "postgis should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000724431,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "postgis_topology should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.001020429,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "fuzzystrmatch should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000468996,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "postgis_tiger_geocoder should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.001114225,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "pgaudit should match /fuzzystrmatch|hstore|pgaudit|pgcrypto|postgis|postgis_tiger_geocoder|postgis_topology|plpgsql/",
              "run_time": 0.000735887,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL and associated applications, when making use of dynamic code\n  execution, must scan input data for invalid values that may indicate a code i\n  njection attack.",
          "desc": "Information System Owners and Application developers must follow Best\n        Practices when developing Cloud applications. Example: Checking the valid\n        syntax and semantics of information system inputs to ensure that SQL\n        injections are not possible.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000251-DB-000392",
            "gid": "V-72875",
            "rid": "SV-87527r1_rule",
            "stig_id": "PGS9-00-002000",
            "cci": "CCI-001310",
            "nist": [
              "SI-10",
              "Rev_4"
            ],
            "check": "Review PostgreSQL source code (trigger procedures, functions)\n  and application source code to identify cases of dynamic code execution.\n  If dynamic code execution is employed without protective measures against code\n  injection, this is a finding.",
            "fix": "Where dynamic code execution is used, modify the code to implement\n  protections against code injection (IE: prepared statements)."
          },
          "code": "control \"V-72875\" do\n  title \"PostgreSQL and associated applications, when making use of dynamic code\n  execution, must scan input data for invalid values that may indicate a code i\n  njection attack.\"\n  desc  \"With respect to database management systems, one class of threat is\n  known as SQL Injection, or more generally, code injection. It takes advantage\n  of the dynamic execution capabilities of various programming languages,\n  including dialects of SQL. In such cases, the attacker deduces the manner in\n  which SQL statements are being processed, either from inside knowledge or by\n  observing system behavior in response to invalid inputs. When the attacker\n  identifies scenarios where SQL queries are being assembled by application code\n  (which may be within the database or separate from it) and executed dynamically,\n  the attacker is then able to craft input strings that subvert the intent of the\n  query. Potentially, the attacker can gain unauthorized access to data,\n  including security settings, and severely corrupt or destroy the database.\n  The principal protection against code injection is not to use dynamic execution\n  except where it provides necessary functionality that cannot be utilized\n  otherwise. Use strongly typed data items rather than general-purpose strings\n  as input parameters to task-specific, pre-compiled stored procedures and\n  functions (and triggers).When dynamic execution is necessary, ways to mitigate\n  the risk include the following, which should be implemented both in the\n  on-screen application and at the database level, in the stored procedures:\n  -- Allow strings as input only when necessary.\n  -- Rely on data typing to validate numbers, dates, etc. Do not accept invalid\n  values. If substituting other values for them, think carefully about whether\n  this could be subverted.\n  -- Limit the size of input strings to what is truly necessary.\n  -- If single quotes/apostrophes, double quotes, semicolons, equals signs,\n  angle brackets, or square brackets will never be valid as input, reject them.\n  -- If comment markers will never be valid as input, reject them. In SQL, these\n  are -- or /* */\n  -- If HTML and XML tags, entities, comments, etc., will never be valid,\n  reject them.\n  -- If wildcards are present, reject them unless truly necessary. In SQL these\n  are the underscore and the percentage sign, and the word ESCAPE is also a clue\n  that wildcards are in use.\n  -- If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER,\n  DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject\n  them. Use case-insensitive comparisons when searching for these. Bear in mind\n  that some of these words, particularly Grant (as a person's name), could also\n  be valid input.\n  -- If there are range limits on the values that may be entered, enforce those\n  limits.\n  -- Institute procedures for inspection of programs for correct use of dynamic\n  coding, by a party other than the developer.\n  -- Conduct rigorous testing of program modules that use dynamic coding,\n  searching for ways to subvert the intended use.\n  -- Record the inspection and testing in the system documentation.\n  -- Bear in mind that all this applies not only to screen input, but also to\n  the values in an incoming message to a web service or to a stored procedure\n  called by a software component that has not itself been hardened in these ways.\n  Not only can the caller be subject to such vulnerabilities; it may itself be\n  the attacker.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000251-DB-000392\"\n  tag \"gid\": \"V-72875\"\n  tag \"rid\": \"SV-87527r1_rule\"\n  tag \"stig_id\": \"PGS9-00-002000\"\n  tag \"cci\": \"CCI-001310\"\n  tag \"nist\": [\"SI-10\", \"Rev_4\"]\n  tag \"check\": \"Review PostgreSQL source code (trigger procedures, functions)\n  and application source code to identify cases of dynamic code execution.\n  If dynamic code execution is employed without protective measures against code\n  injection, this is a finding.\"\n  tag \"fix\": \"Where dynamic code execution is used, modify the code to implement\n  protections against code injection (IE: prepared statements).\"\n\n  only_if { false }\n  \nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72875.rb",
            "line": 23
          },
          "id": "V-72875",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 2.3663e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must limit privileges to change functions and triggers, and\n  links to software external to PostgreSQL.",
          "desc": "This is a DEVOPS system and users don't have ability to install or\n        remove packages. Once released as BOSH package software libraries can\n        not be changed. Any changes to the software libriaries can ONLY be done\n        by creating and deploying a new BOSH release. This is\n        Software-Defined-Infrustructure",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000133-DB-000179",
            "gid": "V-72855",
            "rid": "SV-87507r1_rule",
            "stig_id": "PGS9-00-000710",
            "cci": "CCI-001499",
            "nist": [
              "CM-5 (6)",
              "Rev_4"
            ],
            "check": "Only owners of objects can change them. To view all functions,\n  triggers, and trigger procedures, their ownership and source, as the database\n  administrator (shown here as \"postgres\") run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -x -c \"\\df+\"\n\n  Only the OS database owner user (shown here as \"postgres\") or a PostgreSQL\n  superuser can change links to external software.\n\n  As the database administrator (shown here as \"postgres\"), check the permissions\n  of configuration files for the database:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}\n\n  If any files are not owned by the database owner or have permissions allowing\n  others to modify (write) configuration files, this is a finding.",
            "fix": "To change ownership of an object, as the database administrator\n  (shown here as \"postgres\"), run the following SQL:\n\n  $ sudo su – postgres  $ psql -c \"ALTER FUNCTION function_name OWNER TO new_role_name\"\n\n  To change ownership of postgresql.conf, as the database administrator (shown\n  here as \"postgres\"), run the following commands:\n\n  $ sudo su - postgres\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\n  $ chmod 0600 ${PGDATA?}/postgresql.conf\n\n  To remove superuser from a role, as the database administrator (shown here as\n  \"postgres\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \"ALTER ROLE rolename WITH NOSUPERUSER\""
          },
          "code": "control \"V-72855\" do\n  title \"PostgreSQL must limit privileges to change functions and triggers, and\n  links to software external to PostgreSQL.\"\n  desc  \"If the system were to allow any user to make changes to software\n  libraries, those changes might be implemented without undergoing the\n  appropriate testing and approvals that are part of a robust change management\n  process.  Accordingly, only qualified and authorized individuals must be\n  allowed to obtain access to information system components for purposes of\n  initiating changes, including upgrades and modifications.  nmanaged changes\n  that occur to the database code can lead to unauthorized or compromised\n  installations.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000133-DB-000179\"\n  tag \"gid\": \"V-72855\"\n  tag \"rid\": \"SV-87507r1_rule\"\n  tag \"stig_id\": \"PGS9-00-000710\"\n  tag \"cci\": \"CCI-001499\"\n  tag \"nist\": [\"CM-5 (6)\", \"Rev_4\"]\n\n  tag \"check\": \"Only owners of objects can change them. To view all functions,\n  triggers, and trigger procedures, their ownership and source, as the database\n  administrator (shown here as \\\"postgres\\\") run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -x -c \\\"\\\\df+\\\"\n\n  Only the OS database owner user (shown here as \\\"postgres\\\") or a PostgreSQL\n  superuser can change links to external software.\n\n  As the database administrator (shown here as \\\"postgres\\\"), check the permissions\n  of configuration files for the database:\n\n  $ sudo su - postgres\n  $ ls -la ${PGDATA?}\n\n  If any files are not owned by the database owner or have permissions allowing\n  others to modify (write) configuration files, this is a finding.\"\n\n  tag \"fix\": \"To change ownership of an object, as the database administrator\n  (shown here as \\\"postgres\\\"), run the following SQL:\n\n  $ sudo su – postgres\\\n  $ psql -c \\\"ALTER FUNCTION function_name OWNER TO new_role_name\\\"\n\n  To change ownership of postgresql.conf, as the database administrator (shown\n  here as \\\"postgres\\\"), run the following commands:\n\n  $ sudo su - postgres\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\n  $ chmod 0600 ${PGDATA?}/postgresql.conf\n\n  To remove superuser from a role, as the database administrator (shown here as\n  \\\"postgres\\\"), run the following SQL:\n\n  $ sudo su - postgres\n  $ psql -c \\\"ALTER ROLE rolename WITH NOSUPERUSER\\\"\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  sql.query('\\df+', ['postgres']).output.split(\"\\n\").each do |row|\n    owner = row.split('|')[7]\n    describe owner do\n      it { should eq PG_OWNER }\n    end\n  end\n\n\n  describe directory(PG_DATA) do\n    it { should be_owned_by PG_OWNER }\n    its('mode') { should cmp '0700' }\n  end\n\n  describe command(\"find -L #{PG_DATA} -type f ! -user #{PG_OWNER} -or -perm -g=w -or -perm -o=w\") do\n    its('stdout') { should eq '' }\n    its('stderr') { should eq '' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72855.rb",
            "line": 92
          },
          "id": "V-72855",
          "results": [
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.00035649,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000209311,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000456729,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000142422,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000122195,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000106215,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 9.3195e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000286524,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000129178,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000115116,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000230168,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000131841,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 7.3239e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000104511,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.00032504,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000154587,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000212966,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000272845,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000132271,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000946292,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000141566,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 8.1236e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 7.364e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 6.947e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000294886,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000200347,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000186385,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 9.5917e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000144193,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 7.0673e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000146219,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 6.9087e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.000229268,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 0.00017801,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 8.2989e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should eq \"vcap\"",
              "run_time": 8.4417e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data should be owned by \"vcap\"",
              "run_time": 0.000138143,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data mode should cmp == \"0700\"",
              "run_time": 0.000475116,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /var/vcap/store/postgresql/data -type f ! -user vcap -or -perm -g=w -or -perm -o=w stdout should eq \"\"",
              "run_time": 0.025726387,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /var/vcap/store/postgresql/data -type f ! -user vcap -or -perm -g=w -or -perm -o=w stderr should eq \"\"",
              "run_time": 0.00023663,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must prevent non-privileged users from executing privileged\nfunctions, to include disabling, circumventing, or altering implemented security\nsafeguards/countermeasures.",
          "desc": "Out of the Box DBaaS does not grant System Users access to privileged\n        (Administration) functions. The System Accounts provided to consumers of\n        the Crunchy DBaaS do not have access to privileged (Administration)\n        functions. Those functions are only available to the internal admin\n        DBaaS Roles, and can only be executed by Platform Admins or via\n        authorized Service Broker interactions. Crunchy will not grant Superuser\n        priviledges to ANY Information System User residing on the Shared\n        PostgreSQL Cluster. A Dedicated service plan must be requested if\n        Superuser functionality is required by the Infromation System\n        (aproval required)",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000340-DB-000304",
            "gid": "V-73053",
            "rid": "SV-87705r1_rule",
            "stig_id": "PGS9-00-011700",
            "cci": "CCI-002235",
            "nist": [
              "AC-6 (10)",
              "Rev_4"
            ],
            "check": "Review the system documentation to obtain the definition of the\nPostgreSQL functionality considered privileged in the context of the system in\nquestion.\n\nReview the PostgreSQL security configuration and/or other means used to protect\nprivileged functionality from unauthorized use.\n\nIf the configuration does not protect all of the actions defined as privileged, this\nis a finding.\n\nIf PostgreSQL instance uses procedural languages, such as pl/Python or pl/R, without\nAO authorization, this is a finding.",
            "fix": "Configure PostgreSQL security to protect all privileged functionality.\n\nIf pl/R and pl/Python are used, document their intended use, document users that\nhave access to pl/R and pl/Python, as well as their business use case, such as\ndata-analytics or data-mining. Because of the risks associated with using pl/R and\npl/Python, their use must have AO risk acceptance.\n\nTo remove unwanted extensions, use:\n\nDROP EXTENSION <extension_name>\n\nTo remove unwanted privileges from a role, use the REVOKE command.\n\nSee the PostgreSQL documentation for more details:\nhttp://www.postgresql.org/docs/current/static/sql-revoke.html"
          },
          "code": "control \"V-73053\" do\n  title \"PostgreSQL must prevent non-privileged users from executing privileged\nfunctions, to include disabling, circumventing, or altering implemented security\nsafeguards/countermeasures.\"\n  desc  \"Preventing non-privileged users from executing privileged functions\nmitigates the risk that unauthorized individuals or processes may gain unnecessary\naccess to information or privileges.\n\nSystem documentation should include a definition of the functionality considered\nprivileged.\n\nDepending on circumstances, privileged functions can include, for example,\nestablishing accounts, performing system integrity checks, or administering\ncryptographic key management activities. Non-privileged users are individuals that\ndo not possess appropriate authorizations. Circumventing intrusion detection and\nprevention mechanisms or malicious code protection mechanisms are examples of\nprivileged functions that require protection from non-privileged users.\n\nA privileged function in PostgreSQL/database context is any operation that modifies\nthe structure of the database, its built-in logic, or its security settings. This\nwould include all Data Definition Language (DDL) statements and all security-related\nstatements. In an SQL environment, it encompasses, but is not necessarily limited\nto:\n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nThere may also be Data Manipulation Language (DML) statements that, subject to\ncontext, should be regarded as privileged. Possible examples include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table\nexecuted by other than a security principal.\n\nDepending on the capabilities of PostgreSQL and the design of the database and\nassociated applications, the prevention of unauthorized use of privileged functions\nmay be achieved by means of DBMS security features, database triggers, other\nmechanisms, or a combination of these.\n\nHowever, the use of procedural languages within PostgreSQL, such as pl/R and\npl/Python, introduce security risk. Any user on the PostgreSQL who is granted access\nto pl/R or pl/Python is able to run UDFs to escalate privileges and perform\nunintended functions. Procedural languages such as pl/Perl and pl/Java have\n\\\"untrusted\\\" mode of operation, which do not allow a non-privileged PostgreSQL user\nto escalate privileges or perform actions as a database administrator.\"\n  impact 0.7\n  tag \"severity\": \"high\"\n  tag \"gtitle\": \"SRG-APP-000340-DB-000304\"\n  tag \"gid\": \"V-73053\"\n  tag \"rid\": \"SV-87705r1_rule\"\n  tag \"stig_id\": \"PGS9-00-011700\"\n  tag \"cci\": \"CCI-002235\"\n  tag \"nist\": [\"AC-6 (10)\", \"Rev_4\"]\n  tag \"check\": \"Review the system documentation to obtain the definition of the\nPostgreSQL functionality considered privileged in the context of the system in\nquestion.\n\nReview the PostgreSQL security configuration and/or other means used to protect\nprivileged functionality from unauthorized use.\n\nIf the configuration does not protect all of the actions defined as privileged, this\nis a finding.\n\nIf PostgreSQL instance uses procedural languages, such as pl/Python or pl/R, without\nAO authorization, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL security to protect all privileged functionality.\n\nIf pl/R and pl/Python are used, document their intended use, document users that\nhave access to pl/R and pl/Python, as well as their business use case, such as\ndata-analytics or data-mining. Because of the risks associated with using pl/R and\npl/Python, their use must have AO risk acceptance.\n\nTo remove unwanted extensions, use:\n\nDROP EXTENSION <extension_name>\n\nTo remove unwanted privileges from a role, use the REVOKE command.\n\nSee the PostgreSQL documentation for more details:\nhttp://www.postgresql.org/docs/current/static/sql-revoke.html\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  sql.query('SELECT datname FROM pg_catalog.pg_database;', ['postgres']).output.split(\"\\n\").each do |database|\n    languages = sql.query(\"SELECT extname FROM pg_extension WHERE extname ~ '^pl';\", [database])\n    # Handle connections disabled on database\n    if languages.methods.include?(:output)\n      languages.output.split(\"\\n\").each do |language|\n        describe PG_TRUSTED_LANGUAGES do\n          it { should include language }\n        end\n      end\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73053.rb",
            "line": 113
          },
          "id": "V-73053",
          "results": [
            {
              "status": "passed",
              "code_desc": "[\"plpgsql\"] should include \"plpgsql\"",
              "run_time": 0.000371709,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "[\"plpgsql\"] should include \"plpgsql\"",
              "run_time": 0.00013661,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "[\"plpgsql\"] should include \"plpgsql\"",
              "run_time": 0.000107317,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "[\"plpgsql\"] should include \"plpgsql\"",
              "run_time": 0.000188174,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "[\"plpgsql\"] should include \"plpgsql\"",
              "run_time": 0.000864921,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "[\"plpgsql\"] should include \"plpgsql\"",
              "run_time": 0.000161483,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  delete categorized information (e.g., classification levels/security levels)\n  occur.",
          "desc": "Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n  For detailed information on categorizing information, refer to FIPS Publication\n  199, Standards for Security Categorization of Federal Information and\n  Information Systems, and FIPS Publication 200, Minimum Security Requirements\n  for Federal Information and Information Systems.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000502-DB-000349",
            "gid": "V-72931",
            "rid": "SV-87583r1_rule",
            "stig_id": "PGS9-00-005000",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain \"pgaudit\", this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  All errors and denials are logged if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72931\" do\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\n  delete categorized information (e.g., classification levels/security levels)\n  occur.\"\n  desc  \"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n  For detailed information on categorizing information, refer to FIPS Publication\n  199, Standards for Security Categorization of Federal Information and\n  Information Systems, and FIPS Publication 200, Minimum Security Requirements\n  for Federal Information and Information Systems.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000502-DB-000349\"\n  tag \"gid\": \"V-72931\"\n  tag \"rid\": \"SV-87583r1_rule\"\n  tag \"stig_id\": \"PGS9-00-005000\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\n  If the output does not contain \\\"pgaudit\\\", this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \\\"SHOW pgaudit.log\\\"\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  All errors and denials are logged if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'ddl' }\n    its('output') { should include 'read' }\n    its('output') { should include 'role' }\n    its('output') { should include 'write' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72931.rb",
            "line": 46
          },
          "id": "V-72931",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000157368,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
              "run_time": 0.000130873,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
              "run_time": 0.000264091,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 0.001469916,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 0.000294808,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must provide the capability for authorized users to capture,\nrecord, and log all content related to a user session.",
          "desc": "Without the capability to capture, record, and log all content related to a\nuser session, investigations into suspicious user activity would be hampered.\n\nTypically, this PostgreSQL capability would be used in conjunction with comparable\nmonitoring of a user's online session, involving other software components such as\noperating systems, web servers and front-end user applications. The current\nrequirement, however, deals specifically with PostgreSQL.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000093-DB-000052",
            "gid": "V-73021",
            "rid": "SV-87673r1_rule",
            "stig_id": "PGS9-00-009800",
            "cci": "CCI-001462",
            "nist": [
              "AU-14 (2)",
              "Rev_4"
            ],
            "check": "First, as the database administrator (shown here as \"postgres\"),\nverify pgaudit is installed by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf shared_preload_libraries does not contain pgaudit, this is a finding.\n\nNext, to verify connections and disconnections are logged, run the following SQL:\n\n$ psql -c \"SHOW log_connections\"\n$ psql -c \"SHOW log_disconnections\"\n\nIf log_connections and log_disconnections are off, this is a finding.\n\nNow, to verify that pgaudit is configured to log, run the following SQL:\n\n$ psql -c \"SHOW pgaudit.log\"\n\nIf pgaudit.log does not contain ddl, role, read, write, this is a finding.",
            "fix": "Configure the database capture, record, and log all content related to\na user session.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nWith logging enabled, as the database administrator (shown here as \"postgres\"),\nenable log_connections and log_disconnections:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nlog_connections = on\nlog_disconnections = on\n\nUsing pgaudit PostgreSQL can be configured to audit activity. See supplementary\ncontent APPENDIX-B for documentation on installing pgaudit.\n\nWith pgaudit installed, as a database administrator (shown here as \"postgres\"),\nenable which objects required for auditing a user's session:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\npgaudit.log = 'write, ddl, role, read, function';\npgaudit.log_relation = on;\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-73021\" do\n  title \"PostgreSQL must provide the capability for authorized users to capture,\nrecord, and log all content related to a user session.\"\n  desc  \"Without the capability to capture, record, and log all content related to a\nuser session, investigations into suspicious user activity would be hampered.\n\nTypically, this PostgreSQL capability would be used in conjunction with comparable\nmonitoring of a user's online session, involving other software components such as\noperating systems, web servers and front-end user applications. The current\nrequirement, however, deals specifically with PostgreSQL.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000093-DB-000052\"\n  tag \"gid\": \"V-73021\"\n  tag \"rid\": \"SV-87673r1_rule\"\n  tag \"stig_id\": \"PGS9-00-009800\"\n  tag \"cci\": \"CCI-001462\"\n  tag \"nist\": [\"AU-14 (2)\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator (shown here as \\\"postgres\\\"),\nverify pgaudit is installed by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW shared_preload_libraries\\\"\n\nIf shared_preload_libraries does not contain pgaudit, this is a finding.\n\nNext, to verify connections and disconnections are logged, run the following SQL:\n\n$ psql -c \\\"SHOW log_connections\\\"\n$ psql -c \\\"SHOW log_disconnections\\\"\n\nIf log_connections and log_disconnections are off, this is a finding.\n\nNow, to verify that pgaudit is configured to log, run the following SQL:\n\n$ psql -c \\\"SHOW pgaudit.log\\\"\n\nIf pgaudit.log does not contain ddl, role, read, write, this is a finding.\"\n  tag \"fix\": \"Configure the database capture, record, and log all content related to\na user session.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nWith logging enabled, as the database administrator (shown here as \\\"postgres\\\"),\nenable log_connections and log_disconnections:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\nlog_connections = on\nlog_disconnections = on\n\nUsing pgaudit PostgreSQL can be configured to audit activity. See supplementary\ncontent APPENDIX-B for documentation on installing pgaudit.\n\nWith pgaudit installed, as a database administrator (shown here as \\\"postgres\\\"),\nenable which objects required for auditing a user's session:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\npgaudit.log = 'write, ddl, role, read, function';\npgaudit.log_relation = on;\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW log_connections;', [PG_DB]) do\n    its('output') { should_not eq 'off' }\n  end\n\n  describe sql.query('SHOW log_disconnections;', [PG_DB]) do\n    its('output') { should_not eq 'off' }\n  end\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'ddl' }\n    its('output') { should include 'read' }\n    its('output') { should include 'role' }\n    its('output') { should include 'write' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73021.rb",
            "line": 45
          },
          "id": "V-73021",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000289341,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_connections; output should not eq \"off\"",
              "run_time": 0.000302357,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_disconnections; output should not eq \"off\"",
              "run_time": 0.000263835,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
              "run_time": 0.000149985,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
              "run_time": 0.000110614,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 0.000111274,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 8.841e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must prohibit user installation of logic modules (functions,\n  trigger procedures, views, etc.) without explicit privileged status.",
          "desc": "Once released as BOSH package software libraries can not be changed.\n        Any changes to the software libriaries can ONLY be done by creating and\n        deploying a new BOSH release. This is Software-Defined-Infrustructure",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000378-DB-000365",
            "gid": "V-72997",
            "rid": "SV-87649r1_rule",
            "stig_id": "PGS9-00-008400",
            "cci": "CCI-001812",
            "nist": [
              "CM-11 (2)",
              "Rev_4"
            ],
            "check": "If PostgreSQL supports only software development, experimentation\nand/or developer-level testing (that is, excluding production systems, integration\ntesting, stress testing, and user acceptance testing), this is not a finding.\n\nReview PostgreSQL and database security settings with respect to non-administrative\nusers' ability to create, alter, or replace logic modules, to include but not\nnecessarily only stored procedures, functions, triggers, and views.\n\nTo list the privileges for all tables and schemas, as the database administrator\n(shown here as \"postgres\"), run the following:\n\n$ sudo su - postgres\n$ psql -c \"\\dp\"\n$ psql -c \"\\dn+\"\n\nThe privileges are as follows:\n\nrolename=xxxx -- privileges granted to a role\n=xxxx -- privileges granted to PUBLIC\n\nr -- SELECT (\"read\")\nw -- UPDATE (\"write\")\na -- INSERT (\"append\")\nd -- DELETE\nD -- TRUNCATE\nx -- REFERENCES\nt -- TRIGGER\nX -- EXECUTE\nU -- USAGE\nC -- CREATE\nc -- CONNECT\nT -- TEMPORARY\narwdDxt -- ALL PRIVILEGES (for tables, varies for other objects)\n* -- grant option for preceding privilege\n\n/yyyy -- role that granted this privilege\n\nIf any such permissions exist and are not documented and approved, this is a\nfinding.",
            "fix": "Document and obtain approval for any non-administrative users who\nrequire the ability to create, alter or replace logic modules.\n\nImplement the approved permissions. Revoke any unapproved permissions."
          },
          "code": "control \"V-72997\" do\n  title \"PostgreSQL must prohibit user installation of logic modules (functions,\n  trigger procedures, views, etc.) without explicit privileged status.\"\n  desc  \"Allowing regular users to install software, without explicit privileges,\n  creates the risk that untested or potentially malicious software will be installed\n  on the system. Explicit privileges (escalated or administrative privileges) provide\n  the regular user with explicit capabilities and control that exceed the rights of a\n  regular user.\n\n  PostgreSQL functionality and the nature and requirements of databases will vary; so\n  while users are not permitted to install unapproved software, there may be instances\n  where the organization allows the user to install approved software packages such as\n  from an approved software repository. The requirements for production servers will\n  be more restrictive than those used for development and research.\n\n  PostgreSQL must enforce software installation by users based upon what types of\n  software installations are permitted (e.g., updates and security patches to existing\n  software) and what types of installations are prohibited (e.g., software whose\n  pedigree with regard to being potentially malicious is unknown or suspect) by the\n  organization).\n\n  In the case of a database management system, this requirement covers stored\n  procedures, functions, triggers, views, etc.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000378-DB-000365\"\n  tag \"gid\": \"V-72997\"\n  tag \"rid\": \"SV-87649r1_rule\"\n  tag \"stig_id\": \"PGS9-00-008400\"\n  tag \"cci\": \"CCI-001812\"\n  tag \"nist\": [\"CM-11 (2)\", \"Rev_4\"]\n\n  tag \"check\": \"If PostgreSQL supports only software development, experimentation\nand/or developer-level testing (that is, excluding production systems, integration\ntesting, stress testing, and user acceptance testing), this is not a finding.\n\nReview PostgreSQL and database security settings with respect to non-administrative\nusers' ability to create, alter, or replace logic modules, to include but not\nnecessarily only stored procedures, functions, triggers, and views.\n\nTo list the privileges for all tables and schemas, as the database administrator\n(shown here as \\\"postgres\\\"), run the following:\n\n$ sudo su - postgres\n$ psql -c \\\"\\\\dp\\\"\n$ psql -c \\\"\\\\dn+\\\"\n\nThe privileges are as follows:\n\nrolename=xxxx -- privileges granted to a role\n=xxxx -- privileges granted to PUBLIC\n\nr -- SELECT (\\\"read\\\")\nw -- UPDATE (\\\"write\\\")\na -- INSERT (\\\"append\\\")\nd -- DELETE\nD -- TRUNCATE\nx -- REFERENCES\nt -- TRIGGER\nX -- EXECUTE\nU -- USAGE\nC -- CREATE\nc -- CONNECT\nT -- TEMPORARY\narwdDxt -- ALL PRIVILEGES (for tables, varies for other objects)\n* -- grant option for preceding privilege\n\n/yyyy -- role that granted this privilege\n\nIf any such permissions exist and are not documented and approved, this is a\nfinding.\"\n  tag \"fix\": \"Document and obtain approval for any non-administrative users who\nrequire the ability to create, alter or replace logic modules.\n\nImplement the approved permissions. Revoke any unapproved permissions.\"\n\n  roles = []\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  sql.query('\\du', [PG_DB]).output.split(\"\\n\").each do |row|\n    roles.push(row.split('|').first)\n  end\n\n  sql.query('SELECT datname FROM pg_catalog.pg_database;', ['postgres']).output.split(\"\\n\").each do |database|\n    rows = sql.query('\\dp', [database])\n    if rows.methods.include?(:output) # Handle connection disabled on database\n      rows.output.split(\"\\n\").each do |row|\n        describe row do\n          it { should_not match %r{(^|\\|)\\s*=[arwdDxt]{2,}/\\w+} }\n        end\n        columns = row.split('|')\n        acl = ''\n        if columns.length < 3\n          acl = columns[0]\n        else\n          acl = columns[3]\n        end\n        unless acl.nil?\n          describe acl do\n            it { should match %r{^\\s*((#{PG_OBJECT_OWNERS.join('|')})\\w*=[arwdDxt]+|=r)/\\w+} }\n          end\n        end\n      end\n    end\n  end\n\n  sql.query('SELECT datname FROM pg_catalog.pg_database;', ['postgres']).output.split(\"\\n\").each do |database|\n    rows = sql.query('\\dn+', [database])\n    if rows.methods.include?(:output) # Handle connection disabled on database\n      rows.output.split(\"\\n\").each do |row|\n        describe row do\n          it { should_not match %r{(^|\\|)\\s*=[UC]+/\\w+} }\n        end\n        columns = row.split('|')\n        acl = ''\n        if columns.length < 2\n          acl = columns[0]\n        else\n          acl = columns[2]\n        end\n        unless acl.nil?\n          describe acl do\n            it { should match %r{^\\s*(#{PG_OBJECT_OWNERS.join('|')})\\w*=[UC]+/\\w+} }\n          end\n        end\n      end\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72997.rb",
            "line": 57
          },
          "id": "V-72997",
          "results": [
            {
              "status": "passed",
              "code_desc": "public|pg_stat_repl_json|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00018401,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000140832,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "replication=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000393069,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "replication=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000319095,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|geography_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000786669,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00034614,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.9583e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000420146,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|geometry_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000162172,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000192667,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 2e-09,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000627612,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|raster_columns|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00028682,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000772926,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000273603,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000325988,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|raster_overviews|view|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000794189,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000640179,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000294965,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000163478,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|spatial_ref_sys|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6.8275e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000189907,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.1488e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.0002259,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|addr|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000392453,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|addr_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000111829,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|addrfeat|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000120501,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|addrfeat_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000161889,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|bg|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000793462,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|bg_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000136233,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|county|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000134519,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|county_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000137346,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|county_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000132171,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|countysub_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 5.7887e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|cousub|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000843064,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|cousub_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000119216,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|direction_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000126031,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|edges|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000126746,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|edges_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.2766e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|faces|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000124826,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|faces_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00011278,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|featnames|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.7981e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|featnames_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 7.0099e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|geocode_settings|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000444529,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000177851,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.3838e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000249643,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|geocode_settings_default|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.5079e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 6.8155e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 8.3743e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 1e-09,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|loader_lookuptables|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 6e-09,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000144502,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000237327,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000480073,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|loader_platform|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000199247,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000182111,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.001174531,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000263706,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|loader_variables|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000382146,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000254275,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000174253,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.001484188,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|pagc_gaz|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 9.9326e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000790227,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00013838,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00134346,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|pagc_gaz_id_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000480905,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|pagc_lex|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000319735,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.00050972,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000391668,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000347645,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|pagc_lex_id_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00022264,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|pagc_rules|table|vcap=arwdDxt/vcap should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 5.7611e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=arwdDxt/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000118989,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap|| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000153774,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "=r/vcap should match /^\\s*((jesse|vcap|crunchy|replication)\\w*=[arwdDxt]+|=r)\\/\\w+/",
              "run_time": 0.000240588,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|pagc_rules_id_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.001113077,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|place|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00091484,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|place_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000384416,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|place_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000423594,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|secondary_unit_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000580158,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|state|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000429654,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|state_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000414307,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|state_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000395707,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|street_type_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000262772,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|tabblock|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00036675,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|tabblock_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.001497301,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|tract|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000315227,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|tract_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000283814,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zcta5|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000299286,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zcta5_gid_seq|sequence||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000369741,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zip_lookup|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.00044292,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zip_lookup_all|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000185994,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zip_lookup_base|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 3.0567e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zip_state|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000350454,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger|zip_state_loc|table||| should not match /(^|\\|)\\s*=[arwdDxt]{2,}\\/\\w+/",
              "run_time": 0.000218513,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000551261,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.000304016,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "crunchy=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000157382,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 3e-09,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.002006817,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "failed",
              "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.001216577,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
            },
            {
              "status": "passed",
              "code_desc": "broker|crunchy|crunchy=UC/crunchy| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000598197,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "crunchy=UC/crunchy should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.000218016,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000115974,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.000769917,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "failed",
              "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.001684661,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
            },
            {
              "status": "passed",
              "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.00054714,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.001466223,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "failed",
              "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.002384073,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
            },
            {
              "status": "passed",
              "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000298077,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.000343269,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "failed",
              "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.001296528,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
            },
            {
              "status": "passed",
              "code_desc": "public|vcap|vcap=UC/vcap should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000172785,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap=UC/vcap should match /^\\s*(jesse|vcap|crunchy|replication)\\w*=[UC]+\\/\\w+/",
              "run_time": 0.000121048,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "failed",
              "code_desc": "=UC/vcap|standard public schema should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000509975,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "expected \"=UC/vcap|standard public schema\" not to match /(^|\\|)\\s*=[UC]+\\/\\w+/\nDiff:\n@@ -1,2 +1,2 @@\n-/(^|\\|)\\s*=[UC]+\\/\\w+/\n+\"=UC/vcap|standard public schema\"\n"
            },
            {
              "status": "passed",
              "code_desc": "tiger|vcap|| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000177218,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "tiger_data|vcap|| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 2.4858e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "topology|vcap|| should not match /(^|\\|)\\s*=[UC]+\\/\\w+/",
              "run_time": 0.000191034,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must use NSA-approved cryptography to protect classified\ninformation in accordance with the data owners requirements.",
          "desc": "Use of weak or untested encryption algorithms undermines the purposes of\nutilizing encryption to protect data. The application must implement cryptographic\nmodules adhering to the higher standards approved by the federal government since\nthis provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements\nin light of applicable federal laws, Executive Orders, directives, policies,\nregulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This\nrequirement addresses the compatibility of PostgreSQL with the encryption devices.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000416-DB-000380",
            "gid": "V-72991",
            "rid": "SV-87643r1_rule",
            "stig_id": "PGS9-00-008100",
            "cci": "CCI-002450",
            "nist": [
              "SC-13",
              "Rev_4"
            ],
            "check": "If PostgreSQL is deployed in an unclassified environment, this is\nnot applicable (NA).\n\nIf PostgreSQL is not using NSA-approved cryptography to protect classified\ninformation in accordance with applicable federal laws, Executive Orders,\ndirectives, policies, regulations, and standards, this is a finding.\n\nTo check if PostgreSQL is configured to use SSL, as the database administrator\n(shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW ssl\"\n\nIf SSL is off, this is a finding.\n\nConsult network administration staff to determine whether the server is protected by\nNSA-approved encrypting devices. If not, this a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo configure PostgreSQL to use SSL, as a database administrator (shown here as\n\"postgres\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameter:\n\nssl = on\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G.\n\nDeploy NSA-approved encrypting devices to protect the server on the network."
          },
          "code": "control \"V-72991\" do\n\n  title \"PostgreSQL must use NSA-approved cryptography to protect classified\ninformation in accordance with the data owners requirements.\"\n  desc  \"Use of weak or untested encryption algorithms undermines the purposes of\nutilizing encryption to protect data. The application must implement cryptographic\nmodules adhering to the higher standards approved by the federal government since\nthis provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements\nin light of applicable federal laws, Executive Orders, directives, policies,\nregulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This\nrequirement addresses the compatibility of PostgreSQL with the encryption devices.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000416-DB-000380\"\n  tag \"gid\": \"V-72991\"\n  tag \"rid\": \"SV-87643r1_rule\"\n  tag \"stig_id\": \"PGS9-00-008100\"\n  tag \"cci\": \"CCI-002450\"\n  tag \"nist\": [\"SC-13\", \"Rev_4\"]\n\n  tag \"check\": \"If PostgreSQL is deployed in an unclassified environment, this is\nnot applicable (NA).\n\nIf PostgreSQL is not using NSA-approved cryptography to protect classified\ninformation in accordance with applicable federal laws, Executive Orders,\ndirectives, policies, regulations, and standards, this is a finding.\n\nTo check if PostgreSQL is configured to use SSL, as the database administrator\n(shown here as \\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW ssl\\\"\n\nIf SSL is off, this is a finding.\n\nConsult network administration staff to determine whether the server is protected by\nNSA-approved encrypting devices. If not, this a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo configure PostgreSQL to use SSL, as a database administrator (shown here as\n\\\"postgres\\\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameter:\n\nssl = on\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\nFor more information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G.\n\nDeploy NSA-approved encrypting devices to protect the server on the network.\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW ssl;', [PG_DB]) do\n    its('output') { should match /(on|true)/i }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72991.rb",
            "line": 46
          },
          "id": "V-72991",
          "results": [
            {
              "status": "failed",
              "code_desc": "PostgreSQL query: SHOW ssl; output should match /(on|true)/i",
              "run_time": 0.000193299,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "expected \"off\" to match /(on|true)/i\nDiff:\n@@ -1,2 +1,2 @@\n-/(on|true)/i\n+\"off\"\n"
            }
          ]
        },
        {
          "title": "PostgreSQL must reveal detailed error messages only to the ISSO, ISSM,\n  SA and DBA.",
          "desc": "If PostgreSQL provides too much information in error logs and\n  administrative messages to the screen, this could lead to compromise. The\n  structure and content of error messages need to be carefully considered by\n  the organization and development team. The extent to which the information\n  system is able to identify and handle error conditions is guided by\n  organizational policy and operational requirements.\n  Some default PostgreSQL error messages can contain information that could aid\n   attacker in, among others things, identifying the database type, host\n   address, or state of the database. Custom errors may contain sensitive\n   customer information.\n   It is important that detailed error messages be visible only to those who are\n   authorized to view them; that general users receive only generalized\n   acknowledgment that errors have occurred; and that these generalized messages\n   appear only when relevant to the user's task. For example, a message along\n   the lines of, \"An error has occurred. Unable to save your changes. If this\n   problem persists, please contact your help desk\" would be relevant. A\n   message such as \"Warning: your transaction generated a large number of\n   page splits\" would likely not be relevant.\n   Administrative users authorized to review detailed error messages typically\n   are the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified\n   according to organization-specific needs, with DBA approval.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000267-DB-000163",
            "gid": "V-72889",
            "rid": "SV-87541r1_rule",
            "stig_id": "PGS9-00-002500",
            "cci": "CCI-001314",
            "nist": [
              "SI-11 b",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Check PostgreSQL settings and custom database code to determine if detailed\n  error messages are ever displayed to unauthorized individuals.\n  To check the level of detail for errors exposed to clients, as the database\n  administrator (shown here as \"postgres\"), run the following:\n  $ sudo su - postgres\n  $ grep \"client_min_messages\"\n\n  ${PGDATA?}/postgresql.conf\n  If client_min_messages is set to LOG or DEBUG, this is a finding.\n  If detailed error messages are displayed to individuals not authorized to\n  view them, this is a finding.\n\n  #### stderr Logging\n  Logs may contain detailed information and should only be accessible by the\n  database owner.\n  As the database administrator, verify the following settings of logs in the\n  postgresql.conf file.\n  Note: Consult the organization's documentation on acceptable log privileges\n  $ sudo su - postgres\n  $ grep log_directory ${PGDATA?}/postgresql.conf\n  $ grep log_file_mode ${PGDATA?}/postgresql.conf\n  Next, verify the log files have the set configurations.\n  Note: Use location of logs from log_directory.\n  $ ls -l <audit_log_path>\n  total 32\n  -rw-------. 1 postgres postgres 0 Apr 8 00:00 postgresql-Fri.log\n  -rw-------. 1 postgres postgres 8288 Apr 11 17:36 postgresql-Mon.log\n  -rw-------. 1 postgres postgres 0 Apr 9 00:00 postgresql-Sat.log\n  -rw-------. 1 postgres postgres 0 Apr 10 00:00 postgresql-Sun.log\n  -rw-------. 1 postgres postgres 16212 Apr 7 17:05 postgresql-Thu.log\n  -rw-------. 1 postgres postgres 1130 Apr 6 17:56 postgresql-Wed.log\n  If logs are not owned by the database administrator or have permissions that\n  are not 0600, this is a finding.\n\n  #### syslog Logging\n  If PostgreSQL is configured to use syslog for logging, consult the\n   organizations location and permissions for syslog log files. If the logs are\n   not owned by root or have permissions that are not 0600, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To set the level of detail for errors messages exposed to clients, as the\n  database administrator (shown here as \"postgres\"), run the following\n  commands:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  client_min_messages = notice"
          },
          "code": "control \"V-72889\" do\n  title \"PostgreSQL must reveal detailed error messages only to the ISSO, ISSM,\n  SA and DBA.\"\n  desc  \"If PostgreSQL provides too much information in error logs and\n  administrative messages to the screen, this could lead to compromise. The\n  structure and content of error messages need to be carefully considered by\n  the organization and development team. The extent to which the information\n  system is able to identify and handle error conditions is guided by\n  organizational policy and operational requirements.\n  Some default PostgreSQL error messages can contain information that could aid\n   attacker in, among others things, identifying the database type, host\n   address, or state of the database. Custom errors may contain sensitive\n   customer information.\n   It is important that detailed error messages be visible only to those who are\n   authorized to view them; that general users receive only generalized\n   acknowledgment that errors have occurred; and that these generalized messages\n   appear only when relevant to the user's task. For example, a message along\n   the lines of, \\\"An error has occurred. Unable to save your changes. If this\n   problem persists, please contact your help desk\\\" would be relevant. A\n   message such as \\\"Warning: your transaction generated a large number of\n   page splits\\\" would likely not be relevant.\n   Administrative users authorized to review detailed error messages typically\n   are the ISSO, ISSM, SA, and DBA. Other individuals or roles may be specified\n   according to organization-specific needs, with DBA approval.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000267-DB-000163\"\n  tag \"gid\": \"V-72889\"\n  tag \"rid\": \"SV-87541r1_rule\"\n  tag \"stig_id\": \"PGS9-00-002500\"\n  tag \"cci\": \"CCI-001314\"\n  tag \"nist\": [\"SI-11 b\", \"Rev_4\"]\n\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Check PostgreSQL settings and custom database code to determine if detailed\n  error messages are ever displayed to unauthorized individuals.\n  To check the level of detail for errors exposed to clients, as the database\n  administrator (shown here as \\\"postgres\\\"), run the following:\n  $ sudo su - postgres\n  $ grep \\\"client_min_messages\\\"\n\n  ${PGDATA?}/postgresql.conf\n  If client_min_messages is set to LOG or DEBUG, this is a finding.\n  If detailed error messages are displayed to individuals not authorized to\n  view them, this is a finding.\n\n  #### stderr Logging\n  Logs may contain detailed information and should only be accessible by the\n  database owner.\n  As the database administrator, verify the following settings of logs in the\n  postgresql.conf file.\n  Note: Consult the organization's documentation on acceptable log privileges\n  $ sudo su - postgres\n  $ grep log_directory ${PGDATA?}/postgresql.conf\n  $ grep log_file_mode ${PGDATA?}/postgresql.conf\n  Next, verify the log files have the set configurations.\n  Note: Use location of logs from log_directory.\n  $ ls -l <audit_log_path>\n  total 32\n  -rw-------. 1 postgres postgres 0 Apr 8 00:00 postgresql-Fri.log\n  -rw-------. 1 postgres postgres 8288 Apr 11 17:36 postgresql-Mon.log\n  -rw-------. 1 postgres postgres 0 Apr 9 00:00 postgresql-Sat.log\n  -rw-------. 1 postgres postgres 0 Apr 10 00:00 postgresql-Sun.log\n  -rw-------. 1 postgres postgres 16212 Apr 7 17:05 postgresql-Thu.log\n  -rw-------. 1 postgres postgres 1130 Apr 6 17:56 postgresql-Wed.log\n  If logs are not owned by the database administrator or have permissions that\n  are not 0600, this is a finding.\n\n  #### syslog Logging\n  If PostgreSQL is configured to use syslog for logging, consult the\n   organizations location and permissions for syslog log files. If the logs are\n   not owned by root or have permissions that are not 0600, this is a finding.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To set the level of detail for errors messages exposed to clients, as the\n  database administrator (shown here as \\\"postgres\\\"), run the following\n  commands:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  client_min_messages = notice\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  \n  describe sql.query(\"SELECT current_setting('client_min_messages');\", [PG_DB]) do\n    its('output') { should_not match /(log|debug)/i }\n  end\n\n  describe postgres_conf(PG_CONF) do\n    its('client_min_messages') { should_not match /(log|debug)/i }\n  end\n\n  if sql.query('SHOW log_destination;', [PG_DB]).output == 'stderr'\n\n    log_directory = ''\n    if postgres_conf(PG_USER_DEFINED_CONF).log_directory.nil?\n      log_directory = postgres_conf(PG_CONF).log_directory\n    else\n      log_directory = postgres_conf(PG_USER_DEFINED_CONF).log_directory\n    end\n\n    log_file_mode = ''\n    if postgres_conf(PG_USER_DEFINED_CONF).log_file_mode.nil?\n      log_file_mode = postgres_conf(PG_CONF).log_file_mode\n    else\n      log_file_mode = postgres_conf(PG_USER_DEFINED_CONF).log_file_mode\n    end\n\n    describe log_file_mode do\n      it { should eq '0600' }\n    end\n\n    describe directory(log_directory) do\n      it { should be_owned_by PG_OWNER }\n      its('mode') { should cmp '0700' }\n    end\n\n    describe command(\"find -L #{log_directory} -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user #{PG_OWNER}\") do\n      its('stdout') { should eq '' }\n      its('stderr') { should eq '' }\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72889.rb",
            "line": 69
          },
          "id": "V-72889",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SELECT current_setting('client_min_messages'); output should not match /(log|debug)/i",
              "run_time": 0.000962596,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL Configuration client_min_messages should not match /(log|debug)/i",
              "run_time": 0.000224776,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "0600 should eq \"0600\"",
              "run_time": 2e-09,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql should be owned by \"vcap\"",
              "run_time": 0.0012554,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "failed",
              "code_desc": "File /var/vcap/sys/log/postgresql mode should cmp == \"0700\"",
              "run_time": 0.001843378,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "\nexpected: \"0700\"\n     got: \"0750\"\n\n(compared using `cmp` matcher)\n"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user vcap stdout should eq \"\"",
              "run_time": 0.027452698,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find -L /var/vcap/sys/log/postgresql -type f -name 'postgresql-*.log' ! -perm 0600 -or ! -user vcap stderr should eq \"\"",
              "run_time": 0.000174489,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must be able to generate audit records when security objects\n  are accessed.",
          "desc": "Changes to the security configuration must be tracked.\n  This requirement applies to situations where security data is retrieved or\n  modified via data manipulation operations, as opposed to via specialized\n  security functionality.\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n  CREATE\n  SELECT\n  INSERT\n  UPDATE\n  DELETE\n  PREPARE\n  EXECUTE\n  ALTER\n  DRO.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000492-DB-000332",
            "gid": "V-72957",
            "rid": "SV-87609r1_rule",
            "stig_id": "PGS9-00-006000",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72957\" do\n  title \"PostgreSQL must be able to generate audit records when security objects\n  are accessed.\"\n  desc  \"Changes to the security configuration must be tracked.\n  This requirement applies to situations where security data is retrieved or\n  modified via data manipulation operations, as opposed to via specialized\n  security functionality.\n  In an SQL environment, types of access include, but are not necessarily\n  limited to:\n  CREATE\n  SELECT\n  INSERT\n  UPDATE\n  DELETE\n  PREPARE\n  EXECUTE\n  ALTER\n  DRO.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000492-DB-000332\"\n  tag \"gid\": \"V-72957\"\n  tag \"rid\": \"SV-87609r1_rule\"\n  tag \"stig_id\": \"PGS9-00-006000\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \\\"SHOW pgaudit.log\\\"\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'ddl' }\n    its('output') { should include 'read' }\n    its('output') { should include 'role' }\n    its('output') { should include 'write' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72957.rb",
            "line": 46
          },
          "id": "V-72957",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000152279,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
              "run_time": 2.1795e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
              "run_time": 0.000184996,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 0.000289612,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 0.000265892,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must separate user functionality (including user interface\nservices) from database management functionality.",
          "desc": "Information system management functionality includes functions necessary to\nadminister databases, network components, workstations, or servers and typically\nrequires privileged user access.\n\nThe separation of user functionality from information system management\nfunctionality is either physical or logical and is accomplished by using different\ncomputers, different central processing units, different instances of the operating\nsystem, different network addresses, combinations of these methods, or other\nmethods, as appropriate.\n\nAn example of this type of separation is observed in web administrative interfaces\nthat use separate authentication methods for users of any other information system\nresources.\n\nThis may include isolating the administrative interface on a different domain and\nwith additional access controls.\n\nIf administrative functionality or information regarding PostgreSQL management is\npresented on an interface available for users, information on DBMS settings may be\ninadvertently made available to the user.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000211-DB-000122",
            "gid": "V-72999",
            "rid": "SV-87651r1_rule",
            "stig_id": "PGS9-00-008500",
            "cci": "CCI-001082",
            "nist": [
              "SC-2",
              "Rev_4"
            ],
            "check": "Check PostgreSQL settings and vendor documentation to verify that\nadministrative functionality is separate from user functionality.\n\nAs the database administrator (shown here as \"postgres\"), list all roles and\npermissions for the database:\n\n$ sudo su - postgres\n$ psql -c \"\\du\"\n\nIf any non-administrative role has the attribute \"Superuser\", \"Create role\",\n\"Create DB\" or \"Bypass RLS\", this is a finding.\n\nIf administrator and general user functionality are not separated either physically\nor logically, this is a finding.",
            "fix": "Configure PostgreSQL to separate database administration and general\nuser functionality.\n\nDo not grant superuser, create role, create db or bypass rls role attributes to\nusers that do not require it.\n\nTo remove privileges, see the following example:\n\nALTER ROLE <username> NOSUPERUSER NOCREATEDB NOCREATEROLE NOBYPASSRLS;"
          },
          "code": "control \"V-72999\" do\n\n  title \"PostgreSQL must separate user functionality (including user interface\nservices) from database management functionality.\"\n  desc  \"Information system management functionality includes functions necessary to\nadminister databases, network components, workstations, or servers and typically\nrequires privileged user access.\n\nThe separation of user functionality from information system management\nfunctionality is either physical or logical and is accomplished by using different\ncomputers, different central processing units, different instances of the operating\nsystem, different network addresses, combinations of these methods, or other\nmethods, as appropriate.\n\nAn example of this type of separation is observed in web administrative interfaces\nthat use separate authentication methods for users of any other information system\nresources.\n\nThis may include isolating the administrative interface on a different domain and\nwith additional access controls.\n\nIf administrative functionality or information regarding PostgreSQL management is\npresented on an interface available for users, information on DBMS settings may be\ninadvertently made available to the user.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000211-DB-000122\"\n  tag \"gid\": \"V-72999\"\n  tag \"rid\": \"SV-87651r1_rule\"\n  tag \"stig_id\": \"PGS9-00-008500\"\n  tag \"cci\": \"CCI-001082\"\n  tag \"nist\": [\"SC-2\", \"Rev_4\"]\n\n  tag \"check\": \"Check PostgreSQL settings and vendor documentation to verify that\nadministrative functionality is separate from user functionality.\n\nAs the database administrator (shown here as \\\"postgres\\\"), list all roles and\npermissions for the database:\n\n$ sudo su - postgres\n$ psql -c \\\"\\\\du\\\"\n\nIf any non-administrative role has the attribute \\\"Superuser\\\", \\\"Create role\\\",\n\\\"Create DB\\\" or \\\"Bypass RLS\\\", this is a finding.\n\nIf administrator and general user functionality are not separated either physically\nor logically, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to separate database administration and general\nuser functionality.\n\nDo not grant superuser, create role, create db or bypass rls role attributes to\nusers that do not require it.\n\nTo remove privileges, see the following example:\n\nALTER ROLE <username> NOSUPERUSER NOCREATEDB NOCREATEROLE NOBYPASSRLS;\"\n\n sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  sql.query('\\du', [PG_DB]).output.split(\"\\n\").each do |row|\n    role, attributes, member_of = row.split('|')\n    unless PG_SUPERUSERS.include?(role)\n      describe attributes do\n        it { should_not match /(Superuser|Create DB|Create Role)/ }\n      end\n    end\n  end\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72999.rb",
            "line": 57
          },
          "id": "V-72999",
          "results": [
            {
              "status": "passed",
              "code_desc": "Cannot login should not match /(Superuser|Create DB|Create Role)/",
              "run_time": 0.001252014,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "failed",
              "code_desc": "Create role, Create DB, Cannot login should not match /(Superuser|Create DB|Create Role)/",
              "run_time": 0.000672013,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "expected \"Create role, Create DB, Cannot login\" not to match /(Superuser|Create DB|Create Role)/\nDiff:\n@@ -1,2 +1,2 @@\n-/(Superuser|Create DB|Create Role)/\n+\"Create role, Create DB, Cannot login\"\n"
            },
            {
              "status": "passed",
              "code_desc": "Replication should not match /(Superuser|Create DB|Create Role)/",
              "run_time": 0.001558727,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must be configured to prohibit or restrict the use of\n        organization-defined functions, ports, protocols, and/or services, as\n        defined in the PPSM CAL and vulnerability assessments.",
          "desc": "In order to prevent unauthorized connection of devices, unauthorized\n        transfer of information, or unauthorized tunneling (i.e., embedding of\n        data types within data types), organizations must disable or restrict\n        unused or unnecessary physical and logical ports/protocols/services on\n        information systems.\n\n        Applications are capable of providing a wide variety of functions and\n        services. Some of the functions and services provided by default may\n        not be necessary to support essential organizational operations.\n        Additionally, it is sometimes convenient to provide multiple services\n        from a single component (e.g., email and web services); however, doing\n        so increases risk over limiting the services provided by any one component.\n\n        To support the requirements and principles of least functionality, the\n        application must support the organizational requirements providing only\n        essential capabilities and limiting the use of ports, protocols, and/or\n        services to only those required, authorized, and approved to conduct\n        official business or to address authorized quality of life issues.\n\n        Database Management Systems using ports, protocols, and services deemed\n        unsafe are open to attack through those ports, protocols, and services.\n        This can allow unauthorized access to the database and through the\n        database to other components of the information system.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000142-DB-000094",
            "gid": "V-72841",
            "rid": "SV-87493r1_rule",
            "stig_id": "PGS9-00-000100",
            "cci": "CCI-001762",
            "nist": [
              "CM-7 (1) (b)",
              "Rev_4"
            ],
            "check": "As the database administrator, run the following SQL:\n\n  $ psql -c \"SHOW port\"\n\n  If the currently defined port configuration is deemed prohibited, this is a\n  finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  To change the listening port of the database, as the database administrator,\n  change the following setting in postgresql.conf:\n\n  $ sudo su - postgres\n  $ vi $PGDATA/postgresql.conf\n\n  Change the port parameter to the desired port.\n\n  Next, restart the database:\n\n  $ sudo su - postgres\n  # SYSTEMD SERVER ONLY\n  $ systemctl restart postgresql-9.5\n  # INITD SERVER ONLY\n  $ service postgresql-9.5 restart\n\n  Note: psql uses the default port 5432 by default. This can be changed by\n  specifying the port with psql or by setting the PGPORT environment variable:\n\n  $ psql -p 5432 -c \"SHOW port\"\n  $ export PGPORT=5432"
          },
          "code": "control \"V-72841\" do\n  title \"PostgreSQL must be configured to prohibit or restrict the use of\n        organization-defined functions, ports, protocols, and/or services, as\n        defined in the PPSM CAL and vulnerability assessments.\"\n  desc  \"In order to prevent unauthorized connection of devices, unauthorized\n        transfer of information, or unauthorized tunneling (i.e., embedding of\n        data types within data types), organizations must disable or restrict\n        unused or unnecessary physical and logical ports/protocols/services on\n        information systems.\n\n        Applications are capable of providing a wide variety of functions and\n        services. Some of the functions and services provided by default may\n        not be necessary to support essential organizational operations.\n        Additionally, it is sometimes convenient to provide multiple services\n        from a single component (e.g., email and web services); however, doing\n        so increases risk over limiting the services provided by any one component.\n\n        To support the requirements and principles of least functionality, the\n        application must support the organizational requirements providing only\n        essential capabilities and limiting the use of ports, protocols, and/or\n        services to only those required, authorized, and approved to conduct\n        official business or to address authorized quality of life issues.\n\n        Database Management Systems using ports, protocols, and services deemed\n        unsafe are open to attack through those ports, protocols, and services.\n        This can allow unauthorized access to the database and through the\n        database to other components of the information system.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n\n  tag \"gtitle\": \"SRG-APP-000142-DB-000094\"\n  tag \"gid\": \"V-72841\"\n  tag \"rid\": \"SV-87493r1_rule\"\n  tag \"stig_id\": \"PGS9-00-000100\"\n  tag \"cci\": \"CCI-000382\"\n  tag \"nist\": [\"CM-7 b\", \"Rev_4\"]\n  tag \"cci\": \"CCI-001762\"\n  tag \"nist\": [\"CM-7 (1) (b)\", \"Rev_4\"]\n\n  tag \"check\": \"As the database administrator, run the following SQL:\n\n  $ psql -c \\\"SHOW port\\\"\n\n  If the currently defined port configuration is deemed prohibited, this is a\n  finding.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n\n  To change the listening port of the database, as the database administrator,\n  change the following setting in postgresql.conf:\n\n  $ sudo su - postgres\n  $ vi $PGDATA/postgresql.conf\n\n  Change the port parameter to the desired port.\n\n  Next, restart the database:\n\n  $ sudo su - postgres\n  # SYSTEMD SERVER ONLY\n  $ systemctl restart postgresql-9.5\n  # INITD SERVER ONLY\n  $ service postgresql-9.5 restart\n\n  Note: psql uses the default port 5432 by default. This can be changed by\n  specifying the port with psql or by setting the PGPORT environment variable:\n\n  $ psql -p 5432 -c \\\"SHOW port\\\"\n  $ export PGPORT=5432\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW port;', [PG_DB]) do\n    its('output') { should eq PG_PORT }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72841.rb",
            "line": 52
          },
          "id": "V-72841",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW port; output should eq \"5432\"",
              "run_time": 0.00073282,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  modify privileges/permissions occur.",
          "desc": "Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n  Modifying permissions is done via the GRANT and REVOKE commands.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000495-DB-000329",
            "gid": "V-72975",
            "rid": "SV-87627r1_rule",
            "stig_id": "PGS9-00-006800",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator (shown here as\n  \"postgres\"), create a role 'bob' and a test table by running the following\n  SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob; CREATE TABLE test(id INT)\"\n  Next, set current role to bob and attempt to modify privileges:\n  $ psql -c \"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\"\n  $ psql -c \"SET ROLE bob; REVOKE ALL PRIVILEGES ON test FROM bob\"\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  unsuccessful attempt was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  2016-07-14 18:12:23.208 EDT postgres postgres ERROR: permission denied for\n  relation test\n  2016-07-14 18:12:23.208 EDT postgres postgres STATEMENT: GRANT ALL PRIVILEGES\n  ON test TO bob;\n  2016-07-14 18:14:52.895 EDT postgres postgres ERROR: permission denied for\n  relation test\n  2016-07-14 18:14:52.895 EDT postgres postgres STATEMENT: REVOKE ALL PRIVILEGES\n  ON test FROM bob;\n  If audit logs are not generated when unsuccessful attempts to modify\n  privileges/permissions occur, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to modify privileges occur.\n  All denials are logged by default if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging."
          },
          "code": "control \"V-72975\" do\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\n  modify privileges/permissions occur.\"\n  desc  \"Failed attempts to change the permissions, privileges, and roles\n  granted to users and roles must be tracked. Without an audit trail,\n  unauthorized attempts to elevate or restrict privileges could go undetected.\n  Modifying permissions is done via the GRANT and REVOKE commands.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000495-DB-000329\"\n  tag \"gid\": \"V-72975\"\n  tag \"rid\": \"SV-87627r1_rule\"\n  tag \"stig_id\": \"PGS9-00-006800\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator (shown here as\n  \\\"postgres\\\"), create a role 'bob' and a test table by running the following\n  SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE ROLE bob; CREATE TABLE test(id INT)\\\"\n  Next, set current role to bob and attempt to modify privileges:\n  $ psql -c \\\"SET ROLE bob; GRANT ALL PRIVILEGES ON test TO bob;\\\"\n  $ psql -c \\\"SET ROLE bob; REVOKE ALL PRIVILEGES ON test FROM bob\\\"\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\n  unsuccessful attempt was logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  2016-07-14 18:12:23.208 EDT postgres postgres ERROR: permission denied for\n  relation test\n  2016-07-14 18:12:23.208 EDT postgres postgres STATEMENT: GRANT ALL PRIVILEGES\n  ON test TO bob;\n  2016-07-14 18:14:52.895 EDT postgres postgres ERROR: permission denied for\n  relation test\n  2016-07-14 18:14:52.895 EDT postgres postgres STATEMENT: REVOKE ALL PRIVILEGES\n  ON test FROM bob;\n  If audit logs are not generated when unsuccessful attempts to modify\n  privileges/permissions occur, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to modify privileges occur.\n  All denials are logged by default if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging.\"\n\n  setup = 'CREATE ROLE bob; CREATE TABLE test(id INT);'\n  set_role = 'SET ROLE bob;'\n  teardown = 'DROP TABLE test; DROP ROLE bob;'\n\n  grant = \"#{set_role} GRANT ALL PRIVILEGES ON test TO bob;\"\n  revoke = \"#{set_role} REVOKE ALL PRIVILEGES ON test FROM bob;\"\n  error = 'permission denied for relation test'\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  sql.query(setup, [PG_DB])\n  sql.query(grant, [PG_DB])\n  sql.query(revoke, [PG_DB])\n  sql.query(teardown, [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(error)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(grant)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(revoke)}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72975.rb",
            "line": 46
          },
          "id": "V-72975",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ for\\ relation\\ test/",
              "run_time": 0.009374719,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ GRANT\\ ALL\\ PRIVILEGES\\ ON\\ test\\ TO\\ bob;/",
              "run_time": 0.006119986,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ REVOKE\\ ALL\\ PRIVILEGES\\ ON\\ test\\ FROM\\ bob;/",
              "run_time": 0.007901306,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when privileges/permissions are\n  added.",
          "desc": "Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n  In an SQL environment, adding permissions is typically done via the GRANT\n  command, or, in the negative, the REVOKE command.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000495-DB-000326",
            "gid": "V-72929",
            "rid": "SV-87581r1_rule",
            "stig_id": "PGS9-00-004900",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), create a\n  role by running the following SQL:\n  Change the privileges of another user:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE bob\"\n  Next, GRANT then REVOKE privileges from the role:\n  $ psql -c \"GRANT CONNECT ON DATABASE postgres TO bob\"\n  $ psql -c \"REVOKE CONNECT ON DATABASE postgres FROM bob\"\n  postgres=# REVOKE CONNECT ON DATABASE postgres FROM bob;\n  REVOKE\n  postgres=# GRANT CONNECT ON DATABASE postgres TO bob;\n  GRANT\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  events were logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n< 2016-07-13 16:25:21.103 EDT postgres\n  postgres LOG: > AUDIT: SESSION,1,1,ROLE,GRANT,,,GRANT CONNECT ON DATABASE\n  postgres TO bob,<none>\n  < 2016-07-13 16:25:25.520 EDT postgres postgres LOG: > AUDIT:\n  SESSION,1,1,ROLE,REVOKE,,,REVOKE CONNECT ON DATABASE postgres FROM bob,<none>\n  If the above steps cannot verify that audit records are produced when\n  privileges/permissions/role memberships are added, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'role'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72929\" do\n  title \"PostgreSQL must generate audit records when privileges/permissions are\n  added.\"\n  desc  \"Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n  In an SQL environment, adding permissions is typically done via the GRANT\n  command, or, in the negative, the REVOKE command.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000495-DB-000326\"\n  tag \"gid\": \"V-72929\"\n  tag \"rid\": \"SV-87581r1_rule\"\n  tag \"stig_id\": \"PGS9-00-004900\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \\\"postgres\\\"), create a\n  role by running the following SQL:\n  Change the privileges of another user:\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE ROLE bob\\\"\n  Next, GRANT then REVOKE privileges from the role:\n  $ psql -c \\\"GRANT CONNECT ON DATABASE postgres TO bob\\\"\n  $ psql -c \\\"REVOKE CONNECT ON DATABASE postgres FROM bob\\\"\n  postgres=# REVOKE CONNECT ON DATABASE postgres FROM bob;\n  REVOKE\n  postgres=# GRANT CONNECT ON DATABASE postgres TO bob;\n  GRANT\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\n  events were logged:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n< 2016-07-13 16:25:21.103 EDT postgres\n  postgres LOG: > AUDIT: SESSION,1,1,ROLE,GRANT,,,GRANT CONNECT ON DATABASE\n  postgres TO bob,<none>\n  < 2016-07-13 16:25:25.520 EDT postgres postgres LOG: > AUDIT:\n  SESSION,1,1,ROLE,REVOKE,,,REVOKE CONNECT ON DATABASE postgres FROM bob,<none>\n  If the above steps cannot verify that audit records are produced when\n  privileges/permissions/role memberships are added, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'role'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  create_role = 'CREATE ROLE bob;'\n  grant_role = \"GRANT CONNECT ON DATABASE #{PG_DB} TO bob;\"\n  revoke_role = \"REVOKE CONNECT ON DATABASE #{PG_DB} FROM bob;\"\n  drop_role = 'DROP ROLE bob;'\n\n  command = \"SET ROLE bob; UPDATE pg_authid SET rolsuper = 't' WHERE rolname = 'bob';\"\n  error = 'permission denied for relation pg_authid'\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  sql.query(create_role, [PG_DB])\n\n  describe sql.query(grant_role, [PG_DB]) do\n    its('output') { should eq 'GRANT' }\n  end\n\n  describe sql.query(revoke_role, [PG_DB]) do\n    its('output') { should eq 'REVOKE' } \n  end\n  \n  sql.query(drop_role, [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,ROLE,GRANT(,.*){2},#{Regexp.escape(grant_role)}/ } \n    its('content') { should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,ROLE,REVOKE(,.*){2},#{Regexp.escape(revoke_role)}/ } \n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72929.rb",
            "line": 45
          },
          "id": "V-72929",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: GRANT CONNECT ON DATABASE stig_test_db TO bob; output should eq \"GRANT\"",
              "run_time": 0.000354408,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: REVOKE CONNECT ON DATABASE stig_test_db FROM bob; output should eq \"REVOKE\"",
              "run_time": 0.000314824,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,ROLE,GRANT(,.*){2},GRANT\\ CONNECT\\ ON\\ DATABASE\\ stig_test_db\\ TO\\ bob;/",
              "run_time": 0.011720777,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,ROLE,REVOKE(,.*){2},REVOKE\\ CONNECT\\ ON\\ DATABASE\\ stig_test_db\\ FROM\\ bob;/",
              "run_time": 0.012229833,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "Security-relevant software updates to PostgreSQL must be installed\n  within the time period directed by an authoritative source (e.g., IAVM, CTOs,\n  DTMs, and STIGs).",
          "desc": "This control should be met through Common Control Provider - Software,\n        Patch and Vulnerability Management. Crunchy follows an agile development\n        process. Any security-related findings are documented in the development\n        backlog within Redmine and prioritized for resolution.  Issues are tracked\n        until closed via Redmine's tracking fields",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "high",
            "gtitle": "SRG-APP-000456-DB-000390",
            "gid": "V-72845",
            "rid": "SV-87497r1_rule",
            "stig_id": "PGS9-00-000300",
            "cci": "CCI-002605",
            "nist": [
              "SI-2 c",
              "Rev_4"
            ],
            "check": "If new packages are available for PostgreSQL, they can be\n  reviewed in the package manager appropriate for the server operating system:\n  To list the version of installed PostgreSQL using psql:\n  $ sudo su - postgres\n  $ psql -–version\n  To list the current version of software for RPM:\n  $ rpm -qa | grep postgres\n  To list the current version of software for APT:\n  $ apt-cache policy postgres\n  All versions of PostgreSQL will be listed on:\n  http://www.postgresql.org/support/versioning/\n  All security-relevant software updates for PostgreSQL will be listed on:\n  http://www.postgresql.org/support/security/\n  If PostgreSQL is not at the latest version, this is a finding.\n  If PostgreSQL is not at the latest version and the evaluated version has CVEs\n  (IAVAs), then this is a CAT I finding.",
            "fix": "Institute and adhere to policies and procedures to ensure that\n  patches are consistently applied to PostgreSQL within the time allowed."
          },
          "code": "  control \"V-72845\" do\n  title \"Security-relevant software updates to PostgreSQL must be installed\n  within the time period directed by an authoritative source (e.g., IAVM, CTOs,\n  DTMs, and STIGs).\"\n  desc  \"Security flaws with software applications, including database\n  management systems, are discovered daily. Vendors are constantly updating and\n  patching their products to address newly discovered security vulnerabilities.\n  Organizations (including any contractor to the organization) are required to\n  promptly install security-relevant software updates (e.g., patches, service\n  packs, and hot fixes). Flaws discovered during security assessments,\n  continuous monitoring, incident response activities, or information system\n  error handling must also be addressed expeditiously.  Organization-defined\n  time periods for updating security-relevant software may vary based on a\n  variety of factors including, for example, the security category of the\n  information system or the criticality of the update (i.e., severity of the\n  vulnerability related to the discovered flaw).  This requirement will apply\n  to software patch management solutions that are used to install patches across\n  the enclave and also to applications themselves that are not part of that p\n  atch management solution. For example, many browsers today provide the\n  capability to install their own patch software. Patch criticality, as well as\n  system criticality, will vary. Therefore, the tactical situations regarding\n  the patch management process will also vary. This means that the time period\n  utilized must be a configurable parameter. Time frames for application of\n  security-relevant software updates may be dependent upon the Information\n  Assurance Vulnerability Management (IAVM) process.  The application will\n  be configured to check for and install security-relevant software updates\n  within an identified time period from the availability of the update. The\n  specific time period will be defined by an authoritative source (e.g., IAVM,\n  CTOs, DTMs, and STIGs).\"\n  impact 0.7\n  tag \"severity\": \"high\"\n  tag \"gtitle\": \"SRG-APP-000456-DB-000390\"\n  tag \"gid\": \"V-72845\"\n  tag \"rid\": \"SV-87497r1_rule\"\n  tag \"stig_id\": \"PGS9-00-000300\"\n  tag \"cci\": \"CCI-002605\"\n  tag \"nist\": [\"SI-2 c\", \"Rev_4\"]\n\n  tag \"check\": \"If new packages are available for PostgreSQL, they can be\n  reviewed in the package manager appropriate for the server operating system:\n  To list the version of installed PostgreSQL using psql:\n  $ sudo su - postgres\n  $ psql -–version\n  To list the current version of software for RPM:\n  $ rpm -qa | grep postgres\n  To list the current version of software for APT:\n  $ apt-cache policy postgres\n  All versions of PostgreSQL will be listed on:\n  http://www.postgresql.org/support/versioning/\n  All security-relevant software updates for PostgreSQL will be listed on:\n  http://www.postgresql.org/support/security/\n  If PostgreSQL is not at the latest version, this is a finding.\n  If PostgreSQL is not at the latest version and the evaluated version has CVEs\n  (IAVAs), then this is a CAT I finding.\"\n\n  tag \"fix\": \"Institute and adhere to policies and procedures to ensure that\n  patches are consistently applied to PostgreSQL within the time allowed.\"\n\n  only_if { true }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72845.rb",
            "line": 23
          },
          "id": "V-72845"
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  execute privileged activities or other system-level access occur.",
          "desc": "Without tracking privileged activity, it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n  System documentation should include a definition of the functionality\n  considered privileged.\n\n  A privileged function in this context is any operation that modifies the\n  structure of the database, its built-in logic, or its security settings. This\n  would include all Data Definition Language (DDL) statements and all\n  security-related statements. In an SQL environment, it encompasses, but is not\n  necessarily limited to:\n\n  CREATE\n  ALTER\n  DROP\n  GRANT\n  REVOKE\n\n  Note: That it is particularly important to audit, and tightly control, any\n  action that weakens the implementation of this requirement itself, since the\n  objective is to have a complete audit trail of all administrative activity.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000504-DB-000355",
            "gid": "V-72969",
            "rid": "SV-87621r1_rule",
            "stig_id": "PGS9-00-006500",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"),\n  create the role bob by running the following SQL:\n    $ sudo su - postgres\n    $ psql -c \"CREATE ROLE bob\"\n\n  Next, change the current role to bob and attempt to execute privileged activity:\n    $ psql -c \"CREATE ROLE stig_test SUPERUSER\"\n    $ psql -c \"CREATE ROLE stig_test CREATEDB\"\n    $ psql -c \"CREATE ROLE stig_test CREATEROLE\"\n    $ psql -c \"CREATE ROLE stig_test CREATEUSER\"\n\n  Now, as the database administrator (shown here as \"postgres\"), verify that\n  an audit event was produced (use the latest log):\n    $ sudo su - postgres\n    $ cat ${PGDATA?}/pg_log/<latest_log>\n\n  < 2016-02-23 20:16:32.396 EST postgres 56cfa74f.79eb postgres: >ERROR: must be\n  superuser to create superusers\n  < 2016-02-23 20:16:32.396 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test SUPERUSER;\n  < 2016-02-23 20:16:48.725 EST postgres 56cfa74f.79eb postgres: >ERROR:\n  permission denied to create role\n  < 2016-02-23 20:16:48.725 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test CREATEDB;\n  < 2016-02-23 20:16:54.365 EST postgres 56cfa74f.79eb postgres: >ERROR: p\n  ermission denied to create role\n  < 2016-02-23 20:16:54.365 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test CREATEROLE;\n  < 2016-02-23 20:17:05.949 EST postgres 56cfa74f.79eb postgres: >ERROR: must be\n  superuser to create superusers\n  < 2016-02-23 20:17:05.949 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test CREATEUSER;\n  If audit records are not produced, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to execute privileged SQL.\n  All denials are logged by default if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging."
          },
          "code": "control \"V-72969\" do\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\n  execute privileged activities or other system-level access occur.\"\n  desc  \"Without tracking privileged activity, it would be difficult to\n  establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n  System documentation should include a definition of the functionality\n  considered privileged.\n\n  A privileged function in this context is any operation that modifies the\n  structure of the database, its built-in logic, or its security settings. This\n  would include all Data Definition Language (DDL) statements and all\n  security-related statements. In an SQL environment, it encompasses, but is not\n  necessarily limited to:\n\n  CREATE\n  ALTER\n  DROP\n  GRANT\n  REVOKE\n\n  Note: That it is particularly important to audit, and tightly control, any\n  action that weakens the implementation of this requirement itself, since the\n  objective is to have a complete audit trail of all administrative activity.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000504-DB-000355\"\n  tag \"gid\": \"V-72969\"\n  tag \"rid\": \"SV-87621r1_rule\"\n  tag \"stig_id\": \"PGS9-00-006500\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n\n  tag \"check\": \"As the database administrator (shown here as \\\"postgres\\\"),\n  create the role bob by running the following SQL:\n    $ sudo su - postgres\n    $ psql -c \\\"CREATE ROLE bob\\\"\n\n  Next, change the current role to bob and attempt to execute privileged activity:\n    $ psql -c \\\"CREATE ROLE stig_test SUPERUSER\\\"\n    $ psql -c \\\"CREATE ROLE stig_test CREATEDB\\\"\n    $ psql -c \\\"CREATE ROLE stig_test CREATEROLE\\\"\n    $ psql -c \\\"CREATE ROLE stig_test CREATEUSER\\\"\n\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify that\n  an audit event was produced (use the latest log):\n    $ sudo su - postgres\n    $ cat ${PGDATA?}/pg_log/<latest_log>\n\n  < 2016-02-23 20:16:32.396 EST postgres 56cfa74f.79eb postgres: >ERROR: must be\n  superuser to create superusers\n  < 2016-02-23 20:16:32.396 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test SUPERUSER;\n  < 2016-02-23 20:16:48.725 EST postgres 56cfa74f.79eb postgres: >ERROR:\n  permission denied to create role\n  < 2016-02-23 20:16:48.725 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test CREATEDB;\n  < 2016-02-23 20:16:54.365 EST postgres 56cfa74f.79eb postgres: >ERROR: p\n  ermission denied to create role\n  < 2016-02-23 20:16:54.365 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test CREATEROLE;\n  < 2016-02-23 20:17:05.949 EST postgres 56cfa74f.79eb postgres: >ERROR: must be\n  superuser to create superusers\n  < 2016-02-23 20:17:05.949 EST postgres 56cfa74f.79eb postgres: >STATEMENT:\n  CREATE ROLE stig_test CREATEUSER;\n  If audit records are not produced, this is a finding.\"\n\n  tag \"fix\": \"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to execute privileged SQL.\n  All denials are logged by default if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging.\"\n\n  create_role = 'CREATE ROLE bob;'\n  set_role = 'SET ROLE bob;'\n  drop_role = 'DROP ROLE bob;'\n\n  create_role_superuser = \"#{set_role} CREATE ROLE stig_test SUPERUSER;\"\n  create_role_createdb = \"#{set_role} CREATE ROLE stig_test CREATEDB;\"\n  create_role_createrole = \"#{set_role} CREATE ROLE stig_test CREATEROLE;\"\n  create_role_createuser = \"#{set_role} CREATE ROLE stig_test CREATEUSER;\"\n\n  permission_denied_error = 'permission denied to create role'\n  must_be_superuser_error = 'must be superuser to create superusers'\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  sql.query(create_role, [PG_DB])\n  sql.query(create_role_superuser, [PG_DB])\n  sql.query(create_role_createdb, [PG_DB])\n  sql.query(create_role_createrole, [PG_DB])\n  sql.query(create_role_createuser, [PG_DB])\n  sql.query(drop_role, [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(must_be_superuser_error)}/ }\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(permission_denied_error)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(create_role_superuser)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(create_role_createdb)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(create_role_createrole)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(create_role_createuser)}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72969.rb",
            "line": 46
          },
          "id": "V-72969",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*must\\ be\\ superuser\\ to\\ create\\ superusers/",
              "run_time": 0.010685342,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ to\\ create\\ role/",
              "run_time": 0.009220162,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ CREATE\\ ROLE\\ stig_test\\ SUPERUSER;/",
              "run_time": 0.011013113,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ CREATE\\ ROLE\\ stig_test\\ CREATEDB;/",
              "run_time": 0.008510265,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ CREATE\\ ROLE\\ stig_test\\ CREATEROLE;/",
              "run_time": 0.011000749,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ CREATE\\ ROLE\\ stig_test\\ CREATEUSER;/",
              "run_time": 0.017187974,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must allow only the ISSM (or individuals or roles appointed\n  by the ISSM) to select which auditable events are to be audited.",
          "desc": "Without the capability to restrict which roles and individuals can\n  select which events are audited, unauthorized personnel may be able to prevent\n  or interfere with the auditing of critical events.\n\n  Suppression of auditing could permit an adversary to evade detection.\n\n  Misconfigured audits can degrade the system's performance by overwhelming the\n  audit log. Misconfigured audits may also make it more difficult to establish,\n  correlate, and investigate the events relating to an incident or identify those\n  responsible for one.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000090-DB-000065",
            "gid": "V-72891",
            "rid": "SV-87543r1_rule",
            "stig_id": "PGS9-00-002600",
            "cci": "CCI-000171",
            "nist": [
              "AU-12 b",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Check PostgreSQL settings and documentation to determine whether designated\n  personnel are able to select which auditable events are being audited.\n  As the database administrator (shown here as \"postgres\"), verify the\n  permissions for PGDATA:\n  $ ls -la ${PGDATA?}\n  If anything in PGDATA is not owned by the database administrator, this is a\n  finding.\n  Next, as the database administrator, run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"\\du\"\n  Review the role permissions, if any role is listed as superuser but should not\n  have that access, this is a finding.",
            "fix": "Configure PostgreSQL's settings to allow designated personnel to\n  select which auditable events are audited.\n  Using pgaudit allows administrators the flexibility to choose what they log.\n  For an overview of the capabilities of pgaudit, see\n  https://github.com/pgaudit/pgaudit.\n  See supplementary content APPENDIX-B for documentation on installing pgaudit.\n  See supplementary content APPENDIX-C for instructions on enabling logging.\n  Only administrators/superuser can change PostgreSQL configurations. Access to\n  the database administrator must be limited to designated personnel only.\n  To ensure that postgresql.conf is owned by the database owner:\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\n  $ chmod 600 ${PGDATA?}/postgresql.conf"
          },
          "code": "control \"V-72891\" do\n\n  title \"PostgreSQL must allow only the ISSM (or individuals or roles appointed\n  by the ISSM) to select which auditable events are to be audited.\"\n  desc  \"Without the capability to restrict which roles and individuals can\n  select which events are audited, unauthorized personnel may be able to prevent\n  or interfere with the auditing of critical events.\n\n  Suppression of auditing could permit an adversary to evade detection.\n\n  Misconfigured audits can degrade the system's performance by overwhelming the\n  audit log. Misconfigured audits may also make it more difficult to establish,\n  correlate, and investigate the events relating to an incident or identify those\n  responsible for one.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000090-DB-000065\"\n  tag \"gid\": \"V-72891\"\n  tag \"rid\": \"SV-87543r1_rule\"\n  tag \"stig_id\": \"PGS9-00-002600\"\n  tag \"cci\": \"CCI-000171\"\n  tag \"nist\": [\"AU-12 b\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Check PostgreSQL settings and documentation to determine whether designated\n  personnel are able to select which auditable events are being audited.\n  As the database administrator (shown here as \\\"postgres\\\"), verify the\n  permissions for PGDATA:\n  $ ls -la ${PGDATA?}\n  If anything in PGDATA is not owned by the database administrator, this is a\n  finding.\n  Next, as the database administrator, run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"\\\\du\\\"\n  Review the role permissions, if any role is listed as superuser but should not\n  have that access, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL's settings to allow designated personnel to\n  select which auditable events are audited.\n  Using pgaudit allows administrators the flexibility to choose what they log.\n  For an overview of the capabilities of pgaudit, see\n  https://github.com/pgaudit/pgaudit.\n  See supplementary content APPENDIX-B for documentation on installing pgaudit.\n  See supplementary content APPENDIX-C for instructions on enabling logging.\n  Only administrators/superuser can change PostgreSQL configurations. Access to\n  the database administrator must be limited to designated personnel only.\n  To ensure that postgresql.conf is owned by the database owner:\n  $ chown postgres:postgres ${PGDATA?}/postgresql.conf\n  $ chmod 600 ${PGDATA?}/postgresql.conf\"\n\n  describe directory(PG_DATA) do\n    it { should be_owned_by PG_OWNER }\n    its('mode') { should  cmp '0700' }\n  end\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  sql.query('\\du;', [PG_DB]).output.split(\"\\n\").each do |row|\n    role, attributes, member_of = row.split('|')\n    unless PG_SUPERUSERS.include?(role)\n      describe attributes do\n        it { should_not match /Superuser/ }\n      end\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72891.rb",
            "line": 63
          },
          "id": "V-72891",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data should be owned by \"vcap\"",
              "run_time": 0.000380804,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data mode should cmp == \"0700\"",
              "run_time": 0.001422331,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Cannot login should not match /Superuser/",
              "run_time": 0.001043965,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Create role, Create DB, Cannot login should not match /Superuser/",
              "run_time": 0.005996353,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Replication should not match /Superuser/",
              "run_time": 0.002697921,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when unsuccessful attempts to\n  modify categorized information (e.g., classification levels/security levels)\n  occur.",
          "desc": "Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000498-DB-000347",
            "gid": "V-72949",
            "rid": "SV-87601r1_rule",
            "stig_id": "PGS9-00-005600",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain \"pgaudit\", this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, read, write, and ddl, this is a finding.",
            "fix": "Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to modify categories of information.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. All denials are logged when logging is enabled.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72949\" do\n  title \"PostgreSQL must generate audit records when unsuccessful attempts to\n  modify categorized information (e.g., classification levels/security levels)\n  occur.\"\n  desc  \"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  To aid in diagnosis, it is necessary to keep track of failed attempts in\n  addition to the successful ones.\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000498-DB-000347\"\n  tag \"gid\": \"V-72949\"\n  tag \"rid\": \"SV-87601r1_rule\"\n  tag \"stig_id\": \"PGS9-00-005600\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\n  If the output does not contain \\\"pgaudit\\\", this is a finding.\n  Next, verify that role, read, write, and ddl auditing are enabled:\n  $ psql -c \\\"SHOW pgaudit.log\\\"\n  If the output does not contain role, read, write, and ddl, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to produce audit records when unsuccessful\n  attempts to modify categories of information.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging. All denials are logged when logging is enabled.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='ddl, role, read, write'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'ddl' }\n    its('output') { should include 'read' }\n    its('output') { should include 'role' }\n    its('output') { should include 'write' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72949.rb",
            "line": 46
          },
          "id": "V-72949",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.005860004,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
              "run_time": 0.000523723,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
              "run_time": 0.00033817,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 0.001102695,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 0.000461001,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "The PostgreSQL software installation account must be restricted to\n  authorized users.",
          "desc": "Once released as BOSH package software libraries can not be changed.\n        Any changes to the software libriaries can ONLY be done by creating and\n        deploying a new BOSH release. This is Software-Defined-Infrustructure",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000133-DB-000198",
            "gid": "V-72899",
            "rid": "SV-87551r1_rule",
            "stig_id": "PGS9-00-003200",
            "cci": "CCI-001499",
            "nist": [
              "CM-5 (6)",
              "Rev_4"
            ],
            "check": "Review procedures for controlling, granting access to, and\n  tracking use of the PostgreSQL software installation account(s).\n  If access or use of this account is not restricted to the minimum number of\n  personnel required or if unauthorized access to the account has been granted,\n  this is a finding.",
            "fix": "Develop, document, and implement procedures to restrict and track\n  use of the PostgreSQL software installation account."
          },
          "code": "control \"V-72899\" do\n  title \"The PostgreSQL software installation account must be restricted to\n  authorized users.\"\n  desc  \"When dealing with change control issues, it should be noted any changes\n  to the hardware, software, and/or firmware components of the information\n  system and/or application can have significant effects on the overall security\n  of the system.\n  If the system were to allow any user to make changes to software libraries,\n  those changes might be implemented without undergoing the appropriate testing\n  and approvals that are part of a robust change management process.\n  Accordingly, only qualified and authorized individuals must be allowed access\n  to information system components for purposes of initiating changes, including\n  upgrades and modifications.\n  DBA and other privileged administrative or application owner accounts are\n  granted privileges that allow actions that can have a great impact on database\n  security and operation. It is especially important to grant privileged access\n  to only those persons who are qualified and authorized to use them.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000133-DB-000198\"\n  tag \"gid\": \"V-72899\"\n  tag \"rid\": \"SV-87551r1_rule\"\n  tag \"stig_id\": \"PGS9-00-003200\"\n  tag \"cci\": \"CCI-001499\"\n  tag \"nist\": [\"CM-5 (6)\", \"Rev_4\"]\n  tag \"check\": \"Review procedures for controlling, granting access to, and\n  tracking use of the PostgreSQL software installation account(s).\n  If access or use of this account is not restricted to the minimum number of\n  personnel required or if unauthorized access to the account has been granted,\n  this is a finding.\"\n  tag \"fix\": \"Develop, document, and implement procedures to restrict and track\n  use of the PostgreSQL software installation account.\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72899.rb",
            "line": 23
          },
          "id": "V-72899",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 2.4001e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must allocate audit record storage capacity in accordance\n  with organization-defined audit record storage requirements.",
          "desc": "System is sized based on its intended use and constantly monitored",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000357-DB-000316",
            "gid": "V-72877",
            "rid": "SV-87529r1_rule",
            "stig_id": "PGS9-00-002100",
            "cci": "CCI-001849",
            "nist": [
              "AU-4",
              "Rev_4"
            ],
            "check": "Investigate whether there have been any incidents where\n  PostgreSQL ran out of audit log space since the last time the space was\n  allocated or other corrective measures were taken.\n  If there have been incidents where PostgreSQL ran out of audit log space,\n  this is a finding.",
            "fix": "Allocate sufficient audit file/table space to support peak demand."
          },
          "code": "control \"V-72877\" do\n  title \"PostgreSQL must allocate audit record storage capacity in accordance\n  with organization-defined audit record storage requirements.\"\n  desc  \"In order to ensure sufficient storage capacity for the audit logs,\n  PostgreSQL must be able to allocate audit record storage capacity. Although\n  another requirement (SRG-APP-000515-DB-000318) mandates that audit data be\n  off-loaded to a centralized log management system, it remains necessary to\n  provide space on the database server to serve as a buffer against outages and\n  capacity limits of the off-loading mechanism.\n  The task of allocating audit record storage capacity is usually performed\n  during initial installation of PostgreSQL and is closely associated with the\n  DBA and system administrator roles. The DBA or system administrator will\n  usually coordinate the allocation of physical drive space with the application\n  owner/installer and the application will prompt the installer to provide the\n  capacity information, the physical location of the disk, or both.\n  In determining the capacity requirements, consider such factors as: total\n  number of users; expected number of concurrent users during busy periods;\n  number and type of events being monitored; types and amounts of data being\n  captured; the frequency/speed with which audit records are off-loaded to the\n  central log management system; and any limitations that exist on PostgreSQL's\n  ability to reuse the space formerly occupied by off-loaded records.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000357-DB-000316\"\n  tag \"gid\": \"V-72877\"\n  tag \"rid\": \"SV-87529r1_rule\"\n  tag \"stig_id\": \"PGS9-00-002100\"\n  tag \"cci\": \"CCI-001849\"\n  tag \"nist\": [\"AU-4\", \"Rev_4\"]\n  tag \"check\": \"Investigate whether there have been any incidents where\n  PostgreSQL ran out of audit log space since the last time the space was\n  allocated or other corrective measures were taken.\n  If there have been incidents where PostgreSQL ran out of audit log space,\n  this is a finding.\"\n  tag \"fix\": \"Allocate sufficient audit file/table space to support peak demand.\"\n\n  only_if { false }\n  \nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72877.rb",
            "line": 23
          },
          "id": "V-72877",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 1.0005e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must map the PKI-authenticated identity to an associated user\naccount.",
          "desc": "Crunchy DBaaS exclusively utilizes System Accounts which are negotiated\n  through the Service Broker interactions. Crunchy does not maintain any\n  user accounts.",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000177-DB-000069",
            "gid": "V-73055",
            "rid": "SV-87707r1_rule",
            "stig_id": "PGS9-00-011800",
            "cci": "CCI-000187",
            "nist": [
              "IA-5 (2) (c)",
              "Rev_4"
            ],
            "check": "The cn (Common Name) attribute of the certificate will be compared\nto the requested database user name, and if they match the login will be allowed.\n\nTo check the cn of the certificate, using openssl, do the following:\n\n$ openssl x509 -noout -subject -in client_cert\n\nIf the cn does not match the users listed in PostgreSQL and no user mapping is used,\nthis is a finding.\n\nUser name mapping can be used to allow cn to be different from the database user\nname. If User Name Maps are used, run the following as the database administrator\n(shown here as \"postgres\"), to get a list of maps used for authentication:\n\n$ sudo su - postgres\n$ grep \"map\" ${PGDATA?}/pg_hba.conf\n\nWith the names of the maps used, check those maps against the user name mappings in\npg_ident.conf:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/pg_ident.conf\n\nIf user accounts are not being mapped to authenticated identities, this is a finding.\n\nIf the cn and the username mapping do not match, this is a finding.",
            "fix": "Configure PostgreSQL to map authenticated identities directly to\nPostgreSQL user accounts.\n\nFor information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G."
          },
          "code": "control \"V-73055\" do\n  title \"PostgreSQL must map the PKI-authenticated identity to an associated user\naccount.\"\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates. Once\na PKI certificate has been validated, it must be mapped to PostgreSQL user account\nfor the authenticated identity to be meaningful to PostgreSQL and useful for\nauthorization decisions.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000177-DB-000069\"\n  tag \"gid\": \"V-73055\"\n  tag \"rid\": \"SV-87707r1_rule\"\n  tag \"stig_id\": \"PGS9-00-011800\"\n  tag \"cci\": \"CCI-000187\"\n  tag \"nist\": [\"IA-5 (2) (c)\", \"Rev_4\"]\n  tag \"check\": \"The cn (Common Name) attribute of the certificate will be compared\nto the requested database user name, and if they match the login will be allowed.\n\nTo check the cn of the certificate, using openssl, do the following:\n\n$ openssl x509 -noout -subject -in client_cert\n\nIf the cn does not match the users listed in PostgreSQL and no user mapping is used,\nthis is a finding.\n\nUser name mapping can be used to allow cn to be different from the database user\nname. If User Name Maps are used, run the following as the database administrator\n(shown here as \\\"postgres\\\"), to get a list of maps used for authentication:\n\n$ sudo su - postgres\n$ grep \\\"map\\\" ${PGDATA?}/pg_hba.conf\n\nWith the names of the maps used, check those maps against the user name mappings in\npg_ident.conf:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/pg_ident.conf\n\nIf user accounts are not being mapped to authenticated identities, this is a finding.\n\nIf the cn and the username mapping do not match, this is a finding.\"\n  tag \"fix\": \"Configure PostgreSQL to map authenticated identities directly to\nPostgreSQL user accounts.\n\nFor information on configuring PostgreSQL to use SSL, see supplementary content\nAPPENDIX-G.\"\n\n  # @todo need to finish the `hba_conf` resource\n  # @todo need to get test certificate to test\n  # @todo need to 'standardize' the mapping method(s) we will test for\n  #   - this may imply that we need a pki or a pam_pki resource\n\n  only_if { false }\n\n  # # rough code for future use\n  #\n  # describe x509_certificate do\n  #   its('cn') { should include PG_OWNER }\n  # end\n  #\n  # (user,role) = pg_ident_conf(PG_IDENT_CONF_FILE).user_map\n  #\n  # describe pg_hba_conf.users.each do |user,role|\n  #   next unless user == PG_OWNER\n  #   its('roles') { should include role }\n  # end\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73055.rb",
            "line": 23
          },
          "id": "V-73055",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 1.0532e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "The system must provide a warning to appropriate support staff when\nallocated audit record storage volume reaches 75% of maximum audit record storage\ncapacity.",
          "desc": "Centralized Enterprize monitoring and alerting solution is not yet\n        implemented by the sponsor. Crunchy services are constantly undergo extensive\n        health checks",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000359-DB-000319",
            "gid": "V-73023",
            "rid": "SV-87675r1_rule",
            "stig_id": "PGS9-00-009900",
            "cci": "CCI-001855",
            "nist": [
              "AU-5 (1)",
              "Rev_4"
            ],
            "check": "Review system configuration.\n\nIf no script/tool is monitoring the partition for the PostgreSQL log directories,\nthis is a finding.\n\nIf appropriate support staff are not notified immediately upon storage volume\nutilization reaching 75%, this is a finding.",
            "fix": "Configure the system to notify appropriate support staff immediately\nupon storage volume utilization reaching 75%.\n\nPostgreSQL does not monitor storage, however, it is possible to monitor storage with\na script.\n\n##### Example Monitoring Script\n\n#!/bin/bash\n\nPGDATA=/var/lib/psql/9.5/data\nCURRENT=$(df ${PGDATA?} | grep / | awk '{ print $5}' | sed 's/%//g')\nTHRESHOLD=75\n\nif [ \"$CURRENT\" -gt \"$THRESHOLD\" ] ; then\nmail -s 'Disk Space Alert' mail@support.com << EOF\nThe data directory volume is almost full. Used: $CURRENT\n%EOF\nfi\n\nSchedule this script in cron to run around the clock."
          },
          "code": "control \"V-73023\" do\n  title \"The system must provide a warning to appropriate support staff when\nallocated audit record storage volume reaches 75% of maximum audit record storage\ncapacity.\"\n  desc  \"Organizations are required to use a central log management system, so,\nunder normal conditions, the audit space allocated to PostgreSQL on its own server\nwill not be an issue. However, space will still be required on PostgreSQL server for\naudit records in transit, and, under abnormal conditions, this could fill up. Since\na requirement exists to halt processing upon audit failure, a service outage would\nresult.\n\nIf support personnel are not notified immediately upon storage volume utilization\nreaching 75%, they are unable to plan for storage capacity expansion.\n\nThe appropriate support staff include, at a minimum, the ISSO and the DBA/SA.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000359-DB-000319\"\n  tag \"gid\": \"V-73023\"\n  tag \"rid\": \"SV-87675r1_rule\"\n  tag \"stig_id\": \"PGS9-00-009900\"\n  tag \"cci\": \"CCI-001855\"\n  tag \"nist\": [\"AU-5 (1)\", \"Rev_4\"]\n  tag \"check\": \"Review system configuration.\n\nIf no script/tool is monitoring the partition for the PostgreSQL log directories,\nthis is a finding.\n\nIf appropriate support staff are not notified immediately upon storage volume\nutilization reaching 75%, this is a finding.\"\n  tag \"fix\": \"Configure the system to notify appropriate support staff immediately\nupon storage volume utilization reaching 75%.\n\nPostgreSQL does not monitor storage, however, it is possible to monitor storage with\na script.\n\n##### Example Monitoring Script\n\n#!/bin/bash\n\nPGDATA=/var/lib/psql/9.5/data\nCURRENT=$(df ${PGDATA?} | grep / | awk '{ print $5}' | sed 's/%//g')\nTHRESHOLD=75\n\nif [ \\\"$CURRENT\\\" -gt \\\"$THRESHOLD\\\" ] ; then\nmail -s 'Disk Space Alert' mail@support.com << EOF\nThe data directory volume is almost full. Used: $CURRENT\n%EOF\nfi\n\nSchedule this script in cron to run around the clock.\"\n\n  only_if { false }\n  \nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73023.rb",
            "line": 23
          },
          "id": "V-73023",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 1.1928e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must record time stamps, in audit records and application\n  data, that can be mapped to Coordinated Universal Time (UTC, formerly GMT).",
          "desc": "If time stamps are not consistently applied and there is no common time\n  reference, it is difficult to perform forensic analysis.\n  Time stamps generated by PostgreSQL must include date and time. Time is\n  commonly expressed in Coordinated Universal Time (UTC), a modern continuation\n  of Greenwich Mean Time (GMT), or local time with an offset from UTC.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000374-DB-000322",
            "gid": "V-72887",
            "rid": "SV-87539r1_rule",
            "stig_id": "PGS9-00-002400",
            "cci": "CCI-001890",
            "nist": [
              "AU-8 b",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  When a PostgreSQL cluster is initialized using initdb, the PostgreSQL cluster\n  will be configured to use the same time zone as the target server.\n  As the database administrator (shown here as \"postgres\"), check the current\n  log_timezone setting by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW log_timezone\"\n  log_timezone\n  --------------\n  UTC\n  (1 row)\n  If log_timezone is not set to the desired time zone, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To change log_timezone in postgresql.conf to use a different time zone for\n  logs, as the database administrator (shown here as \"postgres\"), run the\n  following:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_timezone='UTC'\n  Next, restart the database:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl restart postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 restart"
          },
          "code": "control \"V-72887\" do\n  title \"PostgreSQL must record time stamps, in audit records and application\n  data, that can be mapped to Coordinated Universal Time (UTC, formerly GMT).\"\n  desc  \"If time stamps are not consistently applied and there is no common time\n  reference, it is difficult to perform forensic analysis.\n  Time stamps generated by PostgreSQL must include date and time. Time is\n  commonly expressed in Coordinated Universal Time (UTC), a modern continuation\n  of Greenwich Mean Time (GMT), or local time with an offset from UTC.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000374-DB-000322\"\n  tag \"gid\": \"V-72887\"\n  tag \"rid\": \"SV-87539r1_rule\"\n  tag \"stig_id\": \"PGS9-00-002400\"\n  tag \"cci\": \"CCI-001890\"\n  tag \"nist\": [\"AU-8 b\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  When a PostgreSQL cluster is initialized using initdb, the PostgreSQL cluster\n  will be configured to use the same time zone as the target server.\n  As the database administrator (shown here as \\\"postgres\\\"), check the current\n  log_timezone setting by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW log_timezone\\\"\n  log_timezone\n  --------------\n  UTC\n  (1 row)\n  If log_timezone is not set to the desired time zone, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To change log_timezone in postgresql.conf to use a different time zone for\n  logs, as the database administrator (shown here as \\\"postgres\\\"), run the\n  following:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  log_timezone='UTC'\n  Next, restart the database:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl restart postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 restart\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW log_timezone;', [PG_DB]) do\n    its('output') { should eq PG_TIMEZONE }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72887.rb",
            "line": 51
          },
          "id": "V-72887",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_timezone; output should eq \"UTC\"",
              "run_time": 0.00047154,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must protect its audit configuration from unauthorized\n        modification.",
          "desc": "Protecting audit data also includes identifying and protecting the tools\n        used to view and manipulate log data. Therefore, protecting audit tools\n        is necessary to prevent unauthorized operation on audit data.\n\n        Applications providing tools to interface with audit data will leverage\n        user permissions and roles identifying the user accessing the tools and\n        the corresponding rights the user enjoys in order make access decisions\n        regarding the modification of audit tools.\n\n        Audit tools include, but are not limited to, vendor-provided and open source\n        audit tools needed to successfully view and manipulate audit information\n        system activity and records. Audit tools include custom queries and\n        report generators.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000122-DB-000203",
            "gid": "V-73061",
            "rid": "SV-87713r1_rule",
            "stig_id": "PGS9-00-012200",
            "cci": "CCI-001494",
            "nist": [
              "AU-9",
              "Rev_4"
            ],
            "check": "All configurations for auditing and logging can be found in the\n      postgresql.conf configuration file. By default, this file is owned by the\n      database administrator account.\n\n      To check that the permissions of the postgresql.conf are owned by the database\n      administrator with permissions of 0600, run the following as the database\n      administrator (shown here as \"postgres\"):\n\n      $ sudo su - postgres\n      $ ls -la ${PGDATA?}\n\n      If postgresql.conf is not owned by the database administrator or does not\n      have 0600 permissions, this is a finding.\n\n      #### stderr Logging\n\n      To check that logs are created with 0600 permissions, check the\n      postgresql.conf file for the following setting:\n\n      $ sudo su - postgres\n      $ psql -c \"SHOW log_file_mode\"\n\n      If permissions are not 0600, this is a finding.\n\n      #### syslog Logging\n\n      If PostgreSQL is configured to use syslog, verify that the logs are owned\n      by root and have 0600 permissions. If they are not, this is a finding.",
            "fix": "Apply or modify access controls and permissions (both within PostgreSQL\n      and in the file system/operating system) to tools used to view or modify\n      audit log data. Tools must be configurable by authorized personnel only.\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n      log_file_mode = 0600\n\n      Next, as the database administrator (shown here as \"postgres\"), change\n      the ownership and permissions of configuration files in PGDATA:\n\n      $ sudo su - postgres\n      $ chown postgres:postgres ${PGDATA?}/*.conf\n      $ chmod 0600 ${PGDATA?}/*.conf"
          },
          "code": "control \"V-73061\" do\n  title \"PostgreSQL must protect its audit configuration from unauthorized\n        modification.\"\n  desc  \"Protecting audit data also includes identifying and protecting the tools\n        used to view and manipulate log data. Therefore, protecting audit tools\n        is necessary to prevent unauthorized operation on audit data.\n\n        Applications providing tools to interface with audit data will leverage\n        user permissions and roles identifying the user accessing the tools and\n        the corresponding rights the user enjoys in order make access decisions\n        regarding the modification of audit tools.\n\n        Audit tools include, but are not limited to, vendor-provided and open source\n        audit tools needed to successfully view and manipulate audit information\n        system activity and records. Audit tools include custom queries and\n        report generators.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n\n  tag \"gtitle\": \"SRG-APP-000122-DB-000203\"\n  tag \"gid\": \"V-73061\"\n  tag \"rid\": \"SV-87713r1_rule\"\n  tag \"stig_id\": \"PGS9-00-012200\"\n  tag \"cci\": \"CCI-001494\"\n  tag \"nist\": [\"AU-9\", \"Rev_4\"]\n\n  tag \"check\": \"All configurations for auditing and logging can be found in the\n      postgresql.conf configuration file. By default, this file is owned by the\n      database administrator account.\n\n      To check that the permissions of the postgresql.conf are owned by the database\n      administrator with permissions of 0600, run the following as the database\n      administrator (shown here as \\\"postgres\\\"):\n\n      $ sudo su - postgres\n      $ ls -la ${PGDATA?}\n\n      If postgresql.conf is not owned by the database administrator or does not\n      have 0600 permissions, this is a finding.\n\n      #### stderr Logging\n\n      To check that logs are created with 0600 permissions, check the\n      postgresql.conf file for the following setting:\n\n      $ sudo su - postgres\n      $ psql -c \\\"SHOW log_file_mode\\\"\n\n      If permissions are not 0600, this is a finding.\n\n      #### syslog Logging\n\n      If PostgreSQL is configured to use syslog, verify that the logs are owned\n      by root and have 0600 permissions. If they are not, this is a finding.\"\n\n  tag \"fix\": \"Apply or modify access controls and permissions (both within PostgreSQL\n      and in the file system/operating system) to tools used to view or modify\n      audit log data. Tools must be configurable by authorized personnel only.\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n      log_file_mode = 0600\n\n      Next, as the database administrator (shown here as \\\"postgres\\\"), change\n      the ownership and permissions of configuration files in PGDATA:\n\n      $ sudo su - postgres\n      $ chown postgres:postgres ${PGDATA?}/*.conf\n      $ chmod 0600 ${PGDATA?}/*.conf\"\n\n  describe file(PG_CONF) do\n    its('mode') { should cmp '0600' }\n  end\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  log_destination = sql.query('SHOW log_destination;', [PG_DB]).output\n  if log_destination == 'stderr'\n    describe sql.query('SHOW log_file_mode;', [PG_DB]) do\n      its('output') { should cmp '0600' }\n    end\n  end\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73061.rb",
            "line": 105
          },
          "id": "V-73061",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data/postgresql.conf mode should cmp == \"0600\"",
              "run_time": 0.029095291,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_file_mode; output should cmp == \"0600\"",
              "run_time": 0.000726705,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must associate organization-defined types of security labels\n  having organization-defined security label values with information in\ntransmission.",
          "desc": "No  security labeling requirements have been specified. It is ISO\n        responsibility to utilize PostgreSQL RLS capabilities",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000314-DB-000310",
            "gid": "V-72861",
            "rid": "SV-87513r1_rule",
            "stig_id": "PGS9-00-001100",
            "cci": "CCI-002264",
            "nist": [
              "AC-16 a",
              "Rev_4"
            ],
            "check": "If security labeling is not required, this is not a finding.\n  First, as the database administrator (shown here as \"postgres\"), run the\n  following SQL against each table that requires security labels:\n  $ sudo su - postgres\n  $ psql -c \"\\d+ <schema_name>.<table_name>\"\n  If security labeling is required and the results of the SQL above do not show\n    a policy attached to the table, this is a finding.\n    If security labeling is required and not implemented according to the system\n    documentation, such as SSP, this is a finding.\n    If security labeling requirements have been specified, but the security\n    labeling is not implemented or does not reliably maintain labels on\n    information in storage, this is a finding.",
            "fix": "In addition to the SQL-standard privilege system available through\n  GRANT, tables can have row security policies that restrict, on a per-user\n  basis, which rows can be returned by normal queries or inserted, updated, or\n  deleted by data modification commands. This feature is also known as Row-Level\n  Security (RLS).\n  RLS policies can be very different depending on their use case. For one\n    example of using RLS for Security Labels, see supplementary content APPENDIX-D."
          },
          "code": "control \"V-72861\" do\n  title \"PostgreSQL must associate organization-defined types of security labels\n  having organization-defined security label values with information in\ntransmission.\"\n  desc  \"Without the association of security labels to information, there is no\n  basis for PostgreSQL to make security-related access-control decisions.\n  Security labels are abstractions representing the basic properties or\n  characteristics of an entity (e.g., subjects and objects) with respect to\n  safeguarding information.\n  These labels are typically associated with internal data structures (e.g.,\n  tables, rows) within the database and are used to enable the implementation of\n  access control and flow control policies, reflect special dissemination,\n  handling or distribution instructions, or support other aspects of the\n  information security policy.\n  One example includes marking data as classified or FOUO. These security\n  labels may be assigned manually or during data processing, but, either way,\n  it is imperative these assignments are maintained while the data is in storage.\n  If the security labels are lost when the data is stored, there is the risk of\n  a data compromise.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000314-DB-000310\"\n  tag \"gid\": \"V-72861\"\n  tag \"rid\": \"SV-87513r1_rule\"\n  tag \"stig_id\": \"PGS9-00-001100\"\n  tag \"cci\": \"CCI-002264\"\n  tag \"nist\": [\"AC-16 a\", \"Rev_4\"]\n  tag \"check\": \"If security labeling is not required, this is not a finding.\n  First, as the database administrator (shown here as \\\"postgres\\\"), run the\n  following SQL against each table that requires security labels:\n  $ sudo su - postgres\n  $ psql -c \\\"\\\\d+ <schema_name>.<table_name>\\\"\n  If security labeling is required and the results of the SQL above do not show\n    a policy attached to the table, this is a finding.\n    If security labeling is required and not implemented according to the system\n    documentation, such as SSP, this is a finding.\n    If security labeling requirements have been specified, but the security\n    labeling is not implemented or does not reliably maintain labels on\n    information in storage, this is a finding.\"\n  tag \"fix\": \"In addition to the SQL-standard privilege system available through\n  GRANT, tables can have row security policies that restrict, on a per-user\n  basis, which rows can be returned by normal queries or inserted, updated, or\n  deleted by data modification commands. This feature is also known as Row-Level\n  Security (RLS).\n  RLS policies can be very different depending on their use case. For one\n    example of using RLS for Security Labels, see supplementary content APPENDIX-D.\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72861.rb",
            "line": 23
          },
          "id": "V-72861",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 1.3568e-05,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must uniquely identify and authenticate non-organizational\n  users (or processes acting on behalf of non-organizational users).",
          "desc": "Non-organizational users include all information system users other\n  than organizational users, which includes organizational employees or\n  individuals the organization deems to have equivalent status of employees\n  (e.g., contractors, guest researchers, individuals from allied nations).\n  Non-organizational users must be uniquely identified and authenticated for all\n  accesses other than those accesses explicitly identified and documented by the\n  organization when related to the use of anonymous access, such as accessing a\n  web server.\n  Accordingly, a risk assessment is used in determining the authentication needs\n  of the organization.\n  Scalability, practicality, and security are simultaneously considered in\n  balancing the need to ensure ease of use for access to federal information and\n  information systems with the need to protect and adequately mitigate risk to\n  organizational operations, organizational assets, individuals, other\n  organizations, and the Nation.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000180-DB-000115",
            "gid": "V-72867",
            "rid": "SV-87519r1_rule",
            "stig_id": "PGS9-00-001400",
            "cci": "CCI-000804",
            "nist": [
              "IA-8",
              "Rev_4"
            ],
            "check": "PostgreSQL uniquely identifies and authenticates PostgreSQL\n  users through the use of DBMS roles.\n  To list all roles in the database, as the database administrator (shown here\n  as \"postgres\"), run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"\\du\"\n  If users are not uniquely identified as per organizational documentation, this\n  is a finding.",
            "fix": "To drop a role, as the database administrator (shown here as\n  \"postgres\"), run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"DROP ROLE <role_to_drop>\"\n  To create a role, as the database administrator, run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE ROLE <role name> LOGIN\"\n  For the complete list of permissions allowed by roles, see the official\n  documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html"
          },
          "code": "control \"V-72867\" do\n  title \"PostgreSQL must uniquely identify and authenticate non-organizational\n  users (or processes acting on behalf of non-organizational users).\"\n  desc  \"Non-organizational users include all information system users other\n  than organizational users, which includes organizational employees or\n  individuals the organization deems to have equivalent status of employees\n  (e.g., contractors, guest researchers, individuals from allied nations).\n  Non-organizational users must be uniquely identified and authenticated for all\n  accesses other than those accesses explicitly identified and documented by the\n  organization when related to the use of anonymous access, such as accessing a\n  web server.\n  Accordingly, a risk assessment is used in determining the authentication needs\n  of the organization.\n  Scalability, practicality, and security are simultaneously considered in\n  balancing the need to ensure ease of use for access to federal information and\n  information systems with the need to protect and adequately mitigate risk to\n  organizational operations, organizational assets, individuals, other\n  organizations, and the Nation.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000180-DB-000115\"\n  tag \"gid\": \"V-72867\"\n  tag \"rid\": \"SV-87519r1_rule\"\n  tag \"stig_id\": \"PGS9-00-001400\"\n  tag \"cci\": \"CCI-000804\"\n  tag \"nist\": [\"IA-8\", \"Rev_4\"]\n  tag \"check\": \"PostgreSQL uniquely identifies and authenticates PostgreSQL\n  users through the use of DBMS roles.\n  To list all roles in the database, as the database administrator (shown here\n  as \\\"postgres\\\"), run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"\\\\du\\\"\n  If users are not uniquely identified as per organizational documentation, this\n  is a finding.\"\n  tag \"fix\": \"To drop a role, as the database administrator (shown here as\n  \\\"postgres\\\"), run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"DROP ROLE <role_to_drop>\\\"\n  To create a role, as the database administrator, run the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE ROLE <role name> LOGIN\\\"\n  For the complete list of permissions allowed by roles, see the official\n  documentation: https://www.postgresql.org/docs/current/static/sql-createrole.html\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  \n  roles = []\n  sql.query('\\du', [PG_DB]).output.split(\"\\n\").each do |row|\n    roles.push(row.split('|').first)\n  end\n\n  roles.each do |role|\n    describe role do\n      it { should match /#{PG_AUTHORIZED_ROLES.join('|')}/ }\n    end\n  end\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72867.rb",
            "line": 50
          },
          "id": "V-72867",
          "results": [
            {
              "status": "passed",
              "code_desc": "crunchy should match /jesse|vcap|crunchy|haproxy|replication/",
              "run_time": 0.000207745,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "haproxy should match /jesse|vcap|crunchy|haproxy|replication/",
              "run_time": 0.001784671,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "jesse should match /jesse|vcap|crunchy|haproxy|replication/",
              "run_time": 0.000267994,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "replication should match /jesse|vcap|crunchy|haproxy|replication/",
              "run_time": 0.000268947,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "vcap should match /jesse|vcap|crunchy|haproxy|replication/",
              "run_time": 0.000224711,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "If passwords are used for authentication, PostgreSQL must store only\nhashed, salted representations of passwords.",
          "desc": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not\npossible to employ a PKI certificate, and requires AO approval.\n\nIn such cases, database passwords stored in clear text, using reversible encryption,\nor using unsalted hashes would be vulnerable to unauthorized disclosure. Database\npasswords must always be in the form of one-way, salted hashes when stored\ninternally or externally to PostgreSQL.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000171-DB-000074",
            "gid": "V-73015",
            "rid": "SV-87667r1_rule",
            "stig_id": "PGS9-00-009500",
            "cci": "CCI-000196",
            "nist": [
              "IA-5 (1) (c)",
              "Rev_4"
            ],
            "check": "To check if password encryption is enabled, as the database\nadministrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW password_encryption\"\n\nIf password_encryption is not on, this is a finding.\n\nNext, to identify if any passwords have been stored without being hashed and salted,\nas the database administrator (shown here as \"postgres\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -x -c \"SELECT * FROM pg_shadow\"\n\nIf any password is in plaintext, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo enable password_encryption, as the database administrator, edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\npassword_encryption = on\n\nInstitute a policy of not using the \"WITH UNENCRYPTED PASSWORD\" option with the\nCREATE ROLE/USER and ALTER ROLE/USER commands. (This option overrides the setting of\nthe password_encryption configuration parameter.)\n\nAs the system administrator, restart the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl restart postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 restart"
          },
          "code": "control \"V-73015\" do\n  title \"If passwords are used for authentication, PostgreSQL must store only\nhashed, salted representations of passwords.\"\n  desc  \"The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not\npossible to employ a PKI certificate, and requires AO approval.\n\nIn such cases, database passwords stored in clear text, using reversible encryption,\nor using unsalted hashes would be vulnerable to unauthorized disclosure. Database\npasswords must always be in the form of one-way, salted hashes when stored\ninternally or externally to PostgreSQL.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000171-DB-000074\"\n  tag \"gid\": \"V-73015\"\n  tag \"rid\": \"SV-87667r1_rule\"\n  tag \"stig_id\": \"PGS9-00-009500\"\n  tag \"cci\": \"CCI-000196\"\n  tag \"nist\": [\"IA-5 (1) (c)\", \"Rev_4\"]\n  tag \"check\": \"To check if password encryption is enabled, as the database\nadministrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW password_encryption\\\"\n\nIf password_encryption is not on, this is a finding.\n\nNext, to identify if any passwords have been stored without being hashed and salted,\nas the database administrator (shown here as \\\"postgres\\\"), run the following SQL:\n\n$ sudo su - postgres\n$ psql -x -c \\\"SELECT * FROM pg_shadow\\\"\n\nIf any password is in plaintext, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo enable password_encryption, as the database administrator, edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\npassword_encryption = on\n\nInstitute a policy of not using the \\\"WITH UNENCRYPTED PASSWORD\\\" option with the\nCREATE ROLE/USER and ALTER ROLE/USER commands. (This option overrides the setting of\nthe password_encryption configuration parameter.)\n\nAs the system administrator, restart the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl restart postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 restart\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW password_encryption;', [PG_DB]) do\n    its('output') { should match /(on|true)/i }\n  end\n\n  sql.query('SELECT passwd FROM pg_shadow;', [PG_DB]).output.split(\"\\n\").each do |password|\n    describe password do\n      it { should match /^md5[0-9a-f]*/ }\n    end\n  end\n  \nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73015.rb",
            "line": 45
          },
          "id": "V-73015",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW password_encryption; output should match /(on|true)/i",
              "run_time": 0.000327394,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "md50a147b58cf9757316218b03964d72257 should match /^md5[0-9a-f]*/",
              "run_time": 0.000321547,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "md589ff7210e68d379d5d5e3e03984713df should match /^md5[0-9a-f]*/",
              "run_time": 0.000128472,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must maintain the confidentiality and integrity of\n  information during preparation for transmission.",
          "desc": "Information can be either unintentionally or maliciously disclosed or\n  modified during preparation for transmission, including, for example, during\n  aggregation, at protocol transformation points, and during packing/unpacking.\n  These unauthorized disclosures or modifications compromise the confidentiality\n  or integrity of the information.\n  Use of this requirement will be limited to situations where the data owner has\n  a strict requirement for ensuring data integrity and confidentiality is\n  maintained at every step of the data transfer and handling process.\n  When transmitting data, PostgreSQL, associated applications, and\n  infrastructure must leverage transmission protection mechanisms.\n  PostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c, while the name\n  is misleading, this function enables only TLS encryption methods, not SSL.\n  See OpenSSL: https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.htm.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000441-DB-000378",
            "gid": "V-72981",
            "rid": "SV-87633r1_rule",
            "stig_id": "PGS9-00-007200",
            "cci": "CCI-002420",
            "nist": [
              "SC-8 (2)",
              "Rev_4"
            ],
            "check": "If the data owner does not have a strict requirement for ensuring\n  data integrity and confidentiality is maintained at every step of the data\n  transfer and handling process, this is not a finding.\n  As the database administrator (shown here as \"postgres\"), verify SSL is\n  enabled by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW ssl\"\n  If SSL is not enabled, this is a finding.\n  If PostgreSQL does not employ protective measures against unauthorized\n  disclosure and modification during preparation for transmission, this is a\n  finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Implement protective measures against unauthorized disclosure and modification\n  during preparation for transmission.\n  To configure PostgreSQL to use SSL, as a database administrator (shown here as\n  \"postgres\"), edit postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameter:\n  ssl = on\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\n  For more information on configuring PostgreSQL to use SSL, see supplementary\n  content APPENDIX-G."
          },
          "code": "control \"V-72981\" do\n  title \"PostgreSQL must maintain the confidentiality and integrity of\n  information during preparation for transmission.\"\n  desc  \"Information can be either unintentionally or maliciously disclosed or\n  modified during preparation for transmission, including, for example, during\n  aggregation, at protocol transformation points, and during packing/unpacking.\n  These unauthorized disclosures or modifications compromise the confidentiality\n  or integrity of the information.\n  Use of this requirement will be limited to situations where the data owner has\n  a strict requirement for ensuring data integrity and confidentiality is\n  maintained at every step of the data transfer and handling process.\n  When transmitting data, PostgreSQL, associated applications, and\n  infrastructure must leverage transmission protection mechanisms.\n  PostgreSQL uses OpenSSL SSLv23_method() in fe-secure-openssl.c, while the name\n  is misleading, this function enables only TLS encryption methods, not SSL.\n  See OpenSSL: https://mta.openssl.org/pipermail/openssl-dev/2015-May/001449.htm.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000441-DB-000378\"\n  tag \"gid\": \"V-72981\"\n  tag \"rid\": \"SV-87633r1_rule\"\n  tag \"stig_id\": \"PGS9-00-007200\"\n  tag \"cci\": \"CCI-002420\"\n  tag \"nist\": [\"SC-8 (2)\", \"Rev_4\"]\n  tag \"check\": \"If the data owner does not have a strict requirement for ensuring\n  data integrity and confidentiality is maintained at every step of the data\n  transfer and handling process, this is not a finding.\n  As the database administrator (shown here as \\\"postgres\\\"), verify SSL is\n  enabled by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW ssl\\\"\n  If SSL is not enabled, this is a finding.\n  If PostgreSQL does not employ protective measures against unauthorized\n  disclosure and modification during preparation for transmission, this is a\n  finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Implement protective measures against unauthorized disclosure and modification\n  during preparation for transmission.\n  To configure PostgreSQL to use SSL, as a database administrator (shown here as\n  \\\"postgres\\\"), edit postgresql.conf:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameter:\n  ssl = on\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\n  For more information on configuring PostgreSQL to use SSL, see supplementary\n  content APPENDIX-G.\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW ssl;', [PG_DB]) do\n    its('output') { should match /(on|true)/i }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72981.rb",
            "line": 46
          },
          "id": "V-72981",
          "results": [
            {
              "status": "failed",
              "code_desc": "PostgreSQL query: SHOW ssl; output should match /(on|true)/i",
              "run_time": 0.000398963,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "expected \"off\" to match /(on|true)/i\nDiff:\n@@ -1,2 +1,2 @@\n-/(on|true)/i\n+\"off\"\n"
            }
          ]
        },
        {
          "title": "PostgreSQL must provide the means for individuals in authorized roles to\nchange the auditing to be performed on all application components, based on all\nselectable event criteria within organization-defined time thresholds.",
          "desc": "If authorized individuals do not have the ability to modify auditing\nparameters in response to a changing threat environment, the organization may not be\nable to effectively respond, and important forensic information may be lost.\n\nThis requirement enables organizations to extend or limit auditing as necessary to\nmeet organizational requirements. Auditing that is limited to conserve information\nsystem resources may be extended to address certain threat situations. In addition,\nauditing may be limited to a specific set of events to facilitate audit reduction,\nanalysis, and reporting. Organizations can establish time thresholds in which audit\nactions are changed, for example, near real time, within minutes, or within hours.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000353-DB-000324",
            "gid": "V-73025",
            "rid": "SV-87677r1_rule",
            "stig_id": "PGS9-00-010000",
            "cci": "CCI-001914",
            "nist": [
              "AU-12 (3)",
              "Rev_4"
            ],
            "check": "First, as the database administrator, check if pgaudit is present in\nshared_preload_libraries:\n\n$ sudo su - postgres\n$ psql -c \"SHOW shared_preload_libraries\"\n\nIf pgaudit is not present in the result from the query, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nFor audit logging we suggest using pgaudit. For instructions on how to setup\npgaudit, see supplementary content APPENDIX-B.\n\nAs a superuser (postgres), any pgaudit parameter can be changed in postgresql.conf.\nConfigurations can only be changed by a superuser.\n\n### Example: Change Auditing To Log Any ROLE Statements\n\nNote: This will override any setting already configured.\n\nAlter the configuration to do role-based logging:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log = 'role'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\n### Example: Set An Auditing Role And Grant Privileges\n\nAn audit role can be configured and granted privileges to specific tables and\ncolumns that need logging.\n\n##### Create Test Table\n\n$ sudo su - postgres\n$ psql -c \"CREATE TABLE public.stig_audit_example(id INT, name TEXT, password\nTEXT);\"\n\n##### Define Auditing Role\n\nAs PostgreSQL superuser (such as postgres), add the following to postgresql.conf or\nany included configuration files.\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.role = 'auditor'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\nNext in PostgreSQL create a new role:\n\npostgres=# CREATE ROLE auditor;\npostgres=# GRANT select(password) ON public.stig_audit_example TO auditor;\n\nNote: This role is created with NOLOGIN privileges by default.\n\nNow any SELECT on the column password will be logged:\n\n$ sudo su - postgres\n$ psql -c \"SELECT password FROM public.stig_audit_example;\"\n$ cat ${PGDATA?}/pg_log/<latest_log>\n< 2016-01-28 16:46:09.038 UTC bob postgres: >LOG: AUDIT:\nOBJECT,6,1,READ,SELECT,TABLE,public.stig_audit_example,SELECT password FROM\nstig_audit_example;,<none>\n\n## Change Configurations During A Specific Timeframe\n\nDeploy PostgreSQL that allows audit configuration changes to take effect within the\ntimeframe required by the application owner and without involving actions or events\nthat the application owner rules unacceptable.\n\nCrontab can be used to do this.\n\nFor a specific audit role:\n\n# Grant specific audit privileges to an auditing role at 5 PM every day of the week,\nmonth, year at the 0 minute mark.\n0 5 * * * postgres /usr/bin/psql -c \"GRANT select(password) ON\npublic.stig_audit_example TO auditor;\"\n# Revoke specific audit privileges to an auditing role at 5 PM every day of the\nweek, month, year at the 0 minute mark.\n0 17 * * * postgres /usr/bin/psql -c \"REVOKE select(password) ON\npublic.stig_audit_example FROM auditor;\""
          },
          "code": "control \"V-73025\" do\n  title \"PostgreSQL must provide the means for individuals in authorized roles to\nchange the auditing to be performed on all application components, based on all\nselectable event criteria within organization-defined time thresholds.\"\n  desc  \"If authorized individuals do not have the ability to modify auditing\nparameters in response to a changing threat environment, the organization may not be\nable to effectively respond, and important forensic information may be lost.\n\nThis requirement enables organizations to extend or limit auditing as necessary to\nmeet organizational requirements. Auditing that is limited to conserve information\nsystem resources may be extended to address certain threat situations. In addition,\nauditing may be limited to a specific set of events to facilitate audit reduction,\nanalysis, and reporting. Organizations can establish time thresholds in which audit\nactions are changed, for example, near real time, within minutes, or within hours.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000353-DB-000324\"\n  tag \"gid\": \"V-73025\"\n  tag \"rid\": \"SV-87677r1_rule\"\n  tag \"stig_id\": \"PGS9-00-010000\"\n  tag \"cci\": \"CCI-001914\"\n  tag \"nist\": [\"AU-12 (3)\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator, check if pgaudit is present in\nshared_preload_libraries:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW shared_preload_libraries\\\"\n\nIf pgaudit is not present in the result from the query, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nTo ensure that logging is enabled, review supplementary content APPENDIX-C for\ninstructions on enabling logging.\n\nFor audit logging we suggest using pgaudit. For instructions on how to setup\npgaudit, see supplementary content APPENDIX-B.\n\nAs a superuser (postgres), any pgaudit parameter can be changed in postgresql.conf.\nConfigurations can only be changed by a superuser.\n\n### Example: Change Auditing To Log Any ROLE Statements\n\nNote: This will override any setting already configured.\n\nAlter the configuration to do role-based logging:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.log = 'role'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\n### Example: Set An Auditing Role And Grant Privileges\n\nAn audit role can be configured and granted privileges to specific tables and\ncolumns that need logging.\n\n##### Create Test Table\n\n$ sudo su - postgres\n$ psql -c \\\"CREATE TABLE public.stig_audit_example(id INT, name TEXT, password\nTEXT);\\\"\n\n##### Define Auditing Role\n\nAs PostgreSQL superuser (such as postgres), add the following to postgresql.conf or\nany included configuration files.\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd the following parameters (or edit existing parameters):\n\npgaudit.role = 'auditor'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\n\nNext in PostgreSQL create a new role:\n\npostgres=# CREATE ROLE auditor;\npostgres=# GRANT select(password) ON public.stig_audit_example TO auditor;\n\nNote: This role is created with NOLOGIN privileges by default.\n\nNow any SELECT on the column password will be logged:\n\n$ sudo su - postgres\n$ psql -c \\\"SELECT password FROM public.stig_audit_example;\\\"\n$ cat ${PGDATA?}/pg_log/<latest_log>\n< 2016-01-28 16:46:09.038 UTC bob postgres: >LOG: AUDIT:\nOBJECT,6,1,READ,SELECT,TABLE,public.stig_audit_example,SELECT password FROM\nstig_audit_example;,<none>\n\n## Change Configurations During A Specific Timeframe\n\nDeploy PostgreSQL that allows audit configuration changes to take effect within the\ntimeframe required by the application owner and without involving actions or events\nthat the application owner rules unacceptable.\n\nCrontab can be used to do this.\n\nFor a specific audit role:\n\n# Grant specific audit privileges to an auditing role at 5 PM every day of the week,\nmonth, year at the 0 minute mark.\n0 5 * * * postgres /usr/bin/psql -c \\\"GRANT select(password) ON\npublic.stig_audit_example TO auditor;\\\"\n# Revoke specific audit privileges to an auditing role at 5 PM every day of the\nweek, month, year at the 0 minute mark.\n0 17 * * * postgres /usr/bin/psql -c \\\"REVOKE select(password) ON\npublic.stig_audit_example FROM auditor;\\\"\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73025.rb",
            "line": 45
          },
          "id": "V-73025",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000247463,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must produce audit records of its enforcement of access\n  restrictions associated with changes to the configuration of PostgreSQL or\n  database(s).",
          "desc": "Without auditing the enforcement of access restrictions against changes\n  to configuration, it would be difficult to identify attempted attacks and an\n  audit trail would not be available for forensic investigation for\n  after-the-fact actions.\n  Enforcement actions are the methods or mechanisms used to prevent unauthorized\n  changes to configuration settings. Enforcement action methods may be as simple\n  as denying access to a file based on the application of file permissions\n  (access restriction). Audit items may consist of lists of actions blocked by\n  access restrictions or changes identified after the fact.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000381-DB-000361",
            "gid": "V-72913",
            "rid": "SV-87565r1_rule",
            "stig_id": "PGS9-00-004100",
            "cci": "CCI-001814",
            "nist": [
              "CM-5 (1)",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To verify that system denies are logged when unprivileged users attempt to\n  change database configuration, as the database administrator (shown here as\n  \"postgres\"), run the following commands:\n  $ sudo su - postgres\n  $ psql\n  Next, create a role with no privileges, change the current role to that user\n  and attempt to change a configuration by running the following SQL:\n  CREATE ROLE bob;\n  SET ROLE bob;\n  SET pgaudit.role='test';\n  Now check pg_log (use the latest log):\n  $ cat ${PGDATA?}/pg_log/postgresql-Thu.log\n  < 2016-01-28 17:57:34.092 UTC bob postgres: >ERROR: permission denied to set\n  parameter \"pgaudit.role\"\n  < 2016-01-28 17:57:34.092 UTC bob postgres: >STATEMENT: SET pgaudit.role='test';\n  If the denial is not logged, this is a finding.\n  By default PostgreSQL configuration files are owned by the postgres user and\n  cannot be edited by non-privileged users:\n  $ ls -la ${PGDATA?} | grep postgresql.conf\n  -rw-------. 1 postgres postgres 21758 Jan 22 10:27 postgresql.conf\n  If postgresql.conf is not owned by the database owner and does not have read\n  and write permissions for the owner, this is a finding.",
            "fix": "Enable logging.\n  All denials are logged by default if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging."
          },
          "code": "control \"V-72913\" do\n  title \"PostgreSQL must produce audit records of its enforcement of access\n  restrictions associated with changes to the configuration of PostgreSQL or\n  database(s).\"\n  desc  \"Without auditing the enforcement of access restrictions against changes\n  to configuration, it would be difficult to identify attempted attacks and an\n  audit trail would not be available for forensic investigation for\n  after-the-fact actions.\n  Enforcement actions are the methods or mechanisms used to prevent unauthorized\n  changes to configuration settings. Enforcement action methods may be as simple\n  as denying access to a file based on the application of file permissions\n  (access restriction). Audit items may consist of lists of actions blocked by\n  access restrictions or changes identified after the fact.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000381-DB-000361\"\n  tag \"gid\": \"V-72913\"\n  tag \"rid\": \"SV-87565r1_rule\"\n  tag \"stig_id\": \"PGS9-00-004100\"\n  tag \"cci\": \"CCI-001814\"\n  tag \"nist\": [\"CM-5 (1)\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To verify that system denies are logged when unprivileged users attempt to\n  change database configuration, as the database administrator (shown here as\n  \\\"postgres\\\"), run the following commands:\n  $ sudo su - postgres\n  $ psql\n  Next, create a role with no privileges, change the current role to that user\n  and attempt to change a configuration by running the following SQL:\n  CREATE ROLE bob;\n  SET ROLE bob;\n  SET pgaudit.role='test';\n  Now check pg_log (use the latest log):\n  $ cat ${PGDATA?}/pg_log/postgresql-Thu.log\n  < 2016-01-28 17:57:34.092 UTC bob postgres: >ERROR: permission denied to set\n  parameter \\\"pgaudit.role\\\"\n  < 2016-01-28 17:57:34.092 UTC bob postgres: >STATEMENT: SET pgaudit.role='test';\n  If the denial is not logged, this is a finding.\n  By default PostgreSQL configuration files are owned by the postgres user and\n  cannot be edited by non-privileged users:\n  $ ls -la ${PGDATA?} | grep postgresql.conf\n  -rw-------. 1 postgres postgres 21758 Jan 22 10:27 postgresql.conf\n  If postgresql.conf is not owned by the database owner and does not have read\n  and write permissions for the owner, this is a finding.\"\n  tag \"fix\": \"Enable logging.\n  All denials are logged by default if logging is enabled. To ensure that\n  logging is enabled, review supplementary content APPENDIX-C for instructions\n  on enabling logging.\"\n\n  create_role = 'CREATE ROLE bob;'\n  set_role = 'SET ROLE bob;'\n  set_pgaudit_role = \"SET pgaudit.role='test';\"\n  drop_role = 'DROP ROLE bob;'\n\n  command = \"#{set_role} #{set_pgaudit_role}\"\n  error = 'permission denied to set parameter \"pgaudit.role\"'\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  sql.query(create_role, [PG_DB])\n  sql.query(command, [PG_DB])\n  sql.query(drop_role, [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /ERROR:\\s*#{Regexp.escape(error)}/ }\n    its('content') { should match /STATEMENT:\\s*#{Regexp.escape(command)}/ }\n  end\n\n  describe file(PG_CONF) do\n    its('owner') { should eq PG_OWNER }\n    its('mode') { should cmp '0600' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72913.rb",
            "line": 64
          },
          "id": "V-72913",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /ERROR:\\s*permission\\ denied\\ to\\ set\\ parameter\\ \"pgaudit\\.role\"/",
              "run_time": 0.007161972,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /STATEMENT:\\s*SET\\ ROLE\\ bob;\\ SET\\ pgaudit\\.role='test';/",
              "run_time": 0.005237801,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data/postgresql.conf owner should eq \"vcap\"",
              "run_time": 0.000535654,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data/postgresql.conf mode should cmp == \"0600\"",
              "run_time": 0.000586517,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when privileges/permissions are\n  modified.",
          "desc": "Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n  In an SQL environment, modifying permissions is typically done via the GRANT\n  and REVOKE commands.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000495-DB-000328",
            "gid": "V-72965",
            "rid": "SV-87617r1_rule",
            "stig_id": "PGS9-00-006400",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW shared_preload_libraries\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role is enabled:\n  $ psql -c \"SHOW pgaudit.log\"\n  If the output does not contain role, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment v\n  ariable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='role'\n  Now, as the system administrator, reload the server with the new\n  configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72965\" do\n  title \"PostgreSQL must generate audit records when privileges/permissions are\n  modified.\"\n  desc  \"Changes in the permissions, privileges, and roles granted to users and\n  roles must be tracked. Without an audit trail, unauthorized elevation or\n  restriction of privileges could go undetected. Elevated privileges give users\n  access to information and functionality that they should not have; restricted\n  privileges wrongly deny access to authorized users.\n  In an SQL environment, modifying permissions is typically done via the GRANT\n  and REVOKE commands.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000495-DB-000328\"\n  tag \"gid\": \"V-72965\"\n  tag \"rid\": \"SV-87617r1_rule\"\n  tag \"stig_id\": \"PGS9-00-006400\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"First, as the database administrator, verify pgaudit is enabled\n  by running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW shared_preload_libraries\\\"\n  If the output does not contain pgaudit, this is a finding.\n  Next, verify that role is enabled:\n  $ psql -c \\\"SHOW pgaudit.log\\\"\n  If the output does not contain role, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment v\n  ariable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log='role'\n  Now, as the system administrator, reload the server with the new\n  configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'role' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72965.rb",
            "line": 46
          },
          "id": "V-72965",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000235867,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 0.000283037,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must protect its audit features from unauthorized removal.",
          "desc": "Protecting audit data also includes identifying and protecting the tools\nused to view and manipulate log data. Therefore, protecting audit tools is necessary\nto prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user\npermissions and roles identifying the user accessing the tools and the corresponding\nrights the user enjoys in order make access decisions regarding the deletion of\naudit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit\ntools needed to successfully view and manipulate audit information system activity\nand records. Audit tools include custom queries and report generators.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000123-DB-000204",
            "gid": "V-73043",
            "rid": "SV-87695r1_rule",
            "stig_id": "PGS9-00-011200",
            "cci": "CCI-001495",
            "nist": [
              "AU-9",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), verify\nthe permissions of PGDATA:\n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}\n\nIf PGDATA is not owned by postgres:postgres or if files can be accessed by others,\nthis is a finding.\n\nAs the system administrator, verify the permissions of pgsql shared objects and\ncompiled binaries:\n\n$ ls -la /usr/pgsql-9.5/bin/\n$ ls -la /usr/pgsql-9.5/share\n$ ls -la /usr/pgsql-9.5/include\n\nIf any of these are not owned by root:root, this is a finding.",
            "fix": "As the system administrator, change the permissions of PGDATA:\n\n$ sudo chown -R postgres:postgres ${PGDATA?}\n$ sudo chmod 700 ${PGDATA?}\n\nAs the system administrator, change the permissions of pgsql:\n\n$ sudo chown -R root:root /usr/pgsql-9.5/share/contrib/pgaudit"
          },
          "code": "control \"V-73043\" do\n  title \"PostgreSQL must protect its audit features from unauthorized removal.\"\n  desc  \"Protecting audit data also includes identifying and protecting the tools\nused to view and manipulate log data. Therefore, protecting audit tools is necessary\nto prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user\npermissions and roles identifying the user accessing the tools and the corresponding\nrights the user enjoys in order make access decisions regarding the deletion of\naudit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit\ntools needed to successfully view and manipulate audit information system activity\nand records. Audit tools include custom queries and report generators.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000123-DB-000204\"\n  tag \"gid\": \"V-73043\"\n  tag \"rid\": \"SV-87695r1_rule\"\n  tag \"stig_id\": \"PGS9-00-011200\"\n  tag \"cci\": \"CCI-001495\"\n  tag \"nist\": [\"AU-9\", \"Rev_4\"]\n  tag \"check\": \"As the database administrator (shown here as \\\"postgres\\\"), verify\nthe permissions of PGDATA:\n\n$ sudo su - postgres\n$ ls -la ${PGDATA?}\n\nIf PGDATA is not owned by postgres:postgres or if files can be accessed by others,\nthis is a finding.\n\nAs the system administrator, verify the permissions of pgsql shared objects and\ncompiled binaries:\n\n$ ls -la /usr/pgsql-9.5/bin/\n$ ls -la /usr/pgsql-9.5/share\n$ ls -la /usr/pgsql-9.5/include\n\nIf any of these are not owned by root:root, this is a finding.\"\n\n  tag \"fix\": \"As the system administrator, change the permissions of PGDATA:\n\n$ sudo chown -R postgres:postgres ${PGDATA?}\n$ sudo chmod 700 ${PGDATA?}\n\nAs the system administrator, change the permissions of pgsql:\n\n$ sudo chown -R root:root /usr/pgsql-9.5/share/contrib/pgaudit\"\n\n  describe directory(PG_DATA) do\n    it { should be_owned_by PG_OWNER }\n    it { should be_grouped_into PG_GROUP }\n  end\n\n  describe command(\"find #{PG_DATA} -type f ! -perm 600 -or ! -user #{PG_OWNER} -or ! -group #{PG_GROUP}\") do\n    its('stdout') { should eq '' }\n    its('stderr') { should eq '' }\n  end\n\n  describe command(\"find #{PG_DATA} -type d ! -perm 700 -or ! -user #{PG_OWNER} -or ! -group #{PG_GROUP}\") do\n    its('stdout') { should eq '' }\n    its('stderr') { should eq '' }\n  end\n\n  PG_SHARED_LIBS.each do |dir|\n    next unless directory(dir).exist?\n    describe directory(dir) do\n      it { should be_owned_by 'root' }\n      it { should be_grouped_into 'root' }\n    end\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73043.rb",
            "line": 58
          },
          "id": "V-73043",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data should be owned by \"vcap\"",
              "run_time": 0.000376221,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/store/postgresql/data should be grouped into \"vcap\"",
              "run_time": 0.000173953,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find /var/vcap/store/postgresql/data -type f ! -perm 600 -or ! -user vcap -or ! -group vcap stdout should eq \"\"",
              "run_time": 0.032534286,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find /var/vcap/store/postgresql/data -type f ! -perm 600 -or ! -user vcap -or ! -group vcap stderr should eq \"\"",
              "run_time": 0.000298323,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find /var/vcap/store/postgresql/data -type d ! -perm 700 -or ! -user vcap -or ! -group vcap stdout should eq \"\"",
              "run_time": 0.06583293,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "Command find /var/vcap/store/postgresql/data -type d ! -perm 700 -or ! -user vcap -or ! -group vcap stderr should eq \"\"",
              "run_time": 0.000752976,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/bin should be owned by \"root\"",
              "run_time": 0.000428318,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/bin should be grouped into \"root\"",
              "run_time": 0.000531481,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/lib should be owned by \"root\"",
              "run_time": 0.00165403,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/lib/postgresql/9.5/lib should be grouped into \"root\"",
              "run_time": 0.000494194,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/include/postgresql/9.5 should be owned by \"root\"",
              "run_time": 0.000393381,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/include/postgresql/9.5 should be grouped into \"root\"",
              "run_time": 0.000464743,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/share/postgresql/9.5 should be owned by \"root\"",
              "run_time": 0.001591235,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /usr/share/postgresql/9.5 should be grouped into \"root\"",
              "run_time": 0.000674595,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must invalidate session identifiers upon user logout or other\nsession termination.",
          "desc": "Captured sessions can be reused in \"replay\" attacks. This requirement\nlimits the ability of adversaries to capture and continue to employ previously valid\nsession IDs.\n\nThis requirement focuses on communications protection for PostgreSQL session rather\nthan for the network packet. The intent of this control is to establish grounds for\nconfidence at each end of a communications session in the ongoing identity of the\nother party and in the validity of the information being transmitted.\n\nSession IDs are tokens generated by PostgreSQLs to uniquely identify a user's (or\nprocess's) session. DBMSs will make access decisions and execute logic based on the\nsession ID.\n\nUnique session IDs help to reduce predictability of said identifiers. Unique session\nIDs address man-in-the-middle attacks, including session hijacking or insertion of.\ninformation into a session. If the attacker is unable to identify or guess the\nsession information related to pending application traffic, they will have more\ndifficulty in hijacking the session or otherwise manipulating valid sessions.\n\nWhen a user logs out, or when any other session termination event occurs, PostgreSQL\nmust terminate the user session(s) to minimize the potential for sessions to be\nhijacked.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000220-DB-000149",
            "gid": "V-73037",
            "rid": "SV-87689r1_rule",
            "stig_id": "PGS9-00-010600",
            "cci": "CCI-001185",
            "nist": [
              "SC-23 (1)",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), run the\nfollowing SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW tcp_keepalives_idle\"\n$ psql -c \"SHOW tcp_keepalives_interval\"\n$ psql -c \"SHOW tcp_keepalives_count\"\n$ psql -c \"SHOW statement_timeout\"\n\nIf these settings are not set, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nAs the database administrator (shown here as \"postgres\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi $PGDATA/postgresql.conf\n\nSet the following parameters to organizational requirements:\n\nstatement_timeout = 10000 #milliseconds\ntcp_keepalives_idle = 10 # seconds\ntcp_keepalives_interval = 10 # seconds\ntcp_keepalives_count = 10\n\nNow, as the system administrator, restart the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl restart postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 restart"
          },
          "code": "control \"V-73037\" do\n  title \"PostgreSQL must invalidate session identifiers upon user logout or other\nsession termination.\"\n  desc  \"Captured sessions can be reused in \\\"replay\\\" attacks. This requirement\nlimits the ability of adversaries to capture and continue to employ previously valid\nsession IDs.\n\nThis requirement focuses on communications protection for PostgreSQL session rather\nthan for the network packet. The intent of this control is to establish grounds for\nconfidence at each end of a communications session in the ongoing identity of the\nother party and in the validity of the information being transmitted.\n\nSession IDs are tokens generated by PostgreSQLs to uniquely identify a user's (or\nprocess's) session. DBMSs will make access decisions and execute logic based on the\nsession ID.\n\nUnique session IDs help to reduce predictability of said identifiers. Unique session\nIDs address man-in-the-middle attacks, including session hijacking or insertion of.\ninformation into a session. If the attacker is unable to identify or guess the\nsession information related to pending application traffic, they will have more\ndifficulty in hijacking the session or otherwise manipulating valid sessions.\n\nWhen a user logs out, or when any other session termination event occurs, PostgreSQL\nmust terminate the user session(s) to minimize the potential for sessions to be\nhijacked.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000220-DB-000149\"\n  tag \"gid\": \"V-73037\"\n  tag \"rid\": \"SV-87689r1_rule\"\n  tag \"stig_id\": \"PGS9-00-010600\"\n  tag \"cci\": \"CCI-001185\"\n  tag \"nist\": [\"SC-23 (1)\", \"Rev_4\"]\n  tag \"check\": \"As the database administrator (shown here as \\\"postgres\\\"), run the\nfollowing SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW tcp_keepalives_idle\\\"\n$ psql -c \\\"SHOW tcp_keepalives_interval\\\"\n$ psql -c \\\"SHOW tcp_keepalives_count\\\"\n$ psql -c \\\"SHOW statement_timeout\\\"\n\nIf these settings are not set, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nAs the database administrator (shown here as \\\"postgres\\\"), edit postgresql.conf:\n\n$ sudo su - postgres\n$ vi $PGDATA/postgresql.conf\n\nSet the following parameters to organizational requirements:\n\nstatement_timeout = 10000 #milliseconds\ntcp_keepalives_idle = 10 # seconds\ntcp_keepalives_interval = 10 # seconds\ntcp_keepalives_count = 10\n\nNow, as the system administrator, restart the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl restart postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 restart\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW tcp_keepalives_idle;', [PG_DB]) do\n    its('output') { should_not cmp 0 }\n  end\n\n  describe sql.query('SHOW tcp_keepalives_interval;', [PG_DB]) do\n    its('output') { should_not cmp 0 }\n  end\n\n  describe sql.query('SHOW tcp_keepalives_count;', [PG_DB]) do\n    its('output') { should_not cmp 0 }\n  end\n\n  describe sql.query('SHOW statement_timeout;', [PG_DB]) do\n    its('output') { should_not cmp 0 }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73037.rb",
            "line": 45
          },
          "id": "V-73037",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW tcp_keepalives_idle; output should not cmp == 0",
              "run_time": 0.000331112,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW tcp_keepalives_interval; output should not cmp == 0",
              "run_time": 0.001794739,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW tcp_keepalives_count; output should not cmp == 0",
              "run_time": 0.001486094,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "failed",
              "code_desc": "PostgreSQL query: SHOW statement_timeout; output should not cmp == 0",
              "run_time": 0.001130932,
              "start_time": "2017-06-30 21:54:54 +0000",
              "message": "\nexpected it not to be == 0\n     got: 0\n\n(compared using `cmp` matcher)\n"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate time stamps, for audit records and application\ndata, with a minimum granularity of one second.",
          "desc": "Without sufficient granularity of time stamps, it is not possible to\nadequately determine the chronological order of records.\n\nTime stamps generated by PostgreSQL must include date and time. Granularity of time\nmeasurements refers to the precision available in time stamp values. Granularity\ncoarser than one second is not sufficient for audit trail purposes. Time stamp\nvalues are typically presented with three or more decimal places of seconds;\nhowever, the actual granularity may be coarser than the apparent precision. For\nexample, PostgreSQL will always return at least millisecond timestamps but it can be\ntruncated using EXTRACT functions: SELECT EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16\n20:38:40');.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000375-DB-000323",
            "gid": "V-72985",
            "rid": "SV-87637r1_rule",
            "stig_id": "PGS9-00-007700",
            "cci": "CCI-001889",
            "nist": [
              "AU-8 b",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\nvariable. See supplementary content APPENDIX-F for instructions on configuring\nPGDATA.\n\nFirst, as the database administrator (shown here as \"postgres\"), verify the\ncurrent log_line_prefix setting by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \"SHOW log_line_prefix\"\n\nIf log_line_prefix does not contain %m, this is a finding.\n\nNext check the logs to verify time stamps are being logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/pg_log/<latest_log>\n< 2016-02-23 12:53:33.947 EDT postgres postgres 570bd68d.3912 >LOG: connection\nauthorized: user=postgres database=postgres\n< 2016-02-23 12:53:41.576 EDT postgres postgres 570bd68d.3912 >LOG: AUDIT:\nSESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE test_srg(id INT);,<none>\n< 2016-02-23 12:53:44.372 EDT postgres postgres 570bd68d.3912 >LOG: disconnection:\nsession time: 0:00:10.426 user=postgres database=postgres host=[local]\n\nIf time stamps are not being logged, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nPostgreSQL will not log anything if logging is not enabled. To ensure that logging\nis enabled, review supplementary content APPENDIX-C for instructions on enabling\nlogging.\n\nIf logging is enabled the following configurations must be made to log events with\ntime stamps:\n\nFirst, as the database administrator (shown here as \"postgres\"), edit\npostgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd %m to log_line_prefix to enable time stamps with milliseconds:\n\nlog_line_prefix = '< %m >'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72985\" do\n\n  title \"PostgreSQL must generate time stamps, for audit records and application\ndata, with a minimum granularity of one second.\"\n  desc  \"Without sufficient granularity of time stamps, it is not possible to\nadequately determine the chronological order of records.\n\nTime stamps generated by PostgreSQL must include date and time. Granularity of time\nmeasurements refers to the precision available in time stamp values. Granularity\ncoarser than one second is not sufficient for audit trail purposes. Time stamp\nvalues are typically presented with three or more decimal places of seconds;\nhowever, the actual granularity may be coarser than the apparent precision. For\nexample, PostgreSQL will always return at least millisecond timestamps but it can be\ntruncated using EXTRACT functions: SELECT EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16\n20:38:40');.\"\n\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000375-DB-000323\"\n  tag \"gid\": \"V-72985\"\n  tag \"rid\": \"SV-87637r1_rule\"\n  tag \"stig_id\": \"PGS9-00-007700\"\n  tag \"cci\": \"CCI-001889\"\n  tag \"nist\": [\"AU-8 b\", \"Rev_4\"]\n\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\nvariable. See supplementary content APPENDIX-F for instructions on configuring\nPGDATA.\n\nFirst, as the database administrator (shown here as \\\"postgres\\\"), verify the\ncurrent log_line_prefix setting by running the following SQL:\n\n$ sudo su - postgres\n$ psql -c \\\"SHOW log_line_prefix\\\"\n\nIf log_line_prefix does not contain %m, this is a finding.\n\nNext check the logs to verify time stamps are being logged:\n\n$ sudo su - postgres\n$ cat ${PGDATA?}/pg_log/<latest_log>\n< 2016-02-23 12:53:33.947 EDT postgres postgres 570bd68d.3912 >LOG: connection\nauthorized: user=postgres database=postgres\n< 2016-02-23 12:53:41.576 EDT postgres postgres 570bd68d.3912 >LOG: AUDIT:\nSESSION,1,1,DDL,CREATE TABLE,,,CREATE TABLE test_srg(id INT);,<none>\n< 2016-02-23 12:53:44.372 EDT postgres postgres 570bd68d.3912 >LOG: disconnection:\nsession time: 0:00:10.426 user=postgres database=postgres host=[local]\n\nIf time stamps are not being logged, this is a finding.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\nSee supplementary content APPENDIX-F for instructions on configuring PGDATA.\n\nPostgreSQL will not log anything if logging is not enabled. To ensure that logging\nis enabled, review supplementary content APPENDIX-C for instructions on enabling\nlogging.\n\nIf logging is enabled the following configurations must be made to log events with\ntime stamps:\n\nFirst, as the database administrator (shown here as \\\"postgres\\\"), edit\npostgresql.conf:\n\n$ sudo su - postgres\n$ vi ${PGDATA?}/postgresql.conf\n\nAdd %m to log_line_prefix to enable time stamps with milliseconds:\n\nlog_line_prefix = '< %m >'\n\nNow, as the system administrator, reload the server with the new configuration:\n\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload postgresql-9.5\n\n# INITD SERVER ONLY\n$ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  describe sql.query('SHOW log_line_prefix;', [PG_DB]) do\n    its('output') { should include '%m' }\n  end\n\n  describe file(current_log) do\n    its('content') { should match /\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3} [A-Z]{3}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72985.rb",
            "line": 46
          },
          "id": "V-72985",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW log_line_prefix; output should include \"%m\"",
              "run_time": 0.000353032,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3} [A-Z]{3}/",
              "run_time": 0.01065953,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when security objects are\n  deleted.",
          "desc": "The removal of security objects from the database/PostgreSQL would\n  seriously degrade a system's information assurance posture. If such an event\n  occurs, it must be logged.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000501-DB-000336",
            "gid": "V-72939",
            "rid": "SV-87591r1_rule",
            "stig_id": "PGS9-00-005200",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \"postgres\"), create a\n  test table stig_test, enable row level security, and create a policy by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"CREATE TABLE stig_test(id INT)\"\n  $ psql -c \"ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY\"\n  $ psql -c \"CREATE POLICY lock_table ON stig_test USING ('postgres' =\n  current_user)\"\n  Next, drop the policy and disable row level security:\n  $ psql -c \"DROP POLICY lock_table ON stig_test\"\n  $ psql -c \"ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY\"\n  Now, as the database administrator (shown here as \"postgres\"), verify the\n  security objects deletions were logged:\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  2016-03-30 14:54:18.991 EDT postgres postgres LOG: AUDIT:\n  SESSION,11,1,DDL,DROP POLICY,,,DROP POLICY lock_table ON stig_test;,<none>\n  2016-03-30 14:54:42.373 EDT postgres postgres LOG: AUDIT:\n  SESSION,12,1,DDL,ALTER TABLE,,,ALTER TABLE stig_test DISABLE ROW LEVEL\n  SECURITY;,<none>\n  If audit records are not produced when security objects are dropped, this is a\n  finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'ddl'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72939\" do\n  title \"PostgreSQL must generate audit records when security objects are\n  deleted.\"\n  desc  \"The removal of security objects from the database/PostgreSQL would\n  seriously degrade a system's information assurance posture. If such an event\n  occurs, it must be logged.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000501-DB-000336\"\n  tag \"gid\": \"V-72939\"\n  tag \"rid\": \"SV-87591r1_rule\"\n  tag \"stig_id\": \"PGS9-00-005200\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, as the database administrator (shown here as \\\"postgres\\\"), create a\n  test table stig_test, enable row level security, and create a policy by\n  running the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"CREATE TABLE stig_test(id INT)\\\"\n  $ psql -c \\\"ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY\\\"\n  $ psql -c \\\"CREATE POLICY lock_table ON stig_test USING ('postgres' =\n  current_user)\\\"\n  Next, drop the policy and disable row level security:\n  $ psql -c \\\"DROP POLICY lock_table ON stig_test\\\"\n  $ psql -c \\\"ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY\\\"\n  Now, as the database administrator (shown here as \\\"postgres\\\"), verify the\n  security objects deletions were logged:\n  $ cat ${PGDATA?}/pg_log/<latest_log>\n  2016-03-30 14:54:18.991 EDT postgres postgres LOG: AUDIT:\n  SESSION,11,1,DDL,DROP POLICY,,,DROP POLICY lock_table ON stig_test;,<none>\n  2016-03-30 14:54:42.373 EDT postgres postgres LOG: AUDIT:\n  SESSION,12,1,DDL,ALTER TABLE,,,ALTER TABLE stig_test DISABLE ROW LEVEL\n  SECURITY;,<none>\n  If audit records are not produced when security objects are dropped, this is a\n  finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  With pgaudit installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'ddl'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  create_table =  'CREATE TABLE stig_test(id INT);' \n  enable_rls = 'ALTER TABLE stig_test ENABLE ROW LEVEL SECURITY' \n  create_policy = \"CREATE POLICY lock_table ON stig_test USING ('#{PG_DBA}' = current_user);\" \n  drop_policy = 'DROP POLICY lock_table ON stig_test;'\n  disable_rls = 'ALTER TABLE stig_test DISABLE ROW LEVEL SECURITY;'\n  drop_table =  'DROP TABLE stig_test;'\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  sql.query(create_table, [PG_DB])\n  sql.query(enable_rls, [PG_DB])\n  sql.query(create_policy, [PG_DB])\n  sql.query(drop_policy, [PG_DB])\n  sql.query(disable_rls, [PG_DB])\n  sql.query(drop_table, [PG_DB])\n\n  describe file(current_log) do\n    its('content') { should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,DROP POLICY(,.*){2},#{Regexp.escape(drop_policy)}/ }\n    its('content') { should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,ALTER TABLE(,.*){2},#{Regexp.escape(disable_rls)}/ }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72939.rb",
            "line": 46
          },
          "id": "V-72939",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,DROP POLICY(,.*){2},DROP\\ POLICY\\ lock_table\\ ON\\ stig_test;/",
              "run_time": 0.021814184,
              "start_time": "2017-06-30 21:54:54 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /LOG:\\s*AUDIT:\\s*SESSION,[0-9]*,[0-9]*,DDL,ALTER TABLE(,.*){2},ALTER\\ TABLE\\ stig_test\\ DISABLE\\ ROW\\ LEVEL\\ SECURITY;/",
              "run_time": 0.029604004,
              "start_time": "2017-06-30 21:54:54 +0000"
            }
          ]
        },
        {
          "title": "Audit records must be generated when categorized information (e.g.,\n        classification levels/security levels) is deleted.",
          "desc": "Changes in categorized information must be tracked. Without an audit\n        trail, unauthorized access to protected data could go undetected.\n\n        For detailed information on categorizing information, refer to FIPS\n        Publication 199, Standards for Security Categorization of Federal\n        Information and Information Systems, and FIPS Publication 200, Minimum\n        Security Requirements for Federal Information and Information Systems.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000502-DB-000348",
            "gid": "V-73065",
            "rid": "SV-87717r1_rule",
            "stig_id": "PGS9-00-012500",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "As the database administrator, verify pgaudit is enabled by running\n      the following SQL:\n\n      $ sudo su - postgres\n      $ psql -c \"SHOW shared_preload_libraries\"\n\n      If the output does not contain \"pgaudit\", this is a finding.\n\n      Verify that role, read, write and ddl auditing are enabled:\n\n      $ psql -c \"SHOW pgaudit.log\"\n\n      If the output does not contain role, read, write, and ddl,\n      this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment variable.\n      See supplementary content APPENDIX-F for instructions on configuring\n      PGDATA.\n\n      To ensure that logging is enabled, review supplementary content APPENDIX-C\n      for instructions on enabling logging.\n\n      Using pgaudit PostgreSQL can be configured to audit these requests. See\n      supplementary content APPENDIX-B for documentation on installing pgaudit.\n\n      With pgaudit installed the following configurations can be made:\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n\n      Add the following parameters (or edit existing parameters):\n\n      pgaudit.log='ddl, role, read, write'\n\n      Now, as the system administrator, reload the server with the new\n      configuration:\n\n      # SYSTEMD SERVER ONLY\n      $ sudo systemctl reload postgresql-9.5\n\n      # INITD SERVER ONLY\n      $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-73065\" do\n  title \"Audit records must be generated when categorized information (e.g.,\n        classification levels/security levels) is deleted.\"\n  desc  \"Changes in categorized information must be tracked. Without an audit\n        trail, unauthorized access to protected data could go undetected.\n\n        For detailed information on categorizing information, refer to FIPS\n        Publication 199, Standards for Security Categorization of Federal\n        Information and Information Systems, and FIPS Publication 200, Minimum\n        Security Requirements for Federal Information and Information Systems.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n\n  tag \"gtitle\": \"SRG-APP-000502-DB-000348\"\n  tag \"gid\": \"V-73065\"\n  tag \"rid\": \"SV-87717r1_rule\"\n  tag \"stig_id\": \"PGS9-00-012500\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n\n  tag \"check\": \"As the database administrator, verify pgaudit is enabled by running\n      the following SQL:\n\n      $ sudo su - postgres\n      $ psql -c \\\"SHOW shared_preload_libraries\\\"\n\n      If the output does not contain \\\"pgaudit\\\", this is a finding.\n\n      Verify that role, read, write and ddl auditing are enabled:\n\n      $ psql -c \\\"SHOW pgaudit.log\\\"\n\n      If the output does not contain role, read, write, and ddl,\n      this is a finding.\"\n\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment variable.\n      See supplementary content APPENDIX-F for instructions on configuring\n      PGDATA.\n\n      To ensure that logging is enabled, review supplementary content APPENDIX-C\n      for instructions on enabling logging.\n\n      Using pgaudit PostgreSQL can be configured to audit these requests. See\n      supplementary content APPENDIX-B for documentation on installing pgaudit.\n\n      With pgaudit installed the following configurations can be made:\n\n      $ sudo su - postgres\n      $ vi ${PGDATA?}/postgresql.conf\n\n      Add the following parameters (or edit existing parameters):\n\n      pgaudit.log='ddl, role, read, write'\n\n      Now, as the system administrator, reload the server with the new\n      configuration:\n\n      # SYSTEMD SERVER ONLY\n      $ sudo systemctl reload postgresql-9.5\n\n      # INITD SERVER ONLY\n      $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW shared_preload_libraries;', [PG_DB]) do\n    its('output') { should include 'pgaudit' }\n  end\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'ddl' }\n    its('output') { should include 'read' }\n    its('output') { should include 'role' }\n    its('output') { should include 'write' }\n  end\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-73065.rb",
            "line": 104
          },
          "id": "V-73065",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW shared_preload_libraries; output should include \"pgaudit\"",
              "run_time": 0.000451394,
              "start_time": "2017-06-30 21:54:55 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
              "run_time": 0.000382867,
              "start_time": "2017-06-30 21:54:55 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"read\"",
              "run_time": 0.003050756,
              "start_time": "2017-06-30 21:54:55 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 0.000359998,
              "start_time": "2017-06-30 21:54:55 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 0.000239293,
              "start_time": "2017-06-30 21:54:55 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records showing starting and ending time\n  for user access to the database(s).",
          "desc": "For completeness of forensic analysis, it is necessary to know how long\n  a user's (or other principal's) connection to PostgreSQL lasts. This can be\n  achieved by recording disconnections, in addition to logons/connections, in\n  the audit logs.\n  Disconnection may be initiated by the user or forced by the system (as in a\n  timeout) or result from a system or network failure. To the greatest extent\n  possible, all disconnections must be logged.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000505-DB-000352",
            "gid": "V-72925",
            "rid": "SV-87577r1_rule",
            "stig_id": "PGS9-00-004700",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, log into the database with the postgres user by running the following\n  commands:\n  $ sudo su - postgres\n  $ psql -U postgres\n  Next, as the database administrator, verify the log for a connection audit trail:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/postgresql-Tue.log\n  < 2016-02-23 20:25:39.931 EST postgres 56cfa993.7a72 postgres: >LOG: connection\n  authorized: user=postgres database=postgres\n  < 2016-02-23 20:27:45.428 EST postgres 56cfa993.7a72 postgres: >LOG:\n  AUDIT: SESSION,1,1,READ,SELECT,,,SELECT current_user;,<none>\n  < 2016-02-23 20:27:47.988 EST postgres 56cfa993.7a72 postgres: >LOG:\n  disconnection: session time: 0:00:08.057 user=postgres database=postgres\n  host=[local]\n  If connections are not logged, this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  If logging is enabled the following configurations must be made to log\n  connections, date/time, username, and session identifier.\n  First, as the database administrator (shown here as \"postgres\"), edit\n  postgresql.conf by running the following:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Edit the following parameters:\n  log_connections = on\n  log_disconnections = on\n  log_line_prefix = '< %m %u %c: >'\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %c is the session ID for the connection\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72925\" do\n  title \"PostgreSQL must generate audit records showing starting and ending time\n  for user access to the database(s).\"\n  desc  \"For completeness of forensic analysis, it is necessary to know how long\n  a user's (or other principal's) connection to PostgreSQL lasts. This can be\n  achieved by recording disconnections, in addition to logons/connections, in\n  the audit logs.\n  Disconnection may be initiated by the user or forced by the system (as in a\n  timeout) or result from a system or network failure. To the greatest extent\n  possible, all disconnections must be logged.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000505-DB-000352\"\n  tag \"gid\": \"V-72925\"\n  tag \"rid\": \"SV-87577r1_rule\"\n  tag \"stig_id\": \"PGS9-00-004700\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  First, log into the database with the postgres user by running the following\n  commands:\n  $ sudo su - postgres\n  $ psql -U postgres\n  Next, as the database administrator, verify the log for a connection audit trail:\n  $ sudo su - postgres\n  $ cat ${PGDATA?}/pg_log/postgresql-Tue.log\n  < 2016-02-23 20:25:39.931 EST postgres 56cfa993.7a72 postgres: >LOG: connection\n  authorized: user=postgres database=postgres\n  < 2016-02-23 20:27:45.428 EST postgres 56cfa993.7a72 postgres: >LOG:\n  AUDIT: SESSION,1,1,READ,SELECT,,,SELECT current_user;,<none>\n  < 2016-02-23 20:27:47.988 EST postgres 56cfa993.7a72 postgres: >LOG:\n  disconnection: session time: 0:00:08.057 user=postgres database=postgres\n  host=[local]\n  If connections are not logged, this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\n  If logging is enabled the following configurations must be made to log\n  connections, date/time, username, and session identifier.\n  First, as the database administrator (shown here as \\\"postgres\\\"), edit\n  postgresql.conf by running the following:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Edit the following parameters:\n  log_connections = on\n  log_disconnections = on\n  log_line_prefix = '< %m %u %c: >'\n  Where:\n  * %m is the time and date\n  * %u is the username\n  * %c is the session ID for the connection\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n  log_directory = sql.query('SHOW log_directory;', [PG_DB]).output\n  current_log = command(\"ls -1t #{log_directory}/postgresql-*.log | head -1\").stdout.strip\n\n  time = Time.now\n  sql.query('SELECT now();', [PG_DB])\n  \n  timestamp = time.strftime('%Y-%m-%d %H:%M')\n  PG_HOST == '127.0.0.1' ? host = 'localhost' : host = PG_HOST\n\n  describe file(current_log) do\n    its('content') { should match /#{Regexp.escape(timestamp)}.*LOG:\\s*connection authorized:\\s*user=#{PG_DBA}\\s*database=#{PG_DB}/ }\n    its('content') { should match /#{Regexp.escape(timestamp)}.*LOG:\\s*disconnection: session time:.*user=#{PG_DBA}\\s*database=#{PG_DB}\\s*host=#{host}/ }\n  end\n  \nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72925.rb",
            "line": 46
          },
          "id": "V-72925",
          "results": [
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /2017\\-06\\-30\\ 21:54.*LOG:\\s*connection authorized:\\s*user=crunchy\\s*database=stig_test_db/",
              "run_time": 0.02616534,
              "start_time": "2017-06-30 21:54:55 +0000"
            },
            {
              "status": "passed",
              "code_desc": "File /var/vcap/sys/log/postgresql/postgresql-2017-06-30_195922.log content should match /2017\\-06\\-30\\ 21:54.*LOG:\\s*disconnection: session time:.*user=crunchy\\s*database=stig_test_db\\s*host=localhost/",
              "run_time": 0.02404966,
              "start_time": "2017-06-30 21:54:55 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must generate audit records when categorized information\n  (e.g., classification levels/security levels) is accessed.",
          "desc": "Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.",
          "impact": 0.5,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000494-DB-000344",
            "gid": "V-72919",
            "rid": "SV-87571r1_rule",
            "stig_id": "PGS9-00-004400",
            "cci": "CCI-000172",
            "nist": [
              "AU-12 c",
              "Rev_4"
            ],
            "check": "As the database administrator (shown here as \"postgres\"), run\n  the following SQL:\n  $ sudo su - postgres\n  $ psql -c \"SHOW pgaudit.log\"\n  If pgaudit.log does not contain, \"ddl, write, role\", this is a finding.",
            "fix": "Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using `pgaudit` the DBMS (PostgreSQL) can be configured to audit these\n  requests. See supplementary content `APPENDIX-B` for documentation on\n  installing `pgaudit`.\n  With `pgaudit` installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'ddl, write, role'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload"
          },
          "code": "control \"V-72919\" do\n  title \"PostgreSQL must generate audit records when categorized information\n  (e.g., classification levels/security levels) is accessed.\"\n  desc  \"Changes in categorized information must be tracked. Without an audit\n  trail, unauthorized access to protected data could go undetected.\n  For detailed information on categorizing information, refer to FIPS\n  Publication 199, Standards for Security Categorization of Federal Information\n  and Information Systems, and FIPS Publication 200, Minimum Security\n  Requirements for Federal Information and Information Systems.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000494-DB-000344\"\n  tag \"gid\": \"V-72919\"\n  tag \"rid\": \"SV-87571r1_rule\"\n  tag \"stig_id\": \"PGS9-00-004400\"\n  tag \"cci\": \"CCI-000172\"\n  tag \"nist\": [\"AU-12 c\", \"Rev_4\"]\n  tag \"check\": \"As the database administrator (shown here as \\\"postgres\\\"), run\n  the following SQL:\n  $ sudo su - postgres\n  $ psql -c \\\"SHOW pgaudit.log\\\"\n  If pgaudit.log does not contain, \\\"ddl, write, role\\\", this is a finding.\"\n  tag \"fix\": \"Note: The following instructions use the PGDATA environment\n  variable. See supplementary content APPENDIX-F for instructions on configuring\n  PGDATA.\n  Using `pgaudit` the DBMS (PostgreSQL) can be configured to audit these\n  requests. See supplementary content `APPENDIX-B` for documentation on\n  installing `pgaudit`.\n  With `pgaudit` installed the following configurations can be made:\n  $ sudo su - postgres\n  $ vi ${PGDATA?}/postgresql.conf\n  Add the following parameters (or edit existing parameters):\n  pgaudit.log = 'ddl, write, role'\n  Now, as the system administrator, reload the server with the new configuration:\n  # SYSTEMD SERVER ONLY\n  $ sudo systemctl reload postgresql-9.5\n  # INITD SERVER ONLY\n  $ sudo service postgresql-9.5 reload\"\n\n  sql = postgres_session(PG_DBA, PG_DBA_PASSWORD, PG_HOST)\n\n  describe sql.query('SHOW pgaudit.log;', [PG_DB]) do\n    its('output') { should include 'ddl' }\n    its('output') { should include 'role' }\n    its('output') { should include 'write' }\n  end\n  \nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72919.rb",
            "line": 46
          },
          "id": "V-72919",
          "results": [
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"ddl\"",
              "run_time": 0.000278152,
              "start_time": "2017-06-30 21:54:55 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"role\"",
              "run_time": 0.000268981,
              "start_time": "2017-06-30 21:54:55 +0000"
            },
            {
              "status": "passed",
              "code_desc": "PostgreSQL query: SHOW pgaudit.log; output should include \"write\"",
              "run_time": 0.000281382,
              "start_time": "2017-06-30 21:54:55 +0000"
            }
          ]
        },
        {
          "title": "PostgreSQL must provide audit record generation capability for\n  DoD-defined auditable events within all DBMS/database components.",
          "desc": "Crunchy Audit Logs meet all provided to us organization-defined\n        auditable events",
          "impact": 0,
          "refs": [],
          "tags": {
            "severity": "medium",
            "gtitle": "SRG-APP-000089-DB-000064",
            "gid": "V-72983",
            "rid": "SV-87635r1_rule",
            "stig_id": "PGS9-00-007400",
            "cci": "CCI-000169",
            "nist": [
              "AU-12 a",
              "Rev_4"
            ],
            "check": "Check PostgreSQL auditing to determine whether\n  organization-defined auditable events are being audited by the system.\n  If organization-defined auditable events are not being audited, this is a\n  finding.",
            "fix": "Configure PostgreSQL to generate audit records for at least the\n  DoD minimum set of events.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging."
          },
          "code": "control \"V-72983\" do\n  title \"PostgreSQL must provide audit record generation capability for\n  DoD-defined auditable events within all DBMS/database components.\"\n  desc  \"Without the capability to generate audit records, it would be difficult\n  to establish, correlate, and investigate the events relating to an incident or\n  identify those responsible for one.\n  Audit records can be generated from various components within PostgreSQL\n  (e.g., process, module). Certain specific application functionalities may be\n  audited as well. The list of audited events is the set of events for which\n  audits are to be generated. This set of events is typically a subset of the\n  list of all events for which the system is capable of generating audit records.\n  DoD has defined the list of events for which PostgreSQL will provide an audit\n  record generation capability as the following:\n  (i) Successful and unsuccessful attempts to access, modify, or delete\n  privileges, security objects, security levels, or categories of information\n  (e.g., classification levels);\n  (ii) Access actions, such as successful and unsuccessful logon attempts,\n  privileged activities, or other system-level access, starting and ending time\n  for user access to the system, concurrent logons from different workstations,\n  successful and unsuccessful accesses to objects, all program initiations,\n  and all direct access to the information system; and\n  (iii) All account creation, modification, disabling, and termination actions.\n  Organizations may define additional events requiring continuous or ad hoc\n  auditing.\"\n  impact 0.5\n  tag \"severity\": \"medium\"\n  tag \"gtitle\": \"SRG-APP-000089-DB-000064\"\n  tag \"gid\": \"V-72983\"\n  tag \"rid\": \"SV-87635r1_rule\"\n  tag \"stig_id\": \"PGS9-00-007400\"\n  tag \"cci\": \"CCI-000169\"\n  tag \"nist\": [\"AU-12 a\", \"Rev_4\"]\n  tag \"check\": \"Check PostgreSQL auditing to determine whether\n  organization-defined auditable events are being audited by the system.\n  If organization-defined auditable events are not being audited, this is a\n  finding.\"\n  tag \"fix\": \"Configure PostgreSQL to generate audit records for at least the\n  DoD minimum set of events.\n  Using pgaudit PostgreSQL can be configured to audit these requests. See\n  supplementary content APPENDIX-B for documentation on installing pgaudit.\n  To ensure that logging is enabled, review supplementary content APPENDIX-C for\n  instructions on enabling logging.\"\n\n  only_if { false }\n\nend\n",
          "source_location": {
            "ref": "/var/vcap/packages/postgresql-baseline/controls/V-72983.rb",
            "line": 23
          },
          "id": "V-72983",
          "results": [
            {
              "status": "skipped",
              "code_desc": "Operating System Detection",
              "skip_message": "Skipped control due to only_if condition.",
              "resource": "Operating System Detection",
              "run_time": 2.031e-05,
              "start_time": "2017-06-30 21:54:55 +0000"
            }
          ]
        }
      ],
      "groups": [
        {
          "title": null,
          "controls": [
            "V-73005"
          ],
          "id": "controls/V-73005.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73041"
          ],
          "id": "controls/V-73041.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72851"
          ],
          "id": "controls/V-72851.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72917"
          ],
          "id": "controls/V-72917.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73029"
          ],
          "id": "controls/V-73029.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72893"
          ],
          "id": "controls/V-72893.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72843"
          ],
          "id": "controls/V-72843.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73045"
          ],
          "id": "controls/V-73045.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73059"
          ],
          "id": "controls/V-73059.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72873"
          ],
          "id": "controls/V-72873.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73049"
          ],
          "id": "controls/V-73049.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73047"
          ],
          "id": "controls/V-73047.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73001"
          ],
          "id": "controls/V-73001.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72971"
          ],
          "id": "controls/V-72971.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72865"
          ],
          "id": "controls/V-72865.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72945"
          ],
          "id": "controls/V-72945.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72859"
          ],
          "id": "controls/V-72859.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72863"
          ],
          "id": "controls/V-72863.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73063"
          ],
          "id": "controls/V-73063.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73067"
          ],
          "id": "controls/V-73067.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72869"
          ],
          "id": "controls/V-72869.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72853"
          ],
          "id": "controls/V-72853.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72987"
          ],
          "id": "controls/V-72987.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72955"
          ],
          "id": "controls/V-72955.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72909"
          ],
          "id": "controls/V-72909.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72989"
          ],
          "id": "controls/V-72989.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72883"
          ],
          "id": "controls/V-72883.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72993"
          ],
          "id": "controls/V-72993.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73003"
          ],
          "id": "controls/V-73003.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72963"
          ],
          "id": "controls/V-72963.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72977"
          ],
          "id": "controls/V-72977.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72901"
          ],
          "id": "controls/V-72901.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72951"
          ],
          "id": "controls/V-72951.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73017"
          ],
          "id": "controls/V-73017.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73123"
          ],
          "id": "controls/V-73123.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72973"
          ],
          "id": "controls/V-72973.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72941"
          ],
          "id": "controls/V-72941.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72849"
          ],
          "id": "controls/V-72849.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72871"
          ],
          "id": "controls/V-72871.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72911"
          ],
          "id": "controls/V-72911.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73071"
          ],
          "id": "controls/V-73071.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72897"
          ],
          "id": "controls/V-72897.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73013"
          ],
          "id": "controls/V-73013.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72905"
          ],
          "id": "controls/V-72905.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72995"
          ],
          "id": "controls/V-72995.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73051"
          ],
          "id": "controls/V-73051.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72947"
          ],
          "id": "controls/V-72947.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72907"
          ],
          "id": "controls/V-72907.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73027"
          ],
          "id": "controls/V-73027.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72959"
          ],
          "id": "controls/V-72959.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73019"
          ],
          "id": "controls/V-73019.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73039"
          ],
          "id": "controls/V-73039.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72979"
          ],
          "id": "controls/V-72979.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72953"
          ],
          "id": "controls/V-72953.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72885"
          ],
          "id": "controls/V-72885.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72895"
          ],
          "id": "controls/V-72895.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73033"
          ],
          "id": "controls/V-73033.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72933"
          ],
          "id": "controls/V-72933.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72921"
          ],
          "id": "controls/V-72921.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72847"
          ],
          "id": "controls/V-72847.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73035"
          ],
          "id": "controls/V-73035.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72915"
          ],
          "id": "controls/V-72915.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72923"
          ],
          "id": "controls/V-72923.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73009"
          ],
          "id": "controls/V-73009.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72903"
          ],
          "id": "controls/V-72903.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73011"
          ],
          "id": "controls/V-73011.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72857"
          ],
          "id": "controls/V-72857.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72961"
          ],
          "id": "controls/V-72961.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73069"
          ],
          "id": "controls/V-73069.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73031"
          ],
          "id": "controls/V-73031.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73057"
          ],
          "id": "controls/V-73057.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72927"
          ],
          "id": "controls/V-72927.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73007"
          ],
          "id": "controls/V-73007.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72875"
          ],
          "id": "controls/V-72875.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72855"
          ],
          "id": "controls/V-72855.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73053"
          ],
          "id": "controls/V-73053.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72931"
          ],
          "id": "controls/V-72931.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73021"
          ],
          "id": "controls/V-73021.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72997"
          ],
          "id": "controls/V-72997.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72991"
          ],
          "id": "controls/V-72991.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72889"
          ],
          "id": "controls/V-72889.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72957"
          ],
          "id": "controls/V-72957.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72999"
          ],
          "id": "controls/V-72999.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72841"
          ],
          "id": "controls/V-72841.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72975"
          ],
          "id": "controls/V-72975.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72929"
          ],
          "id": "controls/V-72929.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72845"
          ],
          "id": "controls/V-72845.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72969"
          ],
          "id": "controls/V-72969.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72891"
          ],
          "id": "controls/V-72891.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72949"
          ],
          "id": "controls/V-72949.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72899"
          ],
          "id": "controls/V-72899.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72877"
          ],
          "id": "controls/V-72877.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73055"
          ],
          "id": "controls/V-73055.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73023"
          ],
          "id": "controls/V-73023.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72887"
          ],
          "id": "controls/V-72887.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73061"
          ],
          "id": "controls/V-73061.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72861"
          ],
          "id": "controls/V-72861.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72867"
          ],
          "id": "controls/V-72867.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73015"
          ],
          "id": "controls/V-73015.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72981"
          ],
          "id": "controls/V-72981.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73025"
          ],
          "id": "controls/V-73025.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72913"
          ],
          "id": "controls/V-72913.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72965"
          ],
          "id": "controls/V-72965.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73043"
          ],
          "id": "controls/V-73043.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73037"
          ],
          "id": "controls/V-73037.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72985"
          ],
          "id": "controls/V-72985.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72939"
          ],
          "id": "controls/V-72939.rb"
        },
        {
          "title": null,
          "controls": [
            "V-73065"
          ],
          "id": "controls/V-73065.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72925"
          ],
          "id": "controls/V-72925.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72919"
          ],
          "id": "controls/V-72919.rb"
        },
        {
          "title": null,
          "controls": [
            "V-72983"
          ],
          "id": "controls/V-72983.rb"
        }
      ],
      "attributes": [
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_log_line_prefix",
          "options": {
            "description": "Required value for log_line_prefix specified by organization",
            "default": "%m %u %d %s"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system group of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_port",
          "options": {
            "description": "The port used to connect to the database",
            "default": "5432"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_version",
          "options": {
            "description": "The version of postgres",
            "default": "9.5"
          }
        },
        {
          "name": "pg_shared_libs",
          "options": {
            "description": "defines the locations of the postgresql shared library directories",
            "default": [
              "/usr/pgsql-9.5",
              "/usr/pgsql-9.5/bin",
              "/usr/pgsql-9.5/include",
              "/usr/pgsql-9.5/lib",
              "/usr/pgsql-9.5/share"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system group of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_object_owners",
          "options": {
            "description": "Accounts authorized to own database objects",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_object_owners",
          "options": {
            "description": "Accounts authorized to own database objects",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_max_connections",
          "options": {
            "description": "The maximum number of connections a user can have open at one time",
            "default": "100 "
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system group of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_port",
          "options": {
            "description": "The port used to connect to the database",
            "default": "5432"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_version",
          "options": {
            "description": "The version of postgres",
            "default": "9.5"
          }
        },
        {
          "name": "pg_shared_libs",
          "options": {
            "description": "defines the locations of the postgresql shared library directories",
            "default": [
              "/usr/pgsql-9.5/bin",
              "/usr/pgsql-9.5/include",
              "/usr/pgsql-9.5/lib",
              "/usr/pgsql-9.5/share"
            ]
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system group of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_port",
          "options": {
            "description": "The port used to connect to the database",
            "default": "5432"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_version",
          "options": {
            "description": "The version of postgres",
            "default": "9.5"
          }
        },
        {
          "name": "pg_shared_libs",
          "options": {
            "description": "defines the locations of the postgresql shared library directories",
            "default": [
              "/usr/pgsql-9.5/bin",
              "/usr/pgsql-9.5/include",
              "/usr/pgsql-9.5/lib",
              "/usr/pgsql-9.5/share"
            ]
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_version",
          "options": {
            "description": "The version of postgres",
            "default": "9.5"
          }
        },
        {
          "name": "pg_shared_libs",
          "options": {
            "description": "defines the locations of the postgresql shared library directories",
            "default": [
              "/usr/pgsql-9.5/bin",
              "/usr/pgsql-9.5/include",
              "/usr/pgsql-9.5/lib",
              "/usr/pgsql-9.5/share"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_object_owners",
          "options": {
            "description": "Accounts authorized to own database objects",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_version",
          "options": {
            "description": "The version of postgres",
            "default": "9.5"
          }
        },
        {
          "name": "pg_shared_libs",
          "options": {
            "description": "defines the locations of the postgresql shared library directories",
            "default": [
              "/usr/pgsql-9.5/bin",
              "/usr/pgsql-9.5/include",
              "/usr/pgsql-9.5/lib",
              "/usr/pgsql-9.5/share"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_object_owners",
          "options": {
            "description": "Accounts authorized to own database objects",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system group of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_port",
          "options": {
            "description": "The port used to connect to the database",
            "default": "5432"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_version",
          "options": {
            "description": "The version of postgres",
            "default": "9.5"
          }
        },
        {
          "name": "pg_shared_libs",
          "options": {
            "description": "defines the locations of the postgresql shared library directories",
            "default": [
              "/usr/pgsql-9.5/bin",
              "/usr/pgsql-9.5/include",
              "/usr/pgsql-9.5/lib",
              "/usr/pgsql-9.5/share"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_object_owners",
          "options": {
            "description": "Accounts authorized to own database objects",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "password for the postgres dba password",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "the default postgres database",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "Hostname or ip allow to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_group",
          "options": {
            "description": "The system group of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_version",
          "options": {
            "description": "The version of postgres",
            "default": "9.5"
          }
        },
        {
          "name": "pg_shared_libs",
          "options": {
            "description": "defines the locations of the postgresql shared library directories",
            "default": [
              "/usr/pgsql-9.5",
              "/usr/pgsql-9.5/bin",
              "/usr/pgsql-9.5/include",
              "/usr/pgsql-9.5/lib",
              "/usr/pgsql-9.5/share"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_log_line_prefix",
          "options": {
            "description": "Required value for log_line_prefix specified by organization",
            "default": "< %m %u %d %s >"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_approved_extensions",
          "options": {
            "description": "Approved PostgreSQL extensions",
            "default": [
              "pgaudit",
              "pgcrypto"
            ]
          }
        },
        {
          "name": "pg_trusted_languges",
          "options": {
            "description": "Trusted PostgreSQL languages",
            "default": [
              "plpgsql"
            ]
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system group of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_port",
          "options": {
            "description": "The port used to connect to the database",
            "default": "5432"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_version",
          "options": {
            "description": "The version of postgres",
            "default": "9.5"
          }
        },
        {
          "name": "pg_shared_libs",
          "options": {
            "description": "defines the locations of the postgresql shared library directories",
            "default": [
              "/usr/pgsql-9.5/bin",
              "/usr/pgsql-9.5/include",
              "/usr/pgsql-9.5/lib",
              "/usr/pgsql-9.5/share"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_approved_extensions",
          "options": {
            "description": "Approved PostgreSQL extensions",
            "default": [
              "pgaudit",
              "pgcrypto"
            ]
          }
        },
        {
          "name": "pg_trusted_languges",
          "options": {
            "description": "Trusted PostgreSQL languages",
            "default": [
              "plpgsql"
            ]
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system group of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_port",
          "options": {
            "description": "The port used to connect to the database",
            "default": "5432"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system group of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_port",
          "options": {
            "description": "The port used to connect to the database",
            "default": "5432"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_version",
          "options": {
            "description": "The version of postgres",
            "default": "9.5"
          }
        },
        {
          "name": "pg_shared_libs",
          "options": {
            "description": "defines the locations of the postgresql shared library directories",
            "default": [
              "/usr/pgsql-9.5",
              "/usr/pgsql-9.5/bin",
              "/usr/pgsql-9.5/include",
              "/usr/pgsql-9.5/lib",
              "/usr/pgsql-9.5/share"
            ]
          }
        },
        {
          "name": "pg_trusted_languges",
          "options": {
            "description": "Trusted PostgreSQL languages",
            "default": [
              "plpgsql"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_object_owners",
          "options": {
            "description": "Accounts authorized to own database objects",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_port",
          "options": {
            "description": "The port used to connect to the database",
            "default": "5432"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_timezone",
          "options": {
            "description": "PostgreSQL timezone",
            "default": "UTC"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system group of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_port",
          "options": {
            "description": "The port used to connect to the database",
            "default": "5432"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_version",
          "options": {
            "description": "The version of postgres",
            "default": "9.5"
          }
        },
        {
          "name": "pg_shared_libs",
          "options": {
            "description": "defines the locations of the postgresql shared library directories",
            "default": [
              "/usr/pgsql-9.5/bin",
              "/usr/pgsql-9.5/include",
              "/usr/pgsql-9.5/lib",
              "/usr/pgsql-9.5/share"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_authorized_roles",
          "options": {
            "description": "Authorized database accounts"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_group",
          "options": {
            "description": "The system group of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_version",
          "options": {
            "description": "The version of postgres",
            "default": "9.5"
          }
        },
        {
          "name": "pg_shared_libs",
          "options": {
            "description": "defines the locations of the postgresql shared library directories",
            "default": [
              "/usr/pgsql-9.5",
              "/usr/pgsql-9.5/bin",
              "/usr/pgsql-9.5/include",
              "/usr/pgsql-9.5/lib",
              "/usr/pgsql-9.5/share"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system user of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_owner",
          "options": {
            "description": "The system group of the postgres process",
            "default": "postgres"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_port",
          "options": {
            "description": "The port used to connect to the database",
            "default": "5432"
          }
        },
        {
          "name": "pg_data",
          "options": {
            "description": "The postgres data directory",
            "default": "/var/lib/pgsql/9.5/data"
          }
        },
        {
          "name": "pg_conf",
          "options": {
            "description": "The postgres configuration file",
            "default": "/var/vcap/store/postgresql/data/postgresql.conf"
          }
        },
        {
          "name": "pg_user_defined_conf",
          "options": {
            "description": "An additional postgres configuration file used to override default values",
            "default": "/var/vcap/store/postgresql/data/user_defined.conf"
          }
        },
        {
          "name": "pg_superusers",
          "options": {
            "description": "Authorized superuser accounts",
            "default": [
              "vcap",
              "crunchy"
            ]
          }
        },
        {
          "name": "pg_version",
          "options": {
            "description": "The version of postgres",
            "default": "9.5"
          }
        },
        {
          "name": "pg_shared_libs",
          "options": {
            "description": "defines the locations of the postgresql shared library directories",
            "default": [
              "/usr/pgsql-9.5/bin",
              "/usr/pgsql-9.5/include",
              "/usr/pgsql-9.5/lib",
              "/usr/pgsql-9.5/share"
            ]
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        },
        {
          "name": "pg_dba",
          "options": {
            "description": "The postgres DBA user to access the test database",
            "default": "stig_dba"
          }
        },
        {
          "name": "pg_dba_password",
          "options": {
            "description": "The password for the postgres DBA user",
            "default": "stigD@1234#"
          }
        },
        {
          "name": "pg_db",
          "options": {
            "description": "The database used for tests",
            "default": "stig_test_db"
          }
        },
        {
          "name": "pg_host",
          "options": {
            "description": "The hostname or IP address used to connect to the database",
            "default": "127.0.0.1"
          }
        }
      ],
      "sha256": "c1971fbf3729e957484b6767e10414e8c5c4b58dba8a9d62d384a65de6112403"
    }
  ],
  "platform": {
    "name": "ubuntu",
    "release": "14.04"
  },
  "statistics": {
    "duration": 4.076820786
  }
}
